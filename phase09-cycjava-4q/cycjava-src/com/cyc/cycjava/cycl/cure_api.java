package com.cyc.cycjava.cycl;

import com.cyc.cycjava.cycl.cyc_testing.generic_testing;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions;
import com.cyc.cycjava.cycl.sbhl.sbhl_links;
import com.cyc.cycjava.cycl.sbhl.sbhl_graphs;
import com.cyc.cycjava.cycl.sbhl.sbhl_macros;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_link_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_paranoia;
import com.cyc.cycjava.cycl.sbhl.sbhl_search_vars;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters;
import com.cyc.cycjava.cycl.sksi.data_parser;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Time;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality;
import com.cyc.cycjava.cycl.inference.modules.removal.removal_modules_assertion_mt;
import com.cyc.cycjava.cycl.inference.harness.inference_kernel;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high;
import com.cyc.cycjava.cycl.nl.scg_api;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Eval;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sort;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers;
import com.cyc.cycjava.cycl.inference.ask_utilities;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.compatibility;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.stream_macros;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.StreamsLow;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLFloat;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;

public final class cure_api extends SubLTranslatedFile
{
    public static final SubLFile me;
    public static final String myName = "com.cyc.cycjava.cycl.cure_api";
    public static final String myFingerPrint = "dc0e43d75154ecb77f48ab48e68e8f718869dd6e892b4453c57bbe8b4427b517";
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 832L)
    private static SubLSymbol $term_learner_user_created_term_log_file$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 959L)
    private static SubLSymbol $term_learner_user_added_types_log_file$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 1080L)
    private static SubLSymbol $term_learner_accepted_meanings_log_file$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 1203L)
    private static SubLSymbol $term_learner_use_lexical_lookup_only$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 1448L)
    private static SubLSymbol $current_tl_task$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 1555L)
    public static SubLSymbol $term_learner_default_lexical_assertion_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 1637L)
    private static SubLSymbol $cure_edit_the_list_termsP$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 1721L)
    public static SubLSymbol $cure_allow_some_predicates_to_be_edited$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 25243L)
    private static SubLSymbol $default_create_as_type_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 27577L)
    private static SubLSymbol $allow_changes_to_focal_term_on_replicate$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 67641L)
    private static SubLSymbol $term_learner_valid_substitution_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 83661L)
    public static SubLSymbol $term_learner_unknown_status$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 83833L)
    public static SubLSymbol $term_learner_known_removable$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 83916L)
    public static SubLSymbol $term_learner_known_derived$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 84052L)
    public static SubLSymbol $term_learner_unknown_assertible$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 84140L)
    public static SubLSymbol $term_learner_impossible$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 84278L)
    public static SubLSymbol $term_learner_cyc_error$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 84356L)
    public static SubLSymbol $term_learner_downstream_error$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 84445L)
    public static SubLSymbol $term_learner_working$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 84516L)
    public static SubLSymbol $term_learner_known_not_removable$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 84637L)
    public static SubLSymbol $term_learner_rejected$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 84758L)
    public static SubLSymbol $term_learner_incomplete$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 84907L)
    private static SubLSymbol $term_learner_unmodifiable$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 87105L)
    private static SubLSymbol $term_learner_fact_status_int_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 90366L)
    private static SubLSymbol $followup_query_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 97349L)
    private static SubLSymbol $term_learner_category_label_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 97989L)
    private static SubLSymbol $get_followup_categories_for_type_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 98214L)
    private static SubLSymbol $get_pred_list_order_for_type_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 99518L)
    private static SubLSymbol $substitutable_arg_constraint_for_reln_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 101584L)
    private static SubLSymbol $categories_and_types_for_sentence_and_term_int_via_indexing_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 103784L)
    private static SubLSymbol $summary_pred_sort_order_for_focal_term_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 107962L)
    private static SubLSymbol $followup_query_mt_for_user_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 108812L)
    private static SubLSymbol $followup_query_mt_for_userXtask_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 109540L)
    private static SubLSymbol $cure_show_best_bindings$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 109701L)
    private static SubLSymbol $term_learner_known_bindings_for_sentence_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 112364L)
    private static SubLSymbol $term_learner_known_negated_bindings_for_sentence_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 112632L)
    private static SubLSymbol $term_learner_types_for_fragment_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 120483L)
    private static SubLSymbol $sources_of_mt_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 124825L)
    private static SubLSymbol $get_arg_positions_for_terms_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 140799L)
    private static SubLSymbol $delete_me_token$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 147332L)
    public static SubLSymbol $term_learner_source_documentation_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 147700L)
    public static SubLSymbol $source_spindle$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 147772L)
    public static SubLSymbol $source_spindle_query_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 148049L)
    private static SubLSymbol $term_learner_default_generation_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 157403L)
    private static SubLSymbol $normalize_cure_user_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 158194L)
    public static SubLSymbol $term_learner_base_source_creation_lock$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 158309L)
    private static SubLSymbol $term_learner_assert_redundant_mt_info$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 158766L)
    private static SubLSymbol $default_assert_mt_for_user_and_task_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 161237L)
    public static SubLSymbol $term_learner_sub_source_creation_lock$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 170936L)
    public static SubLSymbol $needs_approval$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 171080L)
    public static SubLSymbol $disapproved$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 171132L)
    public static SubLSymbol $approved$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 176161L)
    private static SubLSymbol $term_learner_type_prompt_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 176670L)
    private static SubLSymbol $term_learner_term_header_string_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179296L)
    private static SubLSymbol $default_task_for_user_int_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179639L)
    private static SubLSymbol $query_mt_for_task_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179757L)
    private static SubLSymbol $wff_checking_mt_for_task_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179889L)
    private static SubLSymbol $query_mt_for_user_and_task_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 180078L)
    private static SubLSymbol $wff_checking_mt_for_user_and_task_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 189611L)
    private static SubLSymbol $term_learner_cloud_display_nl_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 190017L)
    private static SubLSymbol $term_learner_displayable_generalizationP_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 190282L)
    private static SubLSymbol $term_learner_possibly_relevant_generalizationP_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 190714L)
    private static SubLSymbol $term_learner_irrelevance_listener$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 191630L)
    public static SubLSymbol $cb_show_followup_widget$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 192541L)
    private static SubLSymbol $cb_cure_external_host$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 192541L)
    private static SubLSymbol $cb_cure_external_port$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 192541L)
    private static SubLSymbol $cb_cure_external_context_path$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 192541L)
    private static SubLSymbol $cb_cure_internal_context_path$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 192541L)
    public static SubLSymbol $cb_cure_internal_host_override$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 192541L)
    public static SubLSymbol $cb_cure_internal_port_override$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 192541L)
    public static SubLSymbol $cb_show_cure_link$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 195210L)
    private static SubLSymbol $sentence_score_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 196168L)
    private static SubLSymbol $sentence_score_for_type_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 196865L)
    private static SubLSymbol $set_query_variable_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 198901L)
    private static SubLSymbol $get_fragments_for_terms_cached_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 209392L)
    private static SubLSymbol $collection_via_web_searchP_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 216218L)
    private static SubLSymbol $get_concept_tags_from_string_caching_state$;
    private static final SubLString $str0$_cyc_projects_doc_annotation_logs;
    private static final SubLString $str1$_cyc_projects_doc_annotation_logs;
    private static final SubLString $str2$_cyc_projects_doc_annotation_logs;
    private static final SubLObject $const3$EnglishMt;
    private static final SubLList $list4;
    private static final SubLList $list5;
    private static final SubLSymbol $kw6$ALLOW_OTHER_KEYS;
    private static final SubLSymbol $kw7$RENDERERS;
    private static final SubLSymbol $kw8$ORIGINAL_CYCL;
    private static final SubLSymbol $kw9$DISPLAY;
    private static final SubLSymbol $kw10$REQUIRED;
    private static final SubLSymbol $kw11$APPROVAL_CODE;
    private static final SubLSymbol $kw12$UNASSERTIBLE_SENTENCE_IDS;
    private static final SubLSymbol $sym13$NEW_TERM_LEARNER_TYPE_INT;
    private static final SubLList $list14;
    private static final SubLList $list15;
    private static final SubLSymbol $kw16$ORIGINAL_SENTENCE;
    private static final SubLSymbol $kw17$CURRENT_BINDINGS;
    private static final SubLSymbol $kw18$SUGGESTIONS;
    private static final SubLSymbol $kw19$JUSTIFICATIONS;
    private static final SubLSymbol $kw20$DEFAULT;
    private static final SubLSymbol $kw21$FRAGMENT_JUSTIFICATION;
    private static final SubLSymbol $kw22$NL_MT;
    private static final SubLList $list23;
    private static final SubLSymbol $kw24$DISPLAY_CYCL;
    private static final SubLSymbol $kw25$STATUS;
    private static final SubLSymbol $kw26$CLARIFYING_CYCL;
    private static final SubLSymbol $sym27$TERM_LEARNER_TYPE_FOR_FRAGMENT_INT;
    private static final SubLSymbol $sym28$TERM_LEARNER_KNOWN_MEANINGS_FOR_STRING;
    private static final SubLString $str29$___A__entering__S__;
    private static final SubLSymbol $kw30$APPEND;
    private static final SubLString $str31$Unable_to_open__S;
    private static final SubLString $str32$writing_to__S;
    private static final SubLSymbol $sym33$LEARN;
    private static final SubLSymbol $sym34$GET;
    private static final SubLSymbol $kw35$IS_NER_ENTRY_;
    private static final SubLSymbol $kw36$DENOT;
    private static final SubLString $str37$no_new_creation;
    private static final SubLObject $const38$Thing;
    private static final SubLObject $const39$CycAssistedDocumentReader;
    private static final SubLSymbol $kw40$IGNORE_ERRORS_TARGET;
    private static final SubLSymbol $sym41$IGNORE_ERRORS_HANDLER;
    private static final SubLString $str42$_input_date___A___S__input___;
    private static final SubLString $str43$Currently_Unknown_to_Cyc;
    private static final SubLString $str44$vocabMarking;
    private static final SubLSymbol $sym45$TERM_LEARNER_MEANINGS_FOR_TAGGED_TERM;
    private static final SubLSymbol $sym46$TERM_LEARNER_OBJECT_FROM_ID;
    private static final SubLList $list47;
    private static final SubLObject $const48$Individual;
    private static final SubLObject $const49$Collection;
    private static final SubLString $str50$;
    private static final SubLSymbol $kw51$UPCASE;
    private static final SubLSymbol $sym52$CONTROL_CHAR_P;
    private static final SubLObject $const53$inProgressTerm;
    private static final SubLObject $const54$BaseKB;
    private static final SubLObject $const55$isa;
    private static final SubLObject $const56$DocIngesterUserCreatedTerm;
    private static final SubLObject $const57$quotedIsa;
    private static final SubLList $list58;
    private static final SubLObject $const59$termStrings;
    private static final SubLObject $const60$and;
    private static final SubLObject $const61$ist_Asserted;
    private static final SubLSymbol $sym62$__MT;
    private static final SubLList $list63;
    private static final SubLObject $const64$InferencePSC;
    private static final SubLString $str65$___;
    private static final SubLSymbol $kw66$MEANING;
    private static final SubLSymbol $kw67$STRING;
    private static final SubLSymbol $sym68$DELETE_ENTRY_FROM_STRING;
    private static final SubLSymbol $sym69$LEARNED;
    private static final SubLSymbol $sym70$TERM_LEARNER_ORDERED_TYPES_FOR_TAGGED_TERM;
    private static final SubLList $list71;
    private static final SubLSymbol $sym72$_STRING;
    private static final SubLObject $const73$assertedSentence;
    private static final SubLList $list74;
    private static final SubLObject $const75$is_Underspecified;
    private static final SubLObject $const76$genls;
    private static final SubLSymbol $sym77$_;
    private static final SubLSymbol $sym78$GET_WEIGHT;
    private static final SubLSymbol $kw79$TYPE_PROMPT;
    private static final SubLSymbol $kw80$TYPE_HEADER;
    private static final SubLSymbol $kw81$TYPE_ALT_PHRASES;
    private static final SubLSymbol $kw82$LEXICAL_TYPES;
    private static final SubLSymbol $sym83$GET_TAXONOMIC_RENDERERS_FOR_TERM;
    private static final SubLString $str84$specs;
    private static final SubLString $str85$instances;
    private static final SubLString $str86$superiors;
    private static final SubLString $str87$genls;
    private static final SubLString $str88$isa;
    private static final SubLString $str89$Unimplemented_attempt_to_get__S_f;
    private static final SubLString $str90$string;
    private static final SubLSymbol $sym91$_EXIT;
    private static final SubLSymbol $sym92$TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION_;
    private static final SubLSymbol $sym93$GENLS_;
    private static final SubLSymbol $kw94$ASSERT_SENTENCE;
    private static final SubLSymbol $kw95$ASSERT_MT;
    private static final SubLSymbol $sym96$ASSERTION_IST_FORMULA;
    private static final SubLSymbol $kw97$USER;
    private static final SubLFloat $float98$0_9;
    private static final SubLSymbol $sym99$_EXCLUDE_VULGARITIES__;
    private static final SubLList $list100;
    private static final SubLSymbol $sym101$_EXCLUDE_SLANG__;
    private static final SubLSymbol $sym102$_EXCLUDE_ARCHAIC_SPEECH__;
    private static final SubLSymbol $sym103$_EXCLUDE_INDIRECT_RELATIONS__;
    private static final SubLSymbol $sym104$SHORTER_P;
    private static final SubLSymbol $sym105$TERM_LEARNER_ORDERED_TYPES_FOR_TERM_IN_DOCUMENT_STRING_MERGED_JUS;
    private static final SubLString $str106$_;
    private static final SubLString $str107$_;
    private static final SubLSymbol $sym108$TERM_LEARNER_ORDERED_TYPES_FOR_USER_ADDED_TYPE;
    private static final SubLString $str109$_input_cyctermid___A__date___A___;
    private static final SubLObject $const110$CollectionType;
    private static final SubLSymbol $sym111$DEFAULT_CREATE_AS_TYPE;
    private static final SubLSymbol $sym112$_PRED;
    private static final SubLObject $const113$defaultAutotypeSuggestionFromType;
    private static final SubLList $list114;
    private static final SubLList $list115;
    private static final SubLSymbol $sym116$_DEFAULT_CREATE_AS_TYPE_CACHING_STATE_;
    private static final SubLSymbol $kw117$CYCL;
    private static final SubLSymbol $kw118$WEIGHT;
    private static final SubLSymbol $kw119$CONCEPT_ID;
    private static final SubLSymbol $kw120$NL_STRING;
    private static final SubLSymbol $kw121$LEGEND_STRING;
    private static final SubLSymbol $kw122$ASSERT_SENTENCE_ID;
    private static final SubLSymbol $kw123$STATUS_CODE;
    private static final SubLSymbol $kw124$REPLICATION_SENTENCE_ID;
    private static final SubLSymbol $sym125$GET_TERM_LEARNER_RENDERER_FOR_CYCL_STRING;
    private static final SubLSymbol $sym126$GET_TERM_LEARNER_RENDERER_FOR_CYCL_ID;
    private static final SubLSymbol $sym127$GET_TERM_LEARNER_RENDERER_FOR_CYCL;
    private static final SubLList $list128;
    private static final SubLList $list129;
    private static final SubLSymbol $sym130$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL_STRING;
    private static final SubLSymbol $sym131$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL_ID;
    private static final SubLSymbol $sym132$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL;
    private static final SubLSymbol $sym133$GET_TERM_LEARNER_STRING_RENDERER_FROM_OPEN_SELECT_RENDERER_LIST;
    private static final SubLSymbol $kw134$RENDERER_TYPE;
    private static final SubLSymbol $kw135$OPEN_SELECT_RENDERER;
    private static final SubLSymbol $kw136$INITIALLY_SELECTED;
    private static final SubLSymbol $kw137$SELECTION_RENDERERS;
    private static final SubLSymbol $kw138$STRING_RENDERER;
    private static final SubLSymbol $kw139$DISPLAY_LINK;
    private static final SubLSymbol $kw140$PPH_EMPTY_CYCL;
    private static final SubLSymbol $kw141$GENLS;
    private static final SubLSymbol $kw142$GENLS_CONSTRAINTS;
    private static final SubLSymbol $kw143$ISA;
    private static final SubLSymbol $kw144$ISA_CONSTRAINTS;
    private static final SubLSymbol $kw145$MODIFIABLE_STRING_RENDERER;
    private static final SubLSymbol $kw146$ARG_POS;
    private static final SubLSymbol $kw147$MODIFIABLE_TEXT_RENDERER;
    private static final SubLString $str148$Some_other_;
    private static final SubLString $str149$Something_else;
    private static final SubLList $list150;
    private static final SubLSymbol $kw151$CONSTRAINT_STRING;
    private static final SubLSymbol $kw152$ALLOW_DUPLICATION;
    private static final SubLSymbol $sym153$_;
    private static final SubLSymbol $sym154$GENERALITY_ESTIMATE;
    private static final SubLSymbol $sym155$THCL_FORT_;
    private static final SubLList $list156;
    private static final SubLSymbol $kw157$TEXT_MATCHES;
    private static final SubLList $list158;
    private static final SubLSymbol $kw159$VALID;
    private static final SubLString $str160$newValue;
    private static final SubLSymbol $kw161$CYCL_ID;
    private static final SubLSymbol $kw162$JUSTIFICATION;
    private static final SubLSymbol $sym163$TERM_LEARNER_ADD_LEXICAL_PHRASE;
    private static final SubLString $str164$userAction;
    private static final SubLString $str165$termString;
    private static final SubLString $str166$choiceid;
    private static final SubLString $str167$justifications;
    private static final SubLString $str168$sentenceId;
    private static final SubLString $str169$termId;
    private static final SubLString $str170$title;
    private static final SubLString $str171$url;
    private static final SubLString $str172$code;
    private static final SubLSymbol $kw173$SENTENCE_ID;
    private static final SubLSymbol $kw174$NEW_SENTENCE_ID;
    private static final SubLString $str175$newSentenceId;
    private static final SubLString $str176$status;
    private static final SubLSymbol $kw177$UNINITIALIZED;
    private static final SubLSymbol $kw178$NEW_CYCL;
    private static final SubLString $str179$newCycLSentenceHLIDString;
    private static final SubLSymbol $kw180$NEW_CYCL_HL_ID;
    private static final SubLString $str181$newCycLSentenceDisplayString;
    private static final SubLString $str182$newNLSentence;
    private static final SubLString $str183$justification;
    private static final SubLSymbol $sym184$XML_TERM_LEARNER_USER_CHOICE;
    private static final SubLSymbol $kw185$XML_HANDLER;
    private static final SubLList $list186;
    private static final SubLString $str187$cyclarg;
    private static final SubLString $str188$stringarg;
    private static final SubLString $str189$assert;
    private static final SubLSymbol $kw190$ASSERT;
    private static final SubLString $str191$replace;
    private static final SubLSymbol $kw192$REPLACE;
    private static final SubLString $str193$unassert;
    private static final SubLSymbol $kw194$UNASSERT;
    private static final SubLSymbol $sym195$TERM_LEARNER_USER_CHOICE;
    private static final SubLSymbol $kw196$REJECT;
    private static final SubLList $list197;
    private static final SubLList $list198;
    private static final SubLSymbol $kw199$ACCEPT;
    private static final SubLSymbol $kw200$NEW_NL_SENTENCE;
    private static final SubLSymbol $kw201$NEW_CYCL_SENTENCE_STRING;
    private static final SubLString $str202$argpos;
    private static final SubLString $str203$sentence;
    private static final SubLSymbol $sym204$XML_TERM_LEARNER_CREATE_NEW;
    private static final SubLSymbol $sym205$LISTP;
    private static final SubLSymbol $sym206$_X88928381ASDF;
    private static final SubLSymbol $sym207$CURE_ASSERT_SENTENCE;
    private static final SubLSymbol $sym208$CURE_UNASSERT_SENTENCE;
    private static final SubLSymbol $sym209$CREATE_NEW_CURE_TERM_AND_ASSERT_SENTENCE;
    private static final SubLObject $const210$termDependsOn;
    private static final SubLObject $const211$UniversalVocabularyMt;
    private static final SubLSymbol $kw212$NL;
    private static final SubLSymbol $kw213$HL_ID;
    private static final SubLSymbol $sym214$TERM_LEARNER_CREATE_NEW;
    private static final SubLSymbol $sym215$HTML_URL_DECODE;
    private static final SubLSymbol $sym216$GET_BASE_SENTENCE_FROM_SENTENCE_STRING;
    private static final SubLSymbol $kw217$NEW_TERM;
    private static final SubLSymbol $sym218$TERM_LEARNER_RENDERER_FOR_NEW_TAXONOMIC_RELATIVE;
    private static final SubLString $str219$spec;
    private static final SubLString $str220$instance;
    private static final SubLSymbol $kw221$INVALID;
    private static final SubLSymbol $sym222$FIND_BY_ID_STRING_P;
    private static final SubLSymbol $sym223$DECODE_ID_STRING;
    private static final SubLSymbol $sym224$MAYBE_FIND_OBJECT_BY_COMPACT_HL_EXTERNAL_ID_STRING;
    private static final SubLString $str225$argPos;
    private static final SubLString $str226$limit;
    private static final SubLSymbol $sym227$XML_TERM_LEARNER_USER_SUBSTITUTION;
    private static final SubLSymbol $sym228$TERM_LEARNER_USER_SUBSTITUTION;
    private static final SubLString $str229$100;
    private static final SubLString $str230$_;
    private static final SubLSymbol $sym231$_THIS_QUERY_VAR;
    private static final SubLObject $const232$String;
    private static final SubLSymbol $sym233$NUMBERP;
    private static final SubLSymbol $sym234$SECOND_TRUE;
    private static final SubLSymbol $sym235$THIRD;
    private static final SubLList $list236;
    private static final SubLString $str237$Timeout_attempting_to_call_SCG_on;
    private static final SubLSymbol $sym238$TERM_LEARNER_VALID_SUBSTITUTION;
    private static final SubLSymbol $sym239$_TERM_LEARNER_VALID_SUBSTITUTION_CACHING_STATE_;
    private static final SubLSymbol $sym240$CLEAR_TERM_LEARNER_VALID_SUBSTITUTION;
    private static final SubLSymbol $sym241$LENGTH;
    private static final SubLSymbol $sym242$XML_TERM_LEARNER_POSSIBLE_TYPES_FROM_SUBSTITUTION;
    private static final SubLSymbol $sym243$TERM_LEARNER_POSSIBLE_TYPES_FROM_SUBSTITUTION;
    private static final SubLSymbol $sym244$RKF_STANDARD_STRING_WORDIFY;
    private static final SubLSymbol $kw245$LEXICON;
    private static final SubLSymbol $kw246$OUTPUT_SPEC;
    private static final SubLList $list247;
    private static final SubLSymbol $sym248$FIRST_TRUE;
    private static final SubLSymbol $sym249$TERM_LEARNER_AUTOCOMPLETE_NATIVE;
    private static final SubLList $list250;
    private static final SubLList $list251;
    private static final SubLSymbol $kw252$LIMIT;
    private static final SubLSymbol $kw253$RETURN_ATTRS;
    private static final SubLSymbol $kw254$SENTENCE;
    private static final SubLSymbol $kw255$CASE_SENSITIVE;
    private static final SubLSymbol $kw256$CONSTANTS;
    private static final SubLSymbol $sym257$TERM_LEARNER_AUTOCOMPLETE_INT;
    private static final SubLSymbol $sym258$TO_STRING;
    private static final SubLSymbol $sym259$COMPACT_HL_EXTERNAL_ID_STRING;
    private static final SubLList $list260;
    private static final SubLSymbol $sym261$TERM_LEARNER_AUTOCOMPLETE;
    private static final SubLList $list262;
    private static final SubLList $list263;
    private static final SubLString $str264$20;
    private static final SubLString $str265$Mww;
    private static final SubLString $str266$nil;
    private static final SubLList $list267;
    private static final SubLString $str268$prefix;
    private static final SubLString $str269$count;
    private static final SubLSymbol $sym270$XML_TERM_LEARNER_AUTOCOMPLETE;
    private static final SubLList $list271;
    private static final SubLSymbol $sym272$RELEVANT_MT_IS_EVERYTHING;
    private static final SubLObject $const273$EverythingPSC;
    private static final SubLSymbol $kw274$ISA_FILTER;
    private static final SubLSymbol $kw275$GENLS_FILTER;
    private static final SubLSymbol $kw276$ISA_RESTRICTIONS;
    private static final SubLSymbol $kw277$GENLS_RESTRICTIONS;
    private static final SubLSymbol $kw278$TIMEOUT;
    private static final SubLSymbol $kw279$CASE_SENSITIVE_;
    private static final SubLSymbol $kw280$COMPLETE_ON_CONSTANTS_;
    private static final SubLSymbol $sym281$GET_ALLOTTED_TASKS;
    private static final SubLSymbol $sym282$_X;
    private static final SubLList $list283;
    private static final SubLObject $const284$or;
    private static final SubLObject $const285$thereExists;
    private static final SubLSymbol $sym286$_CURRENT_TASK;
    private static final SubLList $list287;
    private static final SubLObject $const288$cureUserModel;
    private static final SubLSymbol $sym289$_MONAD_USER;
    private static final SubLObject $const290$allottedAgents;
    private static final SubLObject $const291$AnalystDatabaseMt;
    private static final SubLList $list292;
    private static final SubLObject $const293$MtUnionFn;
    private static final SubLList $list294;
    private static final SubLSymbol $sym295$TERM_LEARNER_GET_FACT_SHEET_FOR_TERM;
    private static final SubLString $str296$_html__body_No_known_facts__body_;
    private static final SubLSymbol $kw297$NORMAL;
    private static final SubLString $str298$_;
    private static final SubLSymbol $sym299$TERM_LEARNER_GET_FACT_SHEET_UPDATES_FOR_TERM;
    private static final SubLList $list300;
    private static final SubLList $list301;
    private static final SubLSymbol $kw302$SLOT_VALUE_PREFERENCE_PATTERN;
    private static final SubLSymbol $kw303$NOT;
    private static final SubLSymbol $kw304$OR;
    private static final SubLString $str305$Fact_sheet_properties___S;
    private static final SubLString $str306$preferSlotValueFormatForTermLearn;
    private static final SubLSymbol $kw307$ALLOW_ABNORMALITY_CHECKING_;
    private static final SubLSymbol $kw308$MAX_PROBLEM_COUNT;
    private static final SubLInteger $int309$1000;
    private static final SubLSymbol $kw310$EVALUATE_SUBL_ALLOWED_;
    private static final SubLSymbol $kw311$NEW_TERMS_ALLOWED_;
    private static final SubLSymbol $kw312$COMPUTE_ANSWER_JUSTIFICATIONS_;
    private static final SubLSymbol $kw313$MAX_NUMBER;
    private static final SubLSymbol $kw314$MAX_TRANSFORMATION_DEPTH;
    private static final SubLSymbol $kw315$MAX_PROOF_DEPTH;
    private static final SubLSymbol $kw316$CONTINUABLE_;
    private static final SubLSymbol $kw317$PRODUCTIVITY_LIMIT;
    private static final SubLInteger $int318$100;
    private static final SubLString $str319$forbidSlotValueFormatForTermLearn;
    private static final SubLSymbol $kw320$ANSWER_LANGUAGE;
    private static final SubLSymbol $kw321$HL;
    private static final SubLList $list322;
    private static final SubLSymbol $sym323$TERM_LEARNER_FACT_STATUS;
    private static final SubLSymbol $kw324$TERM;
    private static final SubLString $str325$null;
    private static final SubLSymbol $sym326$TERM_LEARNER_FACT_STATUS_INT;
    private static final SubLString $str327$Derived_from_other_assertions;
    private static final SubLSymbol $sym328$_TERM_LEARNER_FACT_STATUS_INT_CACHING_STATE_;
    private static final SubLSymbol $sym329$CLEAR_TERM_LEARNER_FACT_STATUS_INT;
    private static final SubLSymbol $sym330$TERM_LEARNER_FIND_VISIBLE_ASSERTIONS_CYCL;
    private static final SubLList $list331;
    private static final SubLString $str332$conceptId;
    private static final SubLString $str333$max;
    private static final SubLString $str334$questionsOnly;
    private static final SubLString $str335$true;
    private static final SubLString $str336$unknownOnly;
    private static final SubLString $str337$user;
    private static final SubLObject $const338$CycAdministrator;
    private static final SubLString $str339$ignoreList;
    private static final SubLSymbol $sym340$XML_TERM_LEARNER_GET_FOLLOWUPS_FOR_TERM;
    private static final SubLSymbol $sym341$TERM_LEARNER_GET_FOLLOWUPS_FOR_CYCL_TERM;
    private static final SubLSymbol $sym342$TERM_LEARNER_GET_FOLLOWUPS_FOR_TERM;
    private static final SubLSymbol $kw343$UNCATEGORIZED;
    private static final SubLSymbol $kw344$TYPES;
    private static final SubLSymbol $kw345$BLANKS;
    private static final SubLSymbol $sym346$EQUALS_EL_;
    private static final SubLSymbol $kw347$CATEGORY_INFO;
    private static final SubLList $list348;
    private static final SubLSymbol $sym349$HIGHER_PRIORITY_FOLLOWUP_IN_CATEGORY;
    private static final SubLSymbol $kw350$CATEGORY;
    private static final SubLSymbol $kw351$CATEGORY_NL;
    private static final SubLObject $const352$EnglishParaphraseMt;
    private static final SubLSymbol $sym353$TERM_LEARNER_CATEGORY_LABEL;
    private static final SubLString $str354$Advanced_Info;
    private static final SubLObject $const355$termSummaryPredicateLabel;
    private static final SubLSymbol $kw356$GAF;
    private static final SubLObject $const357$genStringAssertion;
    private static final SubLSymbol $sym358$_TERM_LEARNER_CATEGORY_LABEL_CACHING_STATE_;
    private static final SubLSymbol $sym359$CLEAR_TERM_LEARNER_CATEGORY_LABEL;
    private static final SubLSymbol $sym360$GET_FOLLOWUP_CATEGORIES_FOR_TYPE;
    private static final SubLSymbol $sym361$_CAT;
    private static final SubLObject $const362$subtopicCollectionForCategory;
    private static final SubLSymbol $sym363$_GET_FOLLOWUP_CATEGORIES_FOR_TYPE_CACHING_STATE_;
    private static final SubLInteger $int364$1024;
    private static final SubLSymbol $sym365$CLEAR_GET_FOLLOWUP_CATEGORIES_FOR_TYPE;
    private static final SubLSymbol $sym366$GET_PRED_LIST_ORDER_FOR_TYPE;
    private static final SubLSymbol $sym367$_PRED_LIST;
    private static final SubLObject $const368$summaryPredicateWRTSetOrCollectio;
    private static final SubLList $list369;
    private static final SubLSymbol $sym370$_GET_PRED_LIST_ORDER_FOR_TYPE_CACHING_STATE_;
    private static final SubLSymbol $sym371$CLEAR_GET_PRED_LIST_ORDER_FOR_TYPE;
    private static final SubLObject $const372$not;
    private static final SubLSymbol $sym373$EL_VARIABLE_P;
    private static final SubLSymbol $sym374$SUBSTITUTABLE_ARG_CONSTRAINT_FOR_RELN;
    private static final SubLSymbol $sym375$_COL;
    private static final SubLObject $const376$argGenl;
    private static final SubLList $list377;
    private static final SubLSymbol $sym378$_SUBSTITUTABLE_ARG_CONSTRAINT_FOR_RELN_CACHING_STATE_;
    private static final SubLInteger $int379$256;
    private static final SubLSymbol $sym380$CLEAR_SUBSTITUTABLE_ARG_CONSTRAINT_FOR_RELN;
    private static final SubLList $list381;
    private static final SubLSymbol $sym382$_N;
    private static final SubLObject $const383$equalSymbols;
    private static final SubLSymbol $sym384$_TERM;
    private static final SubLObject $const385$argN;
    private static final SubLSymbol $sym386$_SENTENCE_PRED;
    private static final SubLList $list387;
    private static final SubLList $list388;
    private static final SubLList $list389;
    private static final SubLList $list390;
    private static final SubLList $list391;
    private static final SubLList $list392;
    private static final SubLList $list393;
    private static final SubLList $list394;
    private static final SubLList $list395;
    private static final SubLSymbol $sym396$CATEGORIES_AND_TYPES_FOR_SENTENCE_AND_TERM_INT_VIA_INDEXING;
    private static final SubLList $list397;
    private static final SubLList $list398;
    private static final SubLList $list399;
    private static final SubLSymbol $sym400$RELEVANT_MT_IS_GENL_MT;
    private static final SubLSymbol $kw401$TRUE;
    private static final SubLList $list402;
    private static final SubLSymbol $sym403$_CATEGORIES_AND_TYPES_FOR_SENTENCE_AND_TERM_INT_VIA_INDEXING_CACH;
    private static final SubLSymbol $sym404$CLEAR_CATEGORIES_AND_TYPES_FOR_SENTENCE_AND_TERM_INT_VIA_INDEXING;
    private static final SubLSymbol $sym405$FIRST;
    private static final SubLSymbol $sym406$SUMMARY_PRED_SORT_ORDER_FOR_FOCAL_TERM;
    private static final SubLList $list407;
    private static final SubLList $list408;
    private static final SubLList $list409;
    private static final SubLSymbol $sym410$GENERALITY_ESTIMATE_;
    private static final SubLList $list411;
    private static final SubLSymbol $sym412$CDADR;
    private static final SubLSymbol $sym413$_SUMMARY_PRED_SORT_ORDER_FOR_FOCAL_TERM_CACHING_STATE_;
    private static final SubLInteger $int414$128;
    private static final SubLSymbol $sym415$CLEAR_SUMMARY_PRED_SORT_ORDER_FOR_FOCAL_TERM;
    private static final SubLString $str416$_______________________________Fo;
    private static final SubLString $str417$_______________________________Fo;
    private static final SubLString $str418$_______________________________Fr;
    private static final SubLString $str419$_______________________________Fr;
    private static final SubLString $str420$_______________________________Un;
    private static final SubLSymbol $sym421$FOLLOWUP_QUERY_MT_FOR_USER;
    private static final SubLSymbol $sym422$_TOPIC;
    private static final SubLObject $const423$interests;
    private static final SubLList $list424;
    private static final SubLObject $const425$DocumentReaderFollowupsForInteres;
    private static final SubLSymbol $sym426$_FOLLOWUP_QUERY_MT_FOR_USER_CACHING_STATE_;
    private static final SubLSymbol $sym427$CLEAR_FOLLOWUP_QUERY_MT_FOR_USER;
    private static final SubLSymbol $sym428$FOLLOWUP_QUERY_MT_FOR_USER_TASK;
    private static final SubLSymbol $sym429$_MT;
    private static final SubLObject $const430$defaultCUREGuidanceMt;
    private static final SubLObject $const431$SpecificationVariantFn;
    private static final SubLList $list432;
    private static final SubLObject $const433$analysisTask;
    private static final SubLList $list434;
    private static final SubLSymbol $sym435$_FOLLOWUP_QUERY_MT_FOR_USER_TASK_CACHING_STATE_;
    private static final SubLSymbol $sym436$CLEAR_FOLLOWUP_QUERY_MT_FOR_USER_TASK;
    private static final SubLSymbol $sym437$TERM_LEARNER_KNOWN_BINDINGS_FOR_SENTENCE;
    private static final SubLList $list438;
    private static final SubLObject $const439$nearestIsa;
    private static final SubLObject $const440$nearestGenls;
    private static final SubLObject $const441$commonAilmentCause;
    private static final SubLObject $const442$objectFoundInLocation;
    private static final SubLObject $const443$properlyGeographicallySubsumes;
    private static final SubLObject $const444$MtSpace;
    private static final SubLObject $const445$AnytimePSC;
    private static final SubLSymbol $sym446$_TERM_LEARNER_KNOWN_BINDINGS_FOR_SENTENCE_CACHING_STATE_;
    private static final SubLSymbol $sym447$CLEAR_TERM_LEARNER_KNOWN_BINDINGS_FOR_SENTENCE;
    private static final SubLList $list448;
    private static final SubLSymbol $sym449$TERM_LEARNER_KNOWN_NEGATED_BINDINGS_FOR_SENTENCE;
    private static final SubLSymbol $sym450$_TERM_LEARNER_KNOWN_NEGATED_BINDINGS_FOR_SENTENCE_CACHING_STATE_;
    private static final SubLSymbol $sym451$CLEAR_TERM_LEARNER_KNOWN_NEGATED_BINDINGS_FOR_SENTENCE;
    private static final SubLSymbol $sym452$TERM_LEARNER_TYPES_FOR_FRAGMENT;
    private static final SubLSymbol $sym453$_TERM_LEARNER_TYPES_FOR_FRAGMENT_CACHING_STATE_;
    private static final SubLSymbol $sym454$CLEAR_TERM_LEARNER_TYPES_FOR_FRAGMENT;
    private static final SubLObject $const455$singleEntryFormatInArgs;
    private static final SubLObject $const456$List;
    private static final SubLObject $const457$CharacterString;
    private static final SubLSymbol $sym458$_Y;
    private static final SubLObject $const459$TheList;
    private static final SubLList $list460;
    private static final SubLList $list461;
    private static final SubLObject $const462$constrainKnownValuesForPredRelati;
    private static final SubLList $list463;
    private static final SubLObject $const464$SentenceOfCWFn;
    private static final SubLList $list465;
    private static final SubLList $list466;
    private static final SubLObject $const467$WebPageCWFn;
    private static final SubLList $list468;
    private static final SubLSymbol $sym469$SOURCES_OF_MT;
    private static final SubLSymbol $sym470$_PCW;
    private static final SubLObject $const471$contextOfPCWInterpretation;
    private static final SubLList $list472;
    private static final SubLSymbol $sym473$_SOURCES_OF_MT_CACHING_STATE_;
    private static final SubLSymbol $sym474$CLEAR_SOURCES_OF_MT;
    private static final SubLSymbol $sym475$TERM_LEARNER_CANDIDATE_HIERARCHICAL_REPLACEMENTS_FOR_SENTENCE;
    private static final SubLList $list476;
    private static final SubLSymbol $sym477$JAVA_RENDERING_P;
    private static final SubLSymbol $sym478$JAVA_RENDERING_TO_SELECTION_RENDERER;
    private static final SubLSymbol $sym479$GET_ARG_POSITIONS_FOR_TERMS;
    private static final SubLSymbol $sym480$_GET_ARG_POSITIONS_FOR_TERMS_CACHING_STATE_;
    private static final SubLSymbol $kw481$PPH_UNKNOWN_ARG_POSITION;
    private static final SubLSymbol $sym482$PPH_JAVALIST_ITEM_STRING;
    private static final SubLSymbol $sym483$CB_NAUT_FRAME;
    private static final SubLSymbol $sym484$PPH_NAUT_ID_FN;
    private static final SubLSymbol $kw485$INTERROGATIVE;
    private static final SubLString $str486$__;
    private static final SubLString $str487$_;
    private static final SubLSymbol $sym488$PPH_PHRASE_OUTPUT_LIST_P;
    private static final SubLSymbol $kw489$CHOOSE_A_VALUE;
    private static final SubLString $str490$Choose_a_value;
    private static final SubLInteger $int491$40;
    private static final SubLList $list492;
    private static final SubLSymbol $kw493$IGNORE;
    private static final SubLList $list494;
    private static final SubLSymbol $sym495$TERM_LEARNER_TYPES_FOR_SENTENCE;
    private static final SubLSymbol $sym496$TERM_LEARNER_TYPES_FOR_SENTENCE_ID;
    private static final SubLList $list497;
    private static final SubLString $str498$add_before;
    private static final SubLSymbol $sym499$_NEW_VAR;
    private static final SubLString $str500$remove;
    private static final SubLString $str501$can_t_duplicate_with_uninterpreta;
    private static final SubLSymbol $sym502$CURE_POSSIBLY_DUPLICATE_ARG;
    private static final SubLSymbol $kw503$TEST;
    private static final SubLSymbol $kw504$OWNER;
    private static final SubLSymbol $kw505$CLASSES;
    private static final SubLSymbol $kw506$KB;
    private static final SubLSymbol $kw507$FULL;
    private static final SubLSymbol $kw508$WORKING_;
    private static final SubLList $list509;
    private static final SubLObject $const510$DocumentationPredicate;
    private static final SubLObject $const511$equals;
    private static final SubLSymbol $kw512$LENIENT;
    private static final SubLSymbol $sym513$STRINGP;
    private static final SubLString $str514$WebDocumentsMt;
    private static final SubLObject $const515$WebDocumentsMt;
    private static final SubLObject $const516$MassMediaDataMt;
    private static final SubLString $str517$Unable_to_initialize__A__;
    private static final SubLObject $const518$AssistedReaderSourceSpindle;
    private static final SubLObject $const519$AssistedReaderSourceSpindleCollec;
    private static final SubLObject $const520$TechnicalEnglishLexicalMt;
    private static final SubLObject $const521$MedicalLexicalMt;
    private static final SubLSymbol $kw522$PPH_LEXICAL_CONTEXT;
    private static final SubLSymbol $kw523$PPH_AGREEMENT;
    private static final SubLSymbol $sym524$GET_CYCL;
    private static final SubLList $list525;
    private static final SubLSymbol $sym526$TERM_LEARNER_HANDLE_USER_CHOICE;
    private static final SubLSymbol $sym527$TERM_EXPANSION_EXPECTED_SENTENCE_;
    private static final SubLSymbol $sym528$TRANSFORM_TO_TRUE;
    private static final SubLSymbol $sym529$ASSERTION_MT;
    private static final SubLSymbol $kw530$CHOICE_ID;
    private static final SubLString $str531$Error_while_trying_to_handle_;
    private static final SubLSymbol $kw532$NEW_SENTENCE_CYCL;
    private static final SubLString $str533$_accepted_meaning_date___A__user_;
    private static final SubLObject $const534$True;
    private static final SubLObject $const535$termExpansionExpected;
    private static final SubLObject $const536$UnsourcedDataForUserByTaskMtFn;
    private static final SubLObject $const537$userTaskSortsWorkBySourceDocument;
    private static final SubLSymbol $sym538$NORMALIZE_CURE_USER;
    private static final SubLSymbol $sym539$_BASE_USER;
    private static final SubLSymbol $sym540$_TASK;
    private static final SubLSymbol $sym541$_NORMALIZE_CURE_USER_CACHING_STATE_;
    private static final SubLInteger $int542$32;
    private static final SubLSymbol $kw543$NOTHING;
    private static final SubLSymbol $kw544$TOOL;
    private static final SubLString $str545$term_learner_base_source_creation;
    private static final SubLObject $const546$AssistedReaderSourceSpindleForTas;
    private static final SubLSymbol $sym547$DEFAULT_ASSERT_MT_FOR_USER_AND_TASK;
    private static final SubLObject $const548$assistedReaderAssertionMtForTaskA;
    private static final SubLSymbol $sym549$_DEFAULT_ASSERT_MT_FOR_USER_AND_TASK_CACHING_STATE_;
    private static final SubLSymbol $sym550$CLEAR_DEFAULT_ASSERT_MT_FOR_USER_AND_TASK;
    private static final SubLSymbol $sym551$_CW;
    private static final SubLObject $const552$urlOfCW;
    private static final SubLObject $const553$URLFn;
    private static final SubLList $list554;
    private static final SubLObject $const555$mtSpindleMember;
    private static final SubLObject $const556$ContextOfPCWFn;
    private static final SubLList $list557;
    private static final SubLObject $const558$titleOfWork;
    private static final SubLObject $const559$ContextOfPCWInterpretationFn;
    private static final SubLObject $const560$contextOfPCW;
    private static final SubLString $str561$term_learner_sub_source_creation_;
    private static final SubLObject $const562$asHtmlSourceString;
    private static final SubLList $list563;
    private static final SubLObject $const564$subWorks;
    private static final SubLList $list565;
    private static final SubLInteger $int566$30;
    private static final SubLList $list567;
    private static final SubLObject $const568$AISForFn;
    private static final SubLObject $const569$genlMt;
    private static final SubLObject $const570$Microtheory;
    private static final SubLSymbol $sym571$_SUBWORK;
    private static final SubLList $list572;
    private static final SubLList $list573;
    private static final SubLSymbol $sym574$_WORK;
    private static final SubLSymbol $sym575$CLEAR_MTS_FOR_USER;
    private static final SubLSymbol $sym576$CLEAR_MTS_FOR_URL_USER;
    private static final SubLSymbol $kw577$MT;
    private static final SubLSymbol $kw578$BROAD_MT;
    private static final SubLString $str579$do_broad_mt_index;
    private static final SubLSymbol $kw580$SKIP;
    private static final SubLString $str581$assertionDependsOn;
    private static final SubLList $list582;
    private static final SubLSymbol $sym583$CYCLIST_FORT;
    private static final SubLSymbol $sym584$HUMAN_CYCLIST_;
    private static final SubLString $str585$needsApproval;
    private static final SubLString $str586$disapproved;
    private static final SubLString $str587$approved;
    private static final SubLList $list588;
    private static final SubLSymbol $sym589$STANFORD_NER;
    private static final SubLSymbol $sym590$RUN;
    private static final SubLSymbol $sym591$GET_CYC;
    private static final SubLSymbol $sym592$GET_STRING;
    private static final SubLList $list593;
    private static final SubLObject $const594$PredicateTaxonomy;
    private static final SubLList $list595;
    private static final SubLSymbol $kw596$STANFORD_NER;
    private static final SubLSymbol $sym597$TIGHTEN_TYPE;
    private static final SubLSymbol $kw598$STANFORD_NER_PSP;
    private static final SubLList $list599;
    private static final SubLSymbol $sym600$O;
    private static final SubLSymbol $sym601$GET_TYPE;
    private static final SubLSymbol $kw602$THING;
    private static final SubLSymbol $sym603$TERM_LEARNER_TYPE_PROMPT;
    private static final SubLList $list604;
    private static final SubLString $str605$cat;
    private static final SubLString $str606$_;
    private static final SubLSymbol $sym607$_TERM_LEARNER_TYPE_PROMPT_CACHING_STATE_;
    private static final SubLSymbol $sym608$TERM_LEARNER_TERM_HEADER_STRING;
    private static final SubLSymbol $sym609$_TERM_LEARNER_TERM_HEADER_STRING_CACHING_STATE_;
    private static final SubLInteger $int610$5000;
    private static final SubLSymbol $sym611$CLEAR_TERM_LEARNER_TERM_HEADER_STRING;
    private static final SubLSymbol $sym612$TERM_LEARNER_ALTERNATIVE_PHRASES;
    private static final SubLSymbol $sym613$DELETE;
    private static final SubLSymbol $kw614$NOW;
    private static final SubLObject $const615$ist;
    private static final SubLObject $const616$assertionDependsOn;
    private static final SubLSymbol $sym617$DEFAULT_TASK_FOR_USER;
    private static final SubLSymbol $sym618$DEFAULT_TASK_FOR_USER_INT;
    private static final SubLObject $const619$defaultTask;
    private static final SubLObject $const620$GeneralCycKETask_Allotment;
    private static final SubLSymbol $sym621$_DEFAULT_TASK_FOR_USER_INT_CACHING_STATE_;
    private static final SubLSymbol $sym622$CLEAR_DEFAULT_TASK_FOR_USER_INT;
    private static final SubLSymbol $sym623$QUERY_MT_FOR_TASK;
    private static final SubLSymbol $sym624$_QUERY_MT_FOR_TASK_CACHING_STATE_;
    private static final SubLSymbol $sym625$CLEAR_QUERY_MT_FOR_TASK;
    private static final SubLSymbol $sym626$WFF_CHECKING_MT_FOR_TASK;
    private static final SubLSymbol $sym627$_WFF_CHECKING_MT_FOR_TASK_CACHING_STATE_;
    private static final SubLSymbol $sym628$CLEAR_WFF_CHECKING_MT_FOR_TASK;
    private static final SubLSymbol $sym629$QUERY_MT_FOR_USER_AND_TASK;
    private static final SubLSymbol $sym630$_QUERY_MT_FOR_USER_AND_TASK_CACHING_STATE_;
    private static final SubLSymbol $sym631$CLEAR_QUERY_MT_FOR_USER_AND_TASK;
    private static final SubLSymbol $sym632$WFF_CHECKING_MT_FOR_USER_AND_TASK;
    private static final SubLSymbol $sym633$_WFF_CHECKING_MT_FOR_USER_AND_TASK_CACHING_STATE_;
    private static final SubLSymbol $sym634$CLEAR_WFF_CHECKING_MT_FOR_USER_AND_TASK;
    private static final SubLString $str635$types;
    private static final SubLSymbol $kw636$NOT_FOUND;
    private static final SubLString $str637$category;
    private static final SubLString $str638$categoryNL;
    private static final SubLString $str639$typeSet;
    private static final SubLString $str640$id;
    private static final SubLString $str641$required;
    private static final SubLString $str642$false;
    private static final SubLString $str643$display;
    private static final SubLString $str644$cyclTerm;
    private static final SubLString $str645$nlString;
    private static final SubLString $str646$legendString;
    private static final SubLString $str647$replicationSentenceId;
    private static final SubLString $str648$statusCode;
    private static final SubLString $str649$type;
    private static final SubLString $str650$renderers;
    private static final SubLString $str651$renderer;
    private static final SubLString $str652$isaConstraint;
    private static final SubLString $str653$genlsConstraint;
    private static final SubLString $str654$text_matches;
    private static final SubLString $str655$heading;
    private static final SubLList $list656;
    private static final SubLString $str657$initiallySelected;
    private static final SubLString $str658$selectionRenderer;
    private static final SubLString $str659$cyclId;
    private static final SubLSymbol $sym660$TERM_LEARNER_CONCEPT_CLOUDS;
    private static final SubLSymbol $kw661$TERM_WEIGHT;
    private static final SubLSymbol $kw662$CLOUD;
    private static final SubLSymbol $sym663$TERM_LEARNER_TERM_CONCEPT_CLOUD;
    private static final SubLSymbol $kw664$NEW;
    private static final SubLSymbol $sym665$SIXTH;
    private static final SubLSymbol $sym666$TERM_LEARNER_CONCEPT_CLOUD_AS_XML;
    private static final SubLString $str667$cloud;
    private static final SubLSymbol $kw668$GENL_IDS;
    private static final SubLSymbol $kw669$ISA_IDS;
    private static final SubLString $str670$cycl;
    private static final SubLString $str671$t;
    private static final SubLString $str672$f;
    private static final SubLString $str673$weight;
    private static final SubLString $str674$nl;
    private static final SubLString $str675$concept;
    private static final SubLString $str676$genl;
    private static final SubLSymbol $sym677$TERM_LEARNER_CONCEPT_CLOUD_NEW_INT;
    private static final SubLSymbol $sym678$TERM_LEARNER_ID;
    private static final SubLSymbol $sym679$TERM_LEARNER_CLOUD_DISPLAY_NL;
    private static final SubLSymbol $sym680$_TERM_LEARNER_CLOUD_DISPLAY_NL_CACHING_STATE_;
    private static final SubLInteger $int681$4096;
    private static final SubLSymbol $sym682$CLEAR_TERM_LEARNER_CLOUD_DISPLAY_NL;
    private static final SubLSymbol $sym683$TERM_LEARNER_DISPLAYABLE_GENERALIZATION_;
    private static final SubLSymbol $sym684$_TERM_LEARNER_DISPLAYABLE_GENERALIZATION__CACHING_STATE_;
    private static final SubLSymbol $sym685$CLEAR_TERM_LEARNER_DISPLAYABLE_GENERALIZATION_;
    private static final SubLObject $const686$Now;
    private static final SubLList $list687;
    private static final SubLSymbol $sym688$_TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION__CACHING_STATE_;
    private static final SubLSymbol $sym689$CLEAR_TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION_;
    private static final SubLSymbol $kw690$KB_MODIFY_IRRELEVANCE;
    private static final SubLSymbol $sym691$CLEAR_TERM_LEARNER_IRRELEVANCIES_FOR_TERM;
    private static final SubLSymbol $sym692$CYCL_TERMS_TO_NL_STRINGS_QUICK;
    private static final SubLSymbol $sym693$_CB_SHOW_FOLLOWUP_WIDGET_;
    private static final SubLString $str694$_termId_;
    private static final SubLString $str695$_termString_;
    private static final SubLString $str696$cycFollowup;
    private static final SubLList $list697;
    private static final SubLSymbol $kw698$FOLLOWUP_LOADER;
    private static final SubLSymbol $kw699$CURE;
    private static final SubLString $str700$cure_png;
    private static final SubLString $str701$cure_cyc_com;
    private static final SubLInteger $int702$8080;
    private static final SubLString $str703$_ConceptSearch;
    private static final SubLString $str704$_cure;
    private static final SubLSymbol $sym705$_CB_CURE_INTERNAL_HOST_OVERRIDE_;
    private static final SubLSymbol $sym706$_CB_CURE_INTERNAL_PORT_OVERRIDE_;
    private static final SubLString $str707$CURE;
    private static final SubLSymbol $sym708$CATCH_ERROR_MESSAGE_HANDLER;
    private static final SubLString $str709$CURE_Broken;
    private static final SubLString $str710$CURE_broken___S;
    private static final SubLString $str711$http___;
    private static final SubLString $str712$_edit_jsp_conceptid_;
    private static final SubLString $str713$_cycHost_;
    private static final SubLString $str714$_cycPort_;
    private static final SubLString $str715$_userName_;
    private static final SubLString $str716$_cure;
    private static final SubLInteger $int717$600;
    private static final SubLInteger $int718$400;
    private static final SubLString $str719$_cycdoc_img_cb_cure_png;
    private static final SubLString $str720$bottom;
    private static final SubLString $str721$height_1_2em;
    private static final SubLSymbol $sym722$SENTENCE_SCORE;
    private static final SubLList $list723;
    private static final SubLSymbol $sym724$ALL_INSTANCES;
    private static final SubLSymbol $sym725$_SENTENCE_SCORE_CACHING_STATE_;
    private static final SubLSymbol $sym726$SENTENCE_SCORE_FOR_TYPE;
    private static final SubLSymbol $sym727$_QUERY_VAR;
    private static final SubLSymbol $sym728$_SENTENCE_SCORE_FOR_TYPE_CACHING_STATE_;
    private static final SubLSymbol $sym729$SET_QUERY_VARIABLE;
    private static final SubLSymbol $sym730$_SET_QUERY_VARIABLE_CACHING_STATE_;
    private static final SubLObject $const731$DaveS;
    private static final SubLString $str732$something;
    private static final SubLObject $const733$GenericInstanceFn;
    private static final SubLSymbol $sym734$SECOND;
    private static final SubLSymbol $sym735$GET_FRAGMENTS_FOR_TERMS_CACHED;
    private static final SubLSymbol $sym736$_GET_FRAGMENTS_FOR_TERMS_CACHED_CACHING_STATE_;
    private static final SubLSymbol $sym737$CLEAR_GET_FRAGMENTS_FOR_TERMS_CACHED;
    private static final SubLObject $const738$Restaurant_Organization;
    private static final SubLList $list739;
    private static final SubLList $list740;
    private static final SubLList $list741;
    private static final SubLString $str742$cdolist;
    private static final SubLString $str743$gathering_preds_for_;
    private static final SubLObject $const744$SomeFn;
    private static final SubLList $list745;
    private static final SubLObject $const746$DocumentReaderFollowupsForTaskMtF;
    private static final SubLSymbol $kw747$BREADTH;
    private static final SubLSymbol $kw748$QUEUE;
    private static final SubLSymbol $kw749$STACK;
    private static final SubLSymbol $sym750$RELEVANT_SBHL_TV_IS_GENERAL_TV;
    private static final SubLSymbol $kw751$ERROR;
    private static final SubLString $str752$_A_is_not_a__A;
    private static final SubLSymbol $sym753$SBHL_TRUE_TV_P;
    private static final SubLSymbol $kw754$CERROR;
    private static final SubLString $str755$continue_anyway;
    private static final SubLSymbol $kw756$WARN;
    private static final SubLString $str757$_A_is_not_a_valid__sbhl_type_erro;
    private static final SubLString $str758$_A_is_neither_SET_P_nor_LISTP_;
    private static final SubLString $str759$attempting_to_bind_direction_link;
    private static final SubLString $str760$Node__a_does_not_pass_sbhl_type_t;
    private static final SubLFloat $float761$0_001;
    private static final SubLObject $const762$GeneralCycKE;
    private static final SubLSymbol $sym763$CAAR;
    private static final SubLObject $const764$generateFormulasForElements_TermI;
    private static final SubLObject $const765$TheSet;
    private static final SubLSymbol $kw766$CONTEXT_STRING;
    private static final SubLSymbol $kw767$SOURCE;
    private static final SubLSymbol $sym768$RESTART_CONCEPT_SEARCH_DEMO_SERVER;
    private static final SubLString $str769$Restarting_CCF_Demo_Cyc_Server;
    private static final SubLString $str770$_cyc_java_pkg_WebServicesTester_b;
    private static final SubLSymbol $kw771$COLLECTION;
    private static final SubLSymbol $kw772$INDIVIDUAL;
    private static final SubLList $list773;
    private static final SubLSymbol $sym774$COLLECTION_VIA_WEB_SEARCH_;
    private static final SubLFloat $float775$0_01;
    private static final SubLFloat $float776$0_1;
    private static final SubLSymbol $sym777$_COLLECTION_VIA_WEB_SEARCH__CACHING_STATE_;
    private static final SubLInteger $int778$50;
    private static final SubLSymbol $sym779$YAHOO_COUNT_CACHED;
    private static final SubLString $str780$_much_;
    private static final SubLString $str781$_;
    private static final SubLString $str782$_many_;
    private static final SubLSymbol $sym783$GET_CONCEPT_TAGS_FROM_STRING;
    private static final SubLSymbol $sym784$_GET_CONCEPT_TAGS_FROM_STRING_CACHING_STATE_;
    private static final SubLSymbol $sym785$CLEAR_GET_CONCEPT_TAGS_FROM_STRING;
    private static final SubLSymbol $sym786$GET_FILLER_SCORE;
    private static final SubLSymbol $sym787$FIND_SENTENCE_FILLERS;
    private static final SubLList $list788;
    private static final SubLList $list789;
    private static final SubLList $list790;
    private static final SubLSymbol $sym791$GET_QUERIES_FOR_TERM;
    private static final SubLSymbol $sym792$GET_QUERIES_FROM_SENTENCES;
    private static final SubLSymbol $sym793$TERM_LEARNER_AUTOCOMPLETE_NATIVE_WITH_CYCADMINISTRATOR;
    private static final SubLSymbol $sym794$LENGTH_;
    private static final SubLList $list795;
    private static final SubLSymbol $sym796$TERM_LEARNER_CANDIDATE_HIERARCHICAL_REPLACEMENTS_FOR_SENTENCE_INT;
    private static final SubLSymbol $sym797$VALID_HIERARCHICAL_CANDIDATES_P;
    private static final SubLList $list798;
    private static final SubLSymbol $sym799$TERM_LEARNER_TYPES_FOR_SENTENCE_ID_TEST_FN;
    private static final SubLSymbol $sym800$SOME_SELECTION_RENDERER_HAS_STRING_P;
    private static final SubLList $list801;
    private static final SubLSymbol $sym802$TERM_LEARNER_KNOWN_BINDINGS_FOR_SENTENCE_NEG;
    private static final SubLSymbol $sym803$BINDINGS_DONT_MENTION;
    private static final SubLList $list804;
    private static final SubLSymbol $sym805$BINDINGS_MENTION;
    private static final SubLList $list806;
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 1847L)
    public static SubLObject new_term_learner_type(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        SubLObject cycl = (SubLObject)cure_api.NIL;
        SubLObject weight = (SubLObject)cure_api.NIL;
        SubLObject justifications = (SubLObject)cure_api.NIL;
        SubLObject fragment_justification = (SubLObject)cure_api.NIL;
        SubLObject nl_string = (SubLObject)cure_api.NIL;
        SubLObject assert_sentence = (SubLObject)cure_api.NIL;
        SubLObject status_code = (SubLObject)cure_api.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list4);
        cycl = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list4);
        weight = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list4);
        justifications = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list4);
        fragment_justification = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list4);
        nl_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list4);
        assert_sentence = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list4);
        status_code = current.first();
        current = current.rest();
        SubLObject allow_other_keys_p = (SubLObject)cure_api.NIL;
        SubLObject rest = current;
        SubLObject bad = (SubLObject)cure_api.NIL;
        SubLObject current_$1 = (SubLObject)cure_api.NIL;
        while (cure_api.NIL != rest) {
            cdestructuring_bind.destructuring_bind_must_consp(rest, datum, (SubLObject)cure_api.$list4);
            current_$1 = rest.first();
            rest = rest.rest();
            cdestructuring_bind.destructuring_bind_must_consp(rest, datum, (SubLObject)cure_api.$list4);
            if (cure_api.NIL == conses_high.member(current_$1, (SubLObject)cure_api.$list5, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                bad = (SubLObject)cure_api.T;
            }
            if (current_$1 == cure_api.$kw6$ALLOW_OTHER_KEYS) {
                allow_other_keys_p = rest.first();
            }
            rest = rest.rest();
        }
        if (cure_api.NIL != bad && cure_api.NIL == allow_other_keys_p) {
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list4);
        }
        final SubLObject renderers_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw7$RENDERERS, current);
        final SubLObject renderers = (SubLObject)((cure_api.NIL != renderers_tail) ? conses_high.cadr(renderers_tail) : cure_api.NIL);
        final SubLObject original_cycl_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw8$ORIGINAL_CYCL, current);
        final SubLObject original_cycl = (SubLObject)((cure_api.NIL != original_cycl_tail) ? conses_high.cadr(original_cycl_tail) : cure_api.NIL);
        final SubLObject display_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw9$DISPLAY, current);
        final SubLObject display = (SubLObject)((cure_api.NIL != display_tail) ? conses_high.cadr(display_tail) : cure_api.T);
        final SubLObject required_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw10$REQUIRED, current);
        final SubLObject required = (SubLObject)((cure_api.NIL != required_tail) ? conses_high.cadr(required_tail) : cure_api.T);
        final SubLObject approval_code_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw11$APPROVAL_CODE, current);
        final SubLObject approval_code = (SubLObject)((cure_api.NIL != approval_code_tail) ? conses_high.cadr(approval_code_tail) : cure_api.NIL);
        final SubLObject unassertible_sentence_ids_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw12$UNASSERTIBLE_SENTENCE_IDS, current);
        final SubLObject unassertible_sentence_ids = (SubLObject)((cure_api.NIL != unassertible_sentence_ids_tail) ? conses_high.cadr(unassertible_sentence_ids_tail) : cure_api.NIL);
        return (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$sym13$NEW_TERM_LEARNER_TYPE_INT, cycl, weight, justifications, fragment_justification, nl_string, assert_sentence, status_code, renderers, original_cycl, display, required, approval_code, unassertible_sentence_ids });
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 2314L)
    public static SubLObject term_learner_type_for_fragment_int_2(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        SubLObject sentence = (SubLObject)cure_api.NIL;
        SubLObject domain_mt = (SubLObject)cure_api.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list14);
        sentence = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list14);
        domain_mt = current.first();
        current = current.rest();
        SubLObject allow_other_keys_p = (SubLObject)cure_api.NIL;
        SubLObject rest = current;
        SubLObject bad = (SubLObject)cure_api.NIL;
        SubLObject current_$2 = (SubLObject)cure_api.NIL;
        while (cure_api.NIL != rest) {
            cdestructuring_bind.destructuring_bind_must_consp(rest, datum, (SubLObject)cure_api.$list14);
            current_$2 = rest.first();
            rest = rest.rest();
            cdestructuring_bind.destructuring_bind_must_consp(rest, datum, (SubLObject)cure_api.$list14);
            if (cure_api.NIL == conses_high.member(current_$2, (SubLObject)cure_api.$list15, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                bad = (SubLObject)cure_api.T;
            }
            if (current_$2 == cure_api.$kw6$ALLOW_OTHER_KEYS) {
                allow_other_keys_p = rest.first();
            }
            rest = rest.rest();
        }
        if (cure_api.NIL != bad && cure_api.NIL == allow_other_keys_p) {
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list14);
        }
        final SubLObject original_sentence_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw16$ORIGINAL_SENTENCE, current);
        final SubLObject original_sentence = (SubLObject)((cure_api.NIL != original_sentence_tail) ? conses_high.cadr(original_sentence_tail) : cure_api.NIL);
        final SubLObject current_bindings_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw17$CURRENT_BINDINGS, current);
        final SubLObject current_bindings = (SubLObject)((cure_api.NIL != current_bindings_tail) ? conses_high.cadr(current_bindings_tail) : cure_api.NIL);
        final SubLObject suggestions_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw18$SUGGESTIONS, current);
        final SubLObject suggestions = (SubLObject)((cure_api.NIL != suggestions_tail) ? conses_high.cadr(suggestions_tail) : cure_api.NIL);
        final SubLObject justifications_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw19$JUSTIFICATIONS, current);
        final SubLObject justifications = (SubLObject)((cure_api.NIL != justifications_tail) ? conses_high.cadr(justifications_tail) : cure_api.$kw20$DEFAULT);
        final SubLObject fragment_justification_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw21$FRAGMENT_JUSTIFICATION, current);
        final SubLObject fragment_justification = (SubLObject)((cure_api.NIL != fragment_justification_tail) ? conses_high.cadr(fragment_justification_tail) : cure_api.NIL);
        final SubLObject nl_mt_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw22$NL_MT, current);
        final SubLObject nl_mt = (SubLObject)((cure_api.NIL != nl_mt_tail) ? conses_high.cadr(nl_mt_tail) : cure_api.$list23);
        final SubLObject approval_code_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw11$APPROVAL_CODE, current);
        final SubLObject approval_code = (SubLObject)((cure_api.NIL != approval_code_tail) ? conses_high.cadr(approval_code_tail) : cure_api.NIL);
        final SubLObject display_cycl_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw24$DISPLAY_CYCL, current);
        final SubLObject display_cycl = (SubLObject)((cure_api.NIL != display_cycl_tail) ? conses_high.cadr(display_cycl_tail) : cure_api.NIL);
        final SubLObject status_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw25$STATUS, current);
        final SubLObject status = (SubLObject)((cure_api.NIL != status_tail) ? conses_high.cadr(status_tail) : cure_api.NIL);
        final SubLObject clarifying_cycl_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw26$CLARIFYING_CYCL, current);
        final SubLObject clarifying_cycl = (SubLObject)((cure_api.NIL != clarifying_cycl_tail) ? conses_high.cadr(clarifying_cycl_tail) : cure_api.NIL);
        return (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$sym27$TERM_LEARNER_TYPE_FOR_FRAGMENT_INT, sentence, domain_mt, original_sentence, current_bindings, suggestions, justifications, fragment_justification, nl_mt, approval_code, display_cycl, status, clarifying_cycl });
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 2922L)
    public static SubLObject term_learner_known_meanings_for_string(final SubLObject v_term, SubLObject context_string, SubLObject app_type, SubLObject user) {
        if (context_string == cure_api.UNPROVIDED) {
            context_string = (SubLObject)cure_api.NIL;
        }
        if (app_type == cure_api.UNPROVIDED) {
            app_type = (SubLObject)cure_api.NIL;
        }
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym28$TERM_LEARNER_KNOWN_MEANINGS_FOR_STRING, v_term, context_string, app_type, user));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym28$TERM_LEARNER_KNOWN_MEANINGS_FOR_STRING, v_term, context_string, app_type, user));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject lexicon = document_annotation_widgets.get_default_document_ingester_annotation_lexicon((SubLObject)cure_api.UNPROVIDED);
        final SubLObject learned_entries = methods.funcall_instance_method_with_1_args(lexicon, (SubLObject)cure_api.$sym33$LEARN, unicode_nauts.convert_unicode_nauts_to_utf8_strings(v_term));
        final SubLObject entries = methods.funcall_instance_method_with_1_args(lexicon, (SubLObject)cure_api.$sym34$GET, v_term);
        SubLObject result = (SubLObject)cure_api.NIL;
        SubLObject cycls = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = entries;
        SubLObject lex_entry = (SubLObject)cure_api.NIL;
        lex_entry = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.NIL == methods.funcall_instance_method_with_1_args(lex_entry, (SubLObject)cure_api.$sym34$GET, (SubLObject)cure_api.$kw35$IS_NER_ENTRY_)) {
                final SubLObject item_var = methods.funcall_instance_method_with_1_args(lex_entry, (SubLObject)cure_api.$sym34$GET, (SubLObject)cure_api.$kw36$DENOT);
                if (cure_api.NIL == conses_high.member(item_var, cycls, (SubLObject)cure_api.EQUAL, Symbols.symbol_function((SubLObject)cure_api.IDENTITY))) {
                    cycls = (SubLObject)ConsesLow.cons(item_var, cycls);
                }
            }
            final SubLObject _prev_bind_3 = api_control_vars.$the_cyclist$.currentBinding(thread);
            try {
                api_control_vars.$the_cyclist$.bind(user, thread);
                if (cure_api.NIL == cycls && !app_type.equal((SubLObject)cure_api.$str37$no_new_creation)) {
                    final SubLObject type = cure_api.$const38$Thing;
                    final SubLObject item_var2 = find_or_create_term_learner_stub_term(v_term, type);
                    if (cure_api.NIL == conses_high.member(item_var2, cycls, (SubLObject)cure_api.EQUAL, Symbols.symbol_function((SubLObject)cure_api.IDENTITY))) {
                        cycls = (SubLObject)ConsesLow.cons(item_var2, cycls);
                    }
                }
            }
            finally {
                api_control_vars.$the_cyclist$.rebind(_prev_bind_3, thread);
            }
            cdolist_list_var = cdolist_list_var.rest();
            lex_entry = cdolist_list_var.first();
        }
        cdolist_list_var = entries;
        lex_entry = (SubLObject)cure_api.NIL;
        lex_entry = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.NIL != methods.funcall_instance_method_with_1_args(lex_entry, (SubLObject)cure_api.$sym34$GET, (SubLObject)cure_api.$kw35$IS_NER_ENTRY_)) {
                cure_remove_lex_entry_from_default_lexicon(lex_entry, v_term);
            }
            cdolist_list_var = cdolist_list_var.rest();
            lex_entry = cdolist_list_var.first();
        }
        cdolist_list_var = cycls;
        SubLObject cycl = (SubLObject)cure_api.NIL;
        cycl = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            result = (SubLObject)ConsesLow.cons(new_term_learner_term_meaning(cycl, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), result);
            cdolist_list_var = cdolist_list_var.rest();
            cycl = cdolist_list_var.first();
        }
        final SubLObject _prev_bind_2 = api_control_vars.$the_cyclist$.currentBinding(thread);
        final SubLObject _prev_bind_4 = rkf_macros.$rkf_asserting_tool$.currentBinding(thread);
        try {
            api_control_vars.$the_cyclist$.bind(user, thread);
            rkf_macros.$rkf_asserting_tool$.bind(cure_api.$const39$CycAssistedDocumentReader, thread);
            if (cure_api.NIL == result) {
                SubLObject ignore_errors_tag = (SubLObject)cure_api.NIL;
                try {
                    thread.throwStack.push(cure_api.$kw40$IGNORE_ERRORS_TARGET);
                    final SubLObject _prev_bind_0_$3 = Errors.$error_handler$.currentBinding(thread);
                    try {
                        Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cure_api.$sym41$IGNORE_ERRORS_HANDLER), thread);
                        try {
                            SubLObject stream2 = (SubLObject)cure_api.NIL;
                            try {
                                final SubLObject _prev_bind_0_$4 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                try {
                                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                                    stream2 = compatibility.open_text(cure_api.$term_learner_user_created_term_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                                }
                                finally {
                                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$4, thread);
                                }
                                if (!stream2.isStream()) {
                                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, cure_api.$term_learner_user_created_term_log_file$.getDynamicValue(thread));
                                }
                                final SubLObject s = stream2;
                                PrintLow.format(s, (SubLObject)cure_api.$str42$_input_date___A___S__input___, numeric_date_utilities.timestamp((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), v_term);
                            }
                            finally {
                                final SubLObject _prev_bind_0_$5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                    final SubLObject _values2 = Values.getValuesAsVector();
                                    if (stream2.isStream()) {
                                        streams_high.close(stream2, (SubLObject)cure_api.UNPROVIDED);
                                    }
                                    Values.restoreValuesFromVector(_values2);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$5, thread);
                                }
                            }
                        }
                        catch (Throwable catch_var) {
                            Errors.handleThrowable(catch_var, (SubLObject)cure_api.NIL);
                        }
                    }
                    finally {
                        Errors.$error_handler$.rebind(_prev_bind_0_$3, thread);
                    }
                }
                catch (Throwable ccatch_env_var) {
                    ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, (SubLObject)cure_api.$kw40$IGNORE_ERRORS_TARGET);
                }
                finally {
                    thread.throwStack.pop();
                }
                if (!app_type.equal((SubLObject)cure_api.$str37$no_new_creation)) {
                    final SubLObject base_type = cure_api.$const38$Thing;
                    final SubLObject base_name = (cure_api.NIL != fort_types_interface.collectionP(base_type)) ? morphology.singularize_string(v_term, (SubLObject)cure_api.UNPROVIDED) : v_term;
                    final SubLObject new_constant = find_or_create_term_learner_stub_term(base_name, base_type);
                    result = (SubLObject)ConsesLow.cons(new_term_learner_term_meaning(new_constant, (SubLObject)cure_api.$str43$Currently_Unknown_to_Cyc, (SubLObject)cure_api.UNPROVIDED), result);
                }
            }
        }
        finally {
            rkf_macros.$rkf_asserting_tool$.rebind(_prev_bind_4, thread);
            api_control_vars.$the_cyclist$.rebind(_prev_bind_2, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 5624L)
    public static SubLObject term_learner_create_as_individualP(final SubLObject term_string, SubLObject v_context, SubLObject app_type) {
        if (v_context == cure_api.UNPROVIDED) {
            v_context = (SubLObject)cure_api.NIL;
        }
        if (app_type == cure_api.UNPROVIDED) {
            app_type = (SubLObject)cure_api.NIL;
        }
        if (app_type.equalp((SubLObject)cure_api.$str44$vocabMarking)) {
            return (SubLObject)cure_api.NIL;
        }
        return (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == string_likely_denotes_collectionP(term_string, v_context));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 5887L)
    public static SubLObject term_learner_meanings_for_tagged_term(final SubLObject concept_id_list, SubLObject known, SubLObject user) {
        if (known == cure_api.UNPROVIDED) {
            known = (SubLObject)cure_api.T;
        }
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym45$TERM_LEARNER_MEANINGS_FOR_TAGGED_TERM, concept_id_list));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym45$TERM_LEARNER_MEANINGS_FOR_TAGGED_TERM, concept_id_list));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject initial_meanings = (cure_api.NIL != document_annotation_widgets.$term_learner_keep_concepts_distinct$.getDynamicValue(thread)) ? Mapping.mapcar((SubLObject)cure_api.$sym46$TERM_LEARNER_OBJECT_FROM_ID, string_utilities.string_tokenize(concept_id_list, (SubLObject)cure_api.$list47, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) : document_annotation_widgets.term_learner_object_from_id(concept_id_list);
        SubLObject result = (SubLObject)cure_api.NIL;
        if (cure_api.NIL != known) {
            SubLObject v_term = (SubLObject)cure_api.NIL;
            SubLObject v_term_$6 = (SubLObject)cure_api.NIL;
            SubLObject string = (SubLObject)cure_api.NIL;
            SubLObject string_$7 = (SubLObject)cure_api.NIL;
            v_term = initial_meanings;
            v_term_$6 = v_term.first();
            string = term_learner_cycl_terms_to_nl_strings(initial_meanings, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            string_$7 = string.first();
            while (cure_api.NIL != string || cure_api.NIL != v_term) {
                result = (SubLObject)ConsesLow.cons(new_term_learner_term_meaning(v_term_$6, string_$7, (SubLObject)cure_api.UNPROVIDED), result);
                v_term = v_term.rest();
                v_term_$6 = v_term.first();
                string = string.rest();
                string_$7 = string.first();
            }
        }
        else {
            final SubLObject _prev_bind_3 = api_control_vars.$the_cyclist$.currentBinding(thread);
            try {
                api_control_vars.$the_cyclist$.bind(user, thread);
                final SubLObject infn_term = initial_meanings.first();
                final SubLObject term_string = cycl_utilities.formula_arg1(infn_term, (SubLObject)cure_api.UNPROVIDED);
                final SubLObject new_constant = find_or_create_term_learner_stub_term(term_string, cure_api.$const48$Individual);
                result = (SubLObject)ConsesLow.cons(new_term_learner_term_meaning(new_constant, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), result);
                cure_remove_from_default_lexicon(infn_term, term_string);
            }
            finally {
                api_control_vars.$the_cyclist$.rebind(_prev_bind_3, thread);
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 6922L)
    public static SubLObject find_or_create_term_learner_stub_term(final SubLObject string, final SubLObject base_type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject term_name = (cure_api.NIL != isa.isaP(base_type, cure_api.$const49$Collection, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) ? morphology.singularize_string(string, (SubLObject)cure_api.UNPROVIDED) : string;
        final SubLObject constant_name = constants_high.suggest_constant_name(term_name, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$kw51$UPCASE, (SubLObject)cure_api.NIL, (SubLObject)cure_api.UNPROVIDED);
        SubLObject constant = constants_high.find_or_create_constant(constant_name, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject clean_string = Sequences.remove_if((SubLObject)cure_api.$sym52$CONTROL_CHAR_P, string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        if (cure_api.NIL == term_learner_stub_constantP(constant)) {
            constant = rkf_term_utilities.rkf_create(term_name, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        }
        rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const53$inProgressTerm, constant), cure_api.$const54$BaseKB, (SubLObject)cure_api.NIL, (SubLObject)cure_api.T);
        rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const55$isa, constant, base_type), cure_api.$const54$BaseKB, (SubLObject)cure_api.NIL, (SubLObject)cure_api.T);
        if (cure_api.NIL != constant_handles.valid_constantP(cure_api.$const56$DocIngesterUserCreatedTerm, (SubLObject)cure_api.UNPROVIDED)) {
            rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.listS(cure_api.$const57$quotedIsa, constant, (SubLObject)cure_api.$list58), cure_api.$const54$BaseKB, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        }
        rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const59$termStrings, constant, clean_string), cure_api.$term_learner_default_lexical_assertion_mt$.getDynamicValue(thread), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
        return constant;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 7773L)
    public static SubLObject term_learner_stub_constantP(final SubLObject v_const) {
        return (SubLObject)SubLObjectFactory.makeBoolean(kb_indexing.num_index(v_const).eql((SubLObject)cure_api.ZERO_INTEGER) || (cure_api.NIL != ask_utilities.query_boolean((SubLObject)ConsesLow.list(cure_api.$const60$and, (SubLObject)ConsesLow.listS(cure_api.$const57$quotedIsa, v_const, (SubLObject)cure_api.$list58), (SubLObject)ConsesLow.list(cure_api.$const53$inProgressTerm, v_const), (SubLObject)ConsesLow.list(cure_api.$const61$ist_Asserted, (SubLObject)cure_api.$sym62$__MT, (SubLObject)ConsesLow.listS(cure_api.$const59$termStrings, v_const, (SubLObject)cure_api.$list63))), cure_api.$const64$InferencePSC, (SubLObject)cure_api.UNPROVIDED) && kb_indexing.num_index(v_const).numLE((SubLObject)cure_api.FOUR_INTEGER)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 8095L)
    public static SubLObject new_term_learner_term_meaning(final SubLObject v_term, SubLObject string, SubLObject max_alt_strings) {
        if (string == cure_api.UNPROVIDED) {
            string = (SubLObject)cure_api.NIL;
        }
        if (max_alt_strings == cure_api.UNPROVIDED) {
            max_alt_strings = (SubLObject)cure_api.THREE_INTEGER;
        }
        final SubLObject primary_string = (cure_api.NIL != string) ? string : term_learner_cycl_term_to_nl_string(v_term, (SubLObject)cure_api.UNPROVIDED).first();
        final SubLObject alt_strings = Sequences.remove(primary_string, term_learner_alternative_phrases(v_term, Numbers.add((SubLObject)cure_api.ONE_INTEGER, max_alt_strings)), (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject alt_strings_string = (cure_api.NIL != list_utilities.lengthG(alt_strings, max_alt_strings, (SubLObject)cure_api.UNPROVIDED)) ? string_utilities.join_strings(list_utilities.snoc((SubLObject)cure_api.$str65$___, list_utilities.first_n(max_alt_strings, alt_strings)), (SubLObject)cure_api.UNPROVIDED) : string_utilities.join_strings(alt_strings, (SubLObject)cure_api.UNPROVIDED);
        return (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw66$MEANING, v_term, primary_string, document_annotation_widgets.term_learner_id(v_term), cb_utilities.top_level_cb_form_url(v_term), alt_strings_string);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 8724L)
    public static SubLObject cure_remove_from_default_lexicon(final SubLObject v_term, final SubLObject delete_string) {
        final SubLObject lex = document_annotation_widgets.get_default_document_ingester_annotation_learning_lexicon((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        SubLObject cdolist_list_var = instances.get_slot(lex, (SubLObject)cure_api.$sym69$LEARNED);
        SubLObject learned = (SubLObject)cure_api.NIL;
        learned = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (delete_string.equal(methods.funcall_instance_method_with_1_args(learned, (SubLObject)cure_api.$sym34$GET, (SubLObject)cure_api.$kw67$STRING)) && methods.funcall_instance_method_with_1_args(learned, (SubLObject)cure_api.$sym34$GET, (SubLObject)cure_api.$kw36$DENOT).equal(v_term)) {
                methods.funcall_instance_method_with_2_args(lex, (SubLObject)cure_api.$sym68$DELETE_ENTRY_FROM_STRING, learned, delete_string);
            }
            cdolist_list_var = cdolist_list_var.rest();
            learned = cdolist_list_var.first();
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 9108L)
    public static SubLObject cure_remove_lex_entry_from_default_lexicon(final SubLObject entry, final SubLObject delete_string) {
        final SubLObject lex = document_annotation_widgets.get_default_document_ingester_annotation_learning_lexicon((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        methods.funcall_instance_method_with_2_args(lex, (SubLObject)cure_api.$sym68$DELETE_ENTRY_FROM_STRING, entry, delete_string);
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 9340L)
    public static SubLObject term_learner_ordered_types_for_tagged_term(final SubLObject concept_id, SubLObject user, SubLObject mt) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (mt == cure_api.UNPROVIDED) {
            mt = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym70$TERM_LEARNER_ORDERED_TYPES_FOR_TAGGED_TERM, concept_id, user, mt));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym70$TERM_LEARNER_ORDERED_TYPES_FOR_TAGGED_TERM, concept_id, user, mt));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        if (cure_api.NIL == mt) {
            mt = followup_query_mt_for_userXtask(user, default_task_for_user(user));
        }
        final SubLObject concept = document_annotation_widgets.term_learner_object_from_id(concept_id);
        final SubLObject type_prompt = term_learner_type_prompt(concept);
        final SubLObject task = default_task_for_user(user);
        final SubLObject nl_mt = cure_default_generation_mt(task);
        SubLObject types = (SubLObject)cure_api.NIL;
        SubLObject type_pred = (SubLObject)cure_api.NIL;
        SubLObject result = (SubLObject)cure_api.NIL;
        SubLObject current;
        final SubLObject datum = current = term_learner_term_header_string(concept, (SubLObject)cure_api.UNPROVIDED);
        SubLObject header_string = (SubLObject)cure_api.NIL;
        SubLObject alt_phrases = (SubLObject)cure_api.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list71);
        header_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list71);
        alt_phrases = current.first();
        current = current.rest();
        if (cure_api.NIL == current) {
            if (cure_api.NIL != term_learner_stub_constantP(concept)) {
                final SubLObject term_string = ask_utilities.query_variable((SubLObject)cure_api.$sym72$_STRING, (SubLObject)ConsesLow.list(cure_api.$const73$assertedSentence, (SubLObject)ConsesLow.listS(cure_api.$const59$termStrings, concept, (SubLObject)cure_api.$list74)), nl_mt, (SubLObject)cure_api.UNPROVIDED).first();
                final SubLObject possible_types = types = term_learner_get_word_denots_from_string(term_string, (SubLObject)cure_api.UNPROVIDED);
                type_pred = cure_api.$const75$is_Underspecified;
            }
            else if (cure_api.NIL != fort_types_interface.isa_collectionP(concept, (SubLObject)cure_api.UNPROVIDED)) {
                types = term_learner_min_genls(concept, mt, (SubLObject)cure_api.UNPROVIDED);
                type_pred = cure_api.$const76$genls;
            }
            else {
                types = term_learner_min_isa(concept, mt, (SubLObject)cure_api.UNPROVIDED);
                type_pred = cure_api.$const55$isa;
            }
            SubLObject cdolist_list_var = types;
            SubLObject type = (SubLObject)cure_api.NIL;
            type = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                final SubLObject assertions = term_learner_asserts_for_formula((SubLObject)ConsesLow.list(type_pred, concept, type), mt);
                final SubLObject assert_sentence = (SubLObject)ConsesLow.list(type_pred, concept, type);
                final SubLObject clarifying_cycl = pph_disambiguation.clarification_terms_wrt(type, types, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.UNPROVIDED).first();
                final SubLObject fragment_justification = (SubLObject)cure_api.NIL;
                thread.resetMultipleValues();
                final SubLObject justifications = make_term_learner_justifications_from_asserts(assertions);
                final SubLObject removable = thread.secondMultipleValue();
                thread.resetMultipleValues();
                result = (SubLObject)ConsesLow.cons(term_learner_type_for_fragment_int(assert_sentence, mt, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, justifications, fragment_justification, nl_mt, (SubLObject)cure_api.NIL, type, (SubLObject)cure_api.NIL, clarifying_cycl, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), result);
                cdolist_list_var = cdolist_list_var.rest();
                type = cdolist_list_var.first();
            }
            result = Sort.sort(result, (SubLObject)cure_api.$sym77$_, (SubLObject)cure_api.$sym78$GET_WEIGHT);
            if (cure_api.NIL != type_prompt) {
                result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list((SubLObject)cure_api.$kw79$TYPE_PROMPT, type_prompt), result);
            }
            if (cure_api.NIL != header_string) {
                result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list((SubLObject)cure_api.$kw80$TYPE_HEADER, header_string), result);
            }
            if (cure_api.NIL != alt_phrases) {
                result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list((SubLObject)cure_api.$kw81$TYPE_ALT_PHRASES, alt_phrases), result);
            }
            final SubLObject lexical_types = term_learner_lexical_types_for_tagged_term(concept, user, nl_mt);
            if (cure_api.NIL != lexical_types) {
                result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list((SubLObject)cure_api.$kw82$LEXICAL_TYPES, lexical_types), result);
            }
            return result;
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list71);
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 11785L)
    public static SubLObject get_taxonomic_renderers_for_term(final SubLObject v_term, final SubLObject renderer_type, final SubLObject taxonomic_type, SubLObject limit, final SubLObject user) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym83$GET_TAXONOMIC_RENDERERS_FOR_TERM, v_term, renderer_type, taxonomic_type, limit, user));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym83$GET_TAXONOMIC_RENDERERS_FOR_TERM, v_term, renderer_type, taxonomic_type, limit, user));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        SubLObject terms = (SubLObject)cure_api.NIL;
        final SubLObject mt = followup_query_mt_for_userXtask(user, default_task_for_user(user));
        SubLObject renderers = (SubLObject)cure_api.NIL;
        if (limit.eql((SubLObject)cure_api.MINUS_ONE_INTEGER)) {
            limit = Numbers.$most_positive_fixnum$.getGlobalValue();
        }
        if (taxonomic_type.equalp((SubLObject)cure_api.$str84$specs)) {
            terms = term_learner_max_specs(v_term, mt, limit);
        }
        else if (taxonomic_type.equalp((SubLObject)cure_api.$str85$instances)) {
            terms = term_learner_max_instances(v_term, mt, limit);
        }
        else if (taxonomic_type.equalp((SubLObject)cure_api.$str86$superiors) && cure_api.NIL != fort_types_interface.collection_p(v_term)) {
            terms = term_learner_min_genls(v_term, mt, limit);
        }
        else if (taxonomic_type.equalp((SubLObject)cure_api.$str86$superiors) && cure_api.NIL == fort_types_interface.collection_p(v_term)) {
            terms = term_learner_min_isa(v_term, mt, limit);
        }
        else if (taxonomic_type.equalp((SubLObject)cure_api.$str87$genls)) {
            terms = term_learner_min_genls(v_term, mt, limit);
        }
        else if (taxonomic_type.equalp((SubLObject)cure_api.$str88$isa)) {
            terms = term_learner_min_isa(v_term, mt, limit);
        }
        else {
            Errors.warn((SubLObject)cure_api.$str89$Unimplemented_attempt_to_get__S_f, taxonomic_type, v_term);
        }
        SubLObject cdolist_list_var = terms;
        SubLObject v_term_$8 = (SubLObject)cure_api.NIL;
        v_term_$8 = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.$str90$string.equal(renderer_type)) {
                renderers = Sequences.cconcatenate(get_term_learner_string_renderer_for_cycl(v_term_$8), renderers);
            }
            else {
                renderers = Sequences.cconcatenate(get_term_learner_renderer_for_cycl(v_term_$8), renderers);
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_term_$8 = cdolist_list_var.first();
        }
        return Sequences.nreverse(renderers);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 13199L)
    public static SubLObject term_learner_min_genls(final SubLObject v_term, final SubLObject mt, SubLObject limit) {
        if (limit == cure_api.UNPROVIDED) {
            limit = Numbers.$most_positive_fixnum$.getGlobalValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            return term_learner_min_genls_int(v_term, limit, (SubLObject)cure_api.UNPROVIDED);
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 13380L)
    public static SubLObject term_learner_min_genls_int(final SubLObject v_term, final SubLObject limit, SubLObject already_seen) {
        if (already_seen == cure_api.UNPROVIDED) {
            already_seen = (SubLObject)cure_api.NIL;
        }
        final SubLObject v_genls = genls.min_genls(v_term, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        SubLObject new_genls = conses_high.set_difference(v_genls, already_seen, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        SubLObject irrelevant = list_utilities.find_all_if_not((SubLObject)cure_api.$sym92$TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION_, new_genls, (SubLObject)cure_api.UNPROVIDED);
        SubLObject relevant = conses_high.set_difference(new_genls, irrelevant, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject redundant = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL != list_utilities.lengthE(new_genls, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL != genls.genlsP(new_genls.first(), v_term, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
        if (cure_api.NIL != redundant) {
            new_genls = genls.min_genls_among(v_term, conses_high.set_difference(genls.asserted_genls(v_term, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.cons(v_term, new_genls), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            irrelevant = list_utilities.find_all_if_not((SubLObject)cure_api.$sym92$TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION_, new_genls, (SubLObject)cure_api.UNPROVIDED);
            final SubLObject items_var = conses_high.set_difference(new_genls, irrelevant, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            if (items_var.isVector()) {
                final SubLObject vector_var = items_var;
                final SubLObject backwardP_var = (SubLObject)cure_api.NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject element_num;
                SubLObject item_var;
                SubLObject item;
                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)cure_api.NIL, v_iteration = (SubLObject)cure_api.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)cure_api.ONE_INTEGER)) {
                    element_num = ((cure_api.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)cure_api.ONE_INTEGER) : v_iteration);
                    item = (item_var = Vectors.aref(vector_var, element_num));
                    if (cure_api.NIL == conses_high.member(item_var, relevant, Symbols.symbol_function((SubLObject)cure_api.EQL), Symbols.symbol_function((SubLObject)cure_api.IDENTITY))) {
                        relevant = (SubLObject)ConsesLow.cons(item_var, relevant);
                    }
                }
            }
            else {
                SubLObject cdolist_list_var = items_var;
                SubLObject item2 = (SubLObject)cure_api.NIL;
                item2 = cdolist_list_var.first();
                while (cure_api.NIL != cdolist_list_var) {
                    final SubLObject item_var2 = item2;
                    if (cure_api.NIL == conses_high.member(item_var2, relevant, Symbols.symbol_function((SubLObject)cure_api.EQL), Symbols.symbol_function((SubLObject)cure_api.IDENTITY))) {
                        relevant = (SubLObject)ConsesLow.cons(item_var2, relevant);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    item2 = cdolist_list_var.first();
                }
            }
        }
        final SubLObject items_var = relevant;
        if (items_var.isVector()) {
            final SubLObject vector_var = items_var;
            final SubLObject backwardP_var = (SubLObject)cure_api.NIL;
            SubLObject length;
            SubLObject v_iteration;
            SubLObject element_num;
            SubLObject item;
            for (length = Sequences.length(vector_var), v_iteration = (SubLObject)cure_api.NIL, v_iteration = (SubLObject)cure_api.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)cure_api.ONE_INTEGER)) {
                element_num = ((cure_api.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)cure_api.ONE_INTEGER) : v_iteration);
                item = Vectors.aref(vector_var, element_num);
                already_seen = (SubLObject)ConsesLow.cons(item, already_seen);
            }
        }
        else {
            SubLObject cdolist_list_var = items_var;
            SubLObject item2 = (SubLObject)cure_api.NIL;
            item2 = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                already_seen = (SubLObject)ConsesLow.cons(item2, already_seen);
                cdolist_list_var = cdolist_list_var.rest();
                item2 = cdolist_list_var.first();
            }
        }
        if (cure_api.NIL == list_utilities.lengthGE(relevant, limit, (SubLObject)cure_api.UNPROVIDED)) {
            SubLObject cdolist_list_var2 = irrelevant;
            SubLObject irrel = (SubLObject)cure_api.NIL;
            irrel = cdolist_list_var2.first();
            while (cure_api.NIL != cdolist_list_var2) {
                if (!cure_api.$const38$Thing.eql(irrel)) {
                    SubLObject cdolist_list_var_$9 = term_learner_min_genls_int(irrel, limit, already_seen);
                    SubLObject genl = (SubLObject)cure_api.NIL;
                    genl = cdolist_list_var_$9.first();
                    while (cure_api.NIL != cdolist_list_var_$9) {
                        if (cure_api.NIL == genls.any_specP(genl, relevant, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                            relevant = (SubLObject)ConsesLow.cons(genl, relevant);
                        }
                        cdolist_list_var_$9 = cdolist_list_var_$9.rest();
                        genl = cdolist_list_var_$9.first();
                    }
                }
                cdolist_list_var2 = cdolist_list_var2.rest();
                irrel = cdolist_list_var2.first();
            }
        }
        return list_utilities.first_n(limit, Sequences.nreverse(relevant));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 14451L)
    public static SubLObject term_learner_min_isa(final SubLObject v_term, final SubLObject mt, SubLObject limit) {
        if (limit == cure_api.UNPROVIDED) {
            limit = Numbers.$most_positive_fixnum$.getGlobalValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject isas = (SubLObject)cure_api.NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            isas = term_learner_min_isa_int(v_term, limit);
            isas = list_utilities.remove_subsumed_items(isas, (SubLObject)cure_api.$sym93$GENLS_, (SubLObject)cure_api.UNPROVIDED);
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return isas;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 14724L)
    public static SubLObject term_learner_min_isa_int(final SubLObject v_term, final SubLObject limit) {
        SubLObject isas = isa.min_isa(v_term, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject irrelevant = list_utilities.find_all_if_not((SubLObject)cure_api.$sym92$TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION_, isas, (SubLObject)cure_api.UNPROVIDED);
        isas = conses_high.set_difference(isas, irrelevant, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        if (cure_api.NIL == list_utilities.lengthGE(isas, limit, (SubLObject)cure_api.UNPROVIDED)) {
            SubLObject cdolist_list_var = Sequences.remove(cure_api.$const38$Thing, irrelevant, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            SubLObject irrel = (SubLObject)cure_api.NIL;
            irrel = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                final SubLObject items_var = term_learner_min_genls_int(irrel, Numbers.$most_positive_fixnum$.getGlobalValue(), (SubLObject)cure_api.UNPROVIDED);
                if (items_var.isVector()) {
                    final SubLObject vector_var = items_var;
                    final SubLObject backwardP_var = (SubLObject)cure_api.NIL;
                    SubLObject length;
                    SubLObject v_iteration;
                    SubLObject element_num;
                    SubLObject item;
                    for (length = Sequences.length(vector_var), v_iteration = (SubLObject)cure_api.NIL, v_iteration = (SubLObject)cure_api.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)cure_api.ONE_INTEGER)) {
                        element_num = ((cure_api.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)cure_api.ONE_INTEGER) : v_iteration);
                        item = Vectors.aref(vector_var, element_num);
                        isas = (SubLObject)ConsesLow.cons(item, isas);
                    }
                }
                else {
                    SubLObject cdolist_list_var_$10 = items_var;
                    SubLObject item2 = (SubLObject)cure_api.NIL;
                    item2 = cdolist_list_var_$10.first();
                    while (cure_api.NIL != cdolist_list_var_$10) {
                        isas = (SubLObject)ConsesLow.cons(item2, isas);
                        cdolist_list_var_$10 = cdolist_list_var_$10.rest();
                        item2 = cdolist_list_var_$10.first();
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                irrel = cdolist_list_var.first();
            }
        }
        isas = list_utilities.remove_subsumed_items(isas, (SubLObject)cure_api.$sym93$GENLS_, (SubLObject)cure_api.UNPROVIDED);
        return list_utilities.first_n(limit, isas);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 15242L)
    public static SubLObject term_learner_max_specs(final SubLObject v_term, final SubLObject mt, SubLObject limit) {
        if (limit == cure_api.UNPROVIDED) {
            limit = Numbers.$most_positive_fixnum$.getGlobalValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (limit.eql((SubLObject)cure_api.MINUS_ONE_INTEGER)) {
            limit = Numbers.$most_positive_fixnum$.getGlobalValue();
        }
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            return term_learner_max_specs_int(v_term, limit, (SubLObject)cure_api.UNPROVIDED);
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 15480L)
    public static SubLObject term_learner_max_specs_int(final SubLObject v_term, final SubLObject limit, SubLObject already_seen) {
        if (already_seen == cure_api.UNPROVIDED) {
            already_seen = (SubLObject)cure_api.NIL;
        }
        final SubLObject specs = genls.max_specs(v_term, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        SubLObject new_specs = conses_high.set_difference(specs, already_seen, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        SubLObject irrelevant = list_utilities.find_all_if_not((SubLObject)cure_api.$sym92$TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION_, new_specs, (SubLObject)cure_api.UNPROVIDED);
        SubLObject relevant = conses_high.set_difference(new_specs, irrelevant, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject redundant = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL != list_utilities.lengthE(new_specs, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL != genls.genlsP(v_term, new_specs.first(), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
        if (cure_api.NIL != redundant) {
            new_specs = genls.max_specs_among(v_term, conses_high.set_difference(genls.asserted_specs(v_term, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.cons(v_term, new_specs), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            irrelevant = list_utilities.find_all_if_not((SubLObject)cure_api.$sym92$TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION_, new_specs, (SubLObject)cure_api.UNPROVIDED);
            final SubLObject items_var = conses_high.set_difference(new_specs, irrelevant, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            if (items_var.isVector()) {
                final SubLObject vector_var = items_var;
                final SubLObject backwardP_var = (SubLObject)cure_api.NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject element_num;
                SubLObject item_var;
                SubLObject item;
                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)cure_api.NIL, v_iteration = (SubLObject)cure_api.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)cure_api.ONE_INTEGER)) {
                    element_num = ((cure_api.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)cure_api.ONE_INTEGER) : v_iteration);
                    item = (item_var = Vectors.aref(vector_var, element_num));
                    if (cure_api.NIL == conses_high.member(item_var, relevant, Symbols.symbol_function((SubLObject)cure_api.EQL), Symbols.symbol_function((SubLObject)cure_api.IDENTITY))) {
                        relevant = (SubLObject)ConsesLow.cons(item_var, relevant);
                    }
                }
            }
            else {
                SubLObject cdolist_list_var = items_var;
                SubLObject item2 = (SubLObject)cure_api.NIL;
                item2 = cdolist_list_var.first();
                while (cure_api.NIL != cdolist_list_var) {
                    final SubLObject item_var2 = item2;
                    if (cure_api.NIL == conses_high.member(item_var2, relevant, Symbols.symbol_function((SubLObject)cure_api.EQL), Symbols.symbol_function((SubLObject)cure_api.IDENTITY))) {
                        relevant = (SubLObject)ConsesLow.cons(item_var2, relevant);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    item2 = cdolist_list_var.first();
                }
            }
        }
        if (cure_api.NIL == list_utilities.lengthGE(relevant, limit, (SubLObject)cure_api.UNPROVIDED)) {
            SubLObject cdolist_list_var2 = irrelevant;
            SubLObject irrel = (SubLObject)cure_api.NIL;
            irrel = cdolist_list_var2.first();
            while (cure_api.NIL != cdolist_list_var2) {
                SubLObject cdolist_list_var_$11 = term_learner_max_specs_int(irrel, limit, already_seen);
                SubLObject spec = (SubLObject)cure_api.NIL;
                spec = cdolist_list_var_$11.first();
                while (cure_api.NIL != cdolist_list_var_$11) {
                    if (cure_api.NIL == genls.any_genlP(spec, relevant, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                        relevant = (SubLObject)ConsesLow.cons(spec, relevant);
                    }
                    cdolist_list_var_$11 = cdolist_list_var_$11.rest();
                    spec = cdolist_list_var_$11.first();
                }
                cdolist_list_var2 = cdolist_list_var2.rest();
                irrel = cdolist_list_var2.first();
            }
        }
        return list_utilities.first_n(limit, Sequences.nreverse(relevant));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 16478L)
    public static SubLObject term_learner_max_instances(final SubLObject v_term, final SubLObject mt, SubLObject limit) {
        if (limit == cure_api.UNPROVIDED) {
            limit = Numbers.$most_positive_fixnum$.getGlobalValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject v_instances = (SubLObject)cure_api.NIL;
        if (limit.eql((SubLObject)cure_api.MINUS_ONE_INTEGER)) {
            limit = Numbers.$most_positive_fixnum$.getGlobalValue();
        }
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            v_instances = term_learner_max_instances_int(v_term, limit);
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return list_utilities.first_n(limit, v_instances);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 16870L)
    public static SubLObject term_learner_max_instances_int(final SubLObject v_term, final SubLObject limit) {
        final SubLObject v_instances = isa.instances(v_term, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject irrelevant = list_utilities.find_all_if_not((SubLObject)cure_api.$sym92$TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION_, v_instances, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject relevant_instances = conses_high.set_difference(v_instances, irrelevant, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        SubLObject max_instances = (SubLObject)cure_api.NIL;
        SubLObject other_instances = (SubLObject)cure_api.NIL;
        if (cure_api.NIL != list_utilities.lengthLE(relevant_instances, limit, (SubLObject)cure_api.UNPROVIDED)) {
            return relevant_instances;
        }
        SubLObject cdolist_list_var = relevant_instances;
        SubLObject instance = (SubLObject)cure_api.NIL;
        instance = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.NIL != subl_promotions.memberP(v_term, isa.min_isa(v_instances, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED)) {
                max_instances = (SubLObject)ConsesLow.cons(instance, max_instances);
            }
            else {
                other_instances = (SubLObject)ConsesLow.cons(instance, other_instances);
            }
            cdolist_list_var = cdolist_list_var.rest();
            instance = cdolist_list_var.first();
        }
        if (cure_api.NIL != list_utilities.lengthGE(max_instances, limit, (SubLObject)cure_api.UNPROVIDED)) {
            return list_utilities.first_n(limit, max_instances);
        }
        final SubLObject num_other_needed = Numbers.subtract(limit, Sequences.length(max_instances));
        return Sequences.cconcatenate(max_instances, list_utilities.first_n(num_other_needed, other_instances));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 17836L)
    public static SubLObject term_learner_asserts_for_formula(final SubLObject formula, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject raw_asserts = kb_indexing.find_all_gafs(formula);
        SubLObject relevant_asserts = (SubLObject)cure_api.NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            SubLObject cdolist_list_var = raw_asserts;
            SubLObject v_assert = (SubLObject)cure_api.NIL;
            v_assert = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                if (cure_api.NIL != mt_relevance_macros.relevant_mtP(assertions_high.assertion_mt(v_assert))) {
                    relevant_asserts = (SubLObject)ConsesLow.cons(v_assert, relevant_asserts);
                }
                cdolist_list_var = cdolist_list_var.rest();
                v_assert = cdolist_list_var.first();
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return relevant_asserts;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 18158L)
    public static SubLObject make_term_learner_justifications_from_asserts(final SubLObject asserts) {
        SubLObject justifications = (SubLObject)cure_api.NIL;
        SubLObject removable = (SubLObject)cure_api.T;
        SubLObject cdolist_list_var = asserts;
        SubLObject v_assert = (SubLObject)cure_api.NIL;
        v_assert = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            final SubLObject just = (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw94$ASSERT_SENTENCE, document_annotation_widgets.term_learner_id(uncanonicalizer.assertion_el_formula(v_assert)), (SubLObject)cure_api.$kw95$ASSERT_MT, document_annotation_widgets.term_learner_id(assertions_high.assertion_mt(v_assert)));
            if (cure_api.NIL == assertions_high.asserted_assertionP(v_assert) || cure_api.NIL != tms.independently_deducible_assertionP(v_assert)) {
                removable = (SubLObject)cure_api.NIL;
            }
            justifications = (SubLObject)ConsesLow.cons(just, justifications);
            cdolist_list_var = cdolist_list_var.rest();
            v_assert = cdolist_list_var.first();
        }
        return Values.values(justifications, removable);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 18670L)
    public static SubLObject term_learner_lexical_types_for_tagged_term(final SubLObject v_term, SubLObject user, SubLObject lexical_mt) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (lexical_mt == cure_api.UNPROVIDED) {
            lexical_mt = cure_api.$term_learner_default_lexical_assertion_mt$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject lexical_types = (SubLObject)cure_api.NIL;
        SubLObject sentence = (SubLObject)cure_api.NIL;
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(term_learner_lexical_assertions_for_term(v_term, lexical_mt))); cure_api.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            final SubLObject string = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            final SubLObject assert_list = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (cure_api.NIL != list_utilities.lengthG(assert_list, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.UNPROVIDED)) {
                sentence = assertions_high.assertion_ist_formula(assert_list.first());
            }
            else {
                sentence = simplifier.conjoin(Mapping.mapcar((SubLObject)cure_api.$sym96$ASSERTION_IST_FORMULA, assert_list), (SubLObject)cure_api.UNPROVIDED);
            }
            final SubLObject justifications = (SubLObject)ConsesLow.list(new_term_learner_justification(string, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$kw97$USER, (SubLObject)cure_api.NIL, document_annotation_widgets.term_learner_id(lexical_mt)));
            final SubLObject fragment_justification = (SubLObject)cure_api.NIL;
            final SubLObject default_weight = (SubLObject)cure_api.$float98$0_9;
            final SubLObject status = term_learner_fact_status_int(sentence, lexical_mt, user).first();
            final SubLObject renderers = (SubLObject)ConsesLow.list(new_term_learner_string_renderer(string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
            lexical_types = (SubLObject)ConsesLow.cons(new_term_learner_type_int(sentence, default_weight, justifications, fragment_justification, string, sentence, status, renderers, (SubLObject)cure_api.NIL, (SubLObject)cure_api.T, (SubLObject)cure_api.T, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL), lexical_types);
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        return lexical_types;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 19781L)
    public static SubLObject term_learner_lexical_assertions_for_term(final SubLObject v_term, final SubLObject lexical_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject filtered_assertions = dictionary.new_dictionary((SubLObject)cure_api.EQUALP, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject _prev_bind_0 = lexicon_vars.$exclude_vulgaritiesP$.currentBinding(thread);
        final SubLObject _prev_bind_2 = lexicon_vars.$exclude_slangP$.currentBinding(thread);
        final SubLObject _prev_bind_3 = lexicon_vars.$exclude_archaic_speechP$.currentBinding(thread);
        final SubLObject _prev_bind_4 = lexicon_vars.$exclude_indirect_relationsP$.currentBinding(thread);
        try {
            lexicon_vars.$exclude_vulgaritiesP$.bind(subl_promotions.memberP((SubLObject)cure_api.$sym99$_EXCLUDE_VULGARITIES__, (SubLObject)cure_api.$list100, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), thread);
            lexicon_vars.$exclude_slangP$.bind(subl_promotions.memberP((SubLObject)cure_api.$sym101$_EXCLUDE_SLANG__, (SubLObject)cure_api.$list100, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), thread);
            lexicon_vars.$exclude_archaic_speechP$.bind(subl_promotions.memberP((SubLObject)cure_api.$sym102$_EXCLUDE_ARCHAIC_SPEECH__, (SubLObject)cure_api.$list100, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), thread);
            lexicon_vars.$exclude_indirect_relationsP$.bind(subl_promotions.memberP((SubLObject)cure_api.$sym103$_EXCLUDE_INDIRECT_RELATIONS__, (SubLObject)cure_api.$list100, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), thread);
            SubLObject cdolist_list_var = lexicon_utilities.all_lexifications_for_term(v_term);
            SubLObject assertion = (SubLObject)cure_api.NIL;
            assertion = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                if (cure_api.NIL != lexicon_utilities.denot_formula_p(uncanonicalizer.assertion_el_formula(assertion)) && cure_api.NIL != lexicon_accessors.genl_lexicon_mtP(lexical_mt, assertions_high.assertion_mt(assertion)) && cure_api.NIL == lexicon_accessors.inappropriate_lexical_assertionP(assertion)) {
                    final SubLObject phrases = lexification_utilities.phrases_from_semantic_assertion(assertion, (SubLObject)cure_api.UNPROVIDED);
                    if (cure_api.NIL != phrases && !phrases.equal((SubLObject)ConsesLow.list((SubLObject)cure_api.NIL))) {
                        dictionary_utilities.dictionary_push(filtered_assertions, string_utilities.join_strings(Sort.sort(phrases, (SubLObject)cure_api.$sym104$SHORTER_P, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED), assertion);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                assertion = cdolist_list_var.first();
            }
        }
        finally {
            lexicon_vars.$exclude_indirect_relationsP$.rebind(_prev_bind_4, thread);
            lexicon_vars.$exclude_archaic_speechP$.rebind(_prev_bind_3, thread);
            lexicon_vars.$exclude_slangP$.rebind(_prev_bind_2, thread);
            lexicon_vars.$exclude_vulgaritiesP$.rebind(_prev_bind_0, thread);
        }
        return filtered_assertions;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 20786L)
    public static SubLObject term_learner_ordered_types_for_term_in_document_string_merged_justifications(final SubLObject doc_string, final SubLObject v_term, final SubLObject placeholderP, SubLObject lookup_onlyP) {
        if (lookup_onlyP == cure_api.UNPROVIDED) {
            lookup_onlyP = cure_api.$term_learner_use_lexical_lookup_only$.getGlobalValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym105$TERM_LEARNER_ORDERED_TYPES_FOR_TERM_IN_DOCUMENT_STRING_MERGED_JUS, doc_string, v_term, placeholderP));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym105$TERM_LEARNER_ORDERED_TYPES_FOR_TERM_IN_DOCUMENT_STRING_MERGED_JUS, doc_string, v_term, placeholderP));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject ascii_doc_string = string_utilities.string_substitute((SubLObject)cure_api.$str106$_, (SubLObject)cure_api.$str107$_, unicode_strings.display_to_subl_string(doc_string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED);
        final SubLObject ascii_term_string = string_utilities.string_substitute((SubLObject)cure_api.$str106$_, (SubLObject)cure_api.$str107$_, unicode_strings.display_to_subl_string(v_term, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED);
        SubLObject result = (SubLObject)cure_api.NIL;
        final SubLObject _prev_bind_3 = psp_chart.$psp_use_term_lexiconP$.currentBinding(thread);
        try {
            psp_chart.$psp_use_term_lexiconP$.bind((SubLObject)cure_api.NIL, thread);
            result = term_learner_ordered_types_for_term_in_document_string(ascii_doc_string, ascii_term_string, placeholderP, lookup_onlyP, (SubLObject)cure_api.UNPROVIDED);
        }
        finally {
            psp_chart.$psp_use_term_lexiconP$.rebind(_prev_bind_3, thread);
        }
        return merge_justifications_for_ordered_types(result);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 21962L)
    public static SubLObject term_learner_ordered_types_for_user_added_type(final SubLObject term_string, final SubLObject existing_term_id, final SubLObject app_type, SubLObject user, SubLObject task) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (task == cure_api.UNPROVIDED) {
            task = cure_api.$current_tl_task$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym108$TERM_LEARNER_ORDERED_TYPES_FOR_USER_ADDED_TYPE, term_string, existing_term_id, app_type, user, task));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym108$TERM_LEARNER_ORDERED_TYPES_FOR_USER_ADDED_TYPE, term_string, existing_term_id, app_type, user, task));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        if (cure_api.NIL == task) {
            task = default_task_for_user(user);
        }
        SubLObject lex_entries = (SubLObject)cure_api.NIL;
        final SubLObject _prev_bind_0 = psp_chart.$psp_use_term_lexiconP$.currentBinding(thread);
        try {
            psp_chart.$psp_use_term_lexiconP$.bind((SubLObject)cure_api.NIL, thread);
            lex_entries = methods.funcall_instance_method_with_1_args(document_annotation_widgets.get_default_document_annotation_lexicon((SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.$sym34$GET, term_string);
        }
        finally {
            psp_chart.$psp_use_term_lexiconP$.rebind(_prev_bind_0, thread);
        }
        final SubLObject existing_term = document_annotation_widgets.term_learner_object_from_id(existing_term_id);
        final SubLObject cycls = term_lexicon.denots_for_term_lexicon_entries(lex_entries);
        final SubLObject query_mt = query_mt_for_user_and_task(user, task);
        final SubLObject followup_mt = followup_query_mt_for_userXtask(user, task);
        SubLObject answers = (SubLObject)cure_api.NIL;
        SubLObject ignore_errors_tag = (SubLObject)cure_api.NIL;
        try {
            thread.throwStack.push(cure_api.$kw40$IGNORE_ERRORS_TARGET);
            final SubLObject _prev_bind_3 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cure_api.$sym41$IGNORE_ERRORS_HANDLER), thread);
                try {
                    SubLObject stream2 = (SubLObject)cure_api.NIL;
                    try {
                        final SubLObject _prev_bind_0_$12 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                            stream2 = compatibility.open_text(cure_api.$term_learner_user_added_types_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                        }
                        finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$12, thread);
                        }
                        if (!stream2.isStream()) {
                            Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, cure_api.$term_learner_user_added_types_log_file$.getDynamicValue(thread));
                        }
                        final SubLObject s = stream2;
                        PrintLow.format(s, (SubLObject)cure_api.$str109$_input_cyctermid___A__date___A___, new SubLObject[] { kb_utilities.compact_hl_external_id_string(existing_term), numeric_date_utilities.timestamp((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), term_string });
                    }
                    finally {
                        final SubLObject _prev_bind_0_$13 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (stream2.isStream()) {
                                streams_high.close(stream2, (SubLObject)cure_api.UNPROVIDED);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$13, thread);
                        }
                    }
                }
                catch (Throwable catch_var) {
                    Errors.handleThrowable(catch_var, (SubLObject)cure_api.NIL);
                }
            }
            finally {
                Errors.$error_handler$.rebind(_prev_bind_3, thread);
            }
        }
        catch (Throwable ccatch_env_var) {
            ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, (SubLObject)cure_api.$kw40$IGNORE_ERRORS_TARGET);
        }
        finally {
            thread.throwStack.pop();
        }
        SubLObject cdolist_list_var = cycls;
        SubLObject cycl = (SubLObject)cure_api.NIL;
        cycl = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            final SubLObject isa_genls = term_learner_isa_or_genls(existing_term, cycl, app_type, followup_mt);
            final SubLObject cycl_sentence = (SubLObject)ConsesLow.list(isa_genls, existing_term, cycl);
            final SubLObject clarifying_term = pph_disambiguation.clarification_terms_wrt(cycl, cycls, (SubLObject)cure_api.ONE_INTEGER, query_mt).first();
            final SubLObject justifications = (SubLObject)ConsesLow.list(new_term_learner_justification(term_string, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$kw97$USER, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
            answers = (SubLObject)ConsesLow.cons(term_learner_type_for_fragment_int(cycl_sentence, query_mt, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, justifications, (SubLObject)cure_api.NIL, cure_default_generation_mt((SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.NIL, cycl, (SubLObject)cure_api.NIL, clarifying_term, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), answers);
            cdolist_list_var = cdolist_list_var.rest();
            cycl = cdolist_list_var.first();
        }
        return answers;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 24117L)
    public static SubLObject term_learner_isa_or_genls(final SubLObject existing_term, final SubLObject new_possible_type, SubLObject app_type, SubLObject mt) {
        if (app_type == cure_api.UNPROVIDED) {
            app_type = (SubLObject)cure_api.NIL;
        }
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject pred = (SubLObject)cure_api.NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            if (cure_api.NIL != isa.isaP(new_possible_type, cure_api.$const110$CollectionType, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL != isa.isaP(existing_term, cure_api.$const49$Collection, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                pred = cure_api.$const55$isa;
            }
            else if (cure_api.NIL != isa.isaP(existing_term, cure_api.$const49$Collection, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                pred = cure_api.$const76$genls;
            }
            else if (cure_api.NIL != isa.isaP(existing_term, cure_api.$const48$Individual, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                pred = cure_api.$const55$isa;
            }
            else if (cure_api.NIL != default_create_as_type(new_possible_type, mt)) {
                pred = default_create_as_type(new_possible_type, (SubLObject)cure_api.UNPROVIDED);
            }
            else if (app_type.equalp((SubLObject)cure_api.$str44$vocabMarking)) {
                pred = cure_api.$const76$genls;
            }
            else {
                pred = cure_api.$const55$isa;
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return pred;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 25243L)
    public static SubLObject clear_default_create_as_type() {
        final SubLObject cs = cure_api.$default_create_as_type_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 25243L)
    public static SubLObject remove_default_create_as_type(final SubLObject type, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$default_create_as_type_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(type, mt), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 25243L)
    public static SubLObject default_create_as_type_internal(final SubLObject type, final SubLObject mt) {
        return ask_utilities.query_variable((SubLObject)cure_api.$sym112$_PRED, (SubLObject)ConsesLow.listS(cure_api.$const113$defaultAutotypeSuggestionFromType, type, (SubLObject)cure_api.$list114), mt, (SubLObject)cure_api.$list115).first();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 25243L)
    public static SubLObject default_create_as_type(final SubLObject type, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        SubLObject caching_state = cure_api.$default_create_as_type_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym111$DEFAULT_CREATE_AS_TYPE, (SubLObject)cure_api.$sym116$_DEFAULT_CREATE_AS_TYPE_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(type, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (type.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(default_create_as_type_internal(type, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(type, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 25546L)
    public static SubLObject new_term_learner_type_int(final SubLObject cycl, final SubLObject weight, final SubLObject justifications, final SubLObject fragment_justification, final SubLObject nl_string, final SubLObject assert_sentence, final SubLObject status_code, SubLObject renderers, SubLObject original_cycl, SubLObject display, SubLObject required, SubLObject approval_code, SubLObject unassertible_sentence_ids) {
        if (renderers == cure_api.UNPROVIDED) {
            renderers = (SubLObject)cure_api.NIL;
        }
        if (original_cycl == cure_api.UNPROVIDED) {
            original_cycl = (SubLObject)cure_api.NIL;
        }
        if (display == cure_api.UNPROVIDED) {
            display = (SubLObject)cure_api.T;
        }
        if (required == cure_api.UNPROVIDED) {
            required = (SubLObject)cure_api.T;
        }
        if (approval_code == cure_api.UNPROVIDED) {
            approval_code = (SubLObject)cure_api.NIL;
        }
        if (unassertible_sentence_ids == cure_api.UNPROVIDED) {
            unassertible_sentence_ids = (SubLObject)cure_api.$str50$;
        }
        if (cure_api.NIL == unassertible_sentence_ids) {
            unassertible_sentence_ids = (SubLObject)cure_api.$str50$;
        }
        final SubLObject concept_id = document_annotation_widgets.term_learner_id(cycl);
        final SubLObject legend_string = get_legend_string_from_justifications(justifications);
        SubLObject term_learner_type = (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$kw117$CYCL, cycl, cure_api.$kw118$WEIGHT, weight, cure_api.$kw19$JUSTIFICATIONS, justifications, cure_api.$kw21$FRAGMENT_JUSTIFICATION, fragment_justification, cure_api.$kw119$CONCEPT_ID, concept_id, cure_api.$kw120$NL_STRING, unicode_nauts.convert_unicode_nauts_to_utf8_strings(nl_string), cure_api.$kw121$LEGEND_STRING, legend_string, cure_api.$kw94$ASSERT_SENTENCE, assert_sentence, cure_api.$kw122$ASSERT_SENTENCE_ID, kb_utilities.compact_hl_external_id_string(assert_sentence), cure_api.$kw123$STATUS_CODE, status_code, cure_api.$kw10$REQUIRED, required, cure_api.$kw9$DISPLAY, display, cure_api.$kw12$UNASSERTIBLE_SENTENCE_IDS, unassertible_sentence_ids });
        if (cure_api.NIL != approval_code) {
            term_learner_type = conses_high.putf(term_learner_type, (SubLObject)cure_api.$kw11$APPROVAL_CODE, approval_code);
        }
        if (cure_api.NIL != renderers) {
            term_learner_type = conses_high.putf(term_learner_type, (SubLObject)cure_api.$kw7$RENDERERS, renderers);
        }
        if (cure_api.NIL != legend_string) {
            term_learner_type = conses_high.putf(term_learner_type, (SubLObject)cure_api.$kw121$LEGEND_STRING, legend_string);
        }
        if (cure_api.NIL != original_cycl) {
            term_learner_type = conses_high.putf(term_learner_type, (SubLObject)cure_api.$kw124$REPLICATION_SENTENCE_ID, document_annotation_widgets.term_learner_id(free_some_variables(assert_sentence)));
        }
        return term_learner_type;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 27649L)
    public static SubLObject free_some_variables(SubLObject sentence) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL == cure_api.$allow_changes_to_focal_term_on_replicate$.getDynamicValue(thread)) {
            return sentence;
        }
        SubLObject cdolist_list_var = cycl_utilities.formula_args(sentence, (SubLObject)cure_api.UNPROVIDED);
        SubLObject arg = (SubLObject)cure_api.NIL;
        arg = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.NIL == cycl_grammar.cycl_variable_p(arg) && cure_api.NIL == fort_types_interface.predicate_p(arg)) {
                sentence = cycl_utilities.expression_subst(czer_utilities.unique_el_var_wrt_expression(sentence, (SubLObject)cure_api.UNPROVIDED), arg, sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            }
            cdolist_list_var = cdolist_list_var.rest();
            arg = cdolist_list_var.first();
        }
        return sentence;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 27986L)
    public static SubLObject get_term_learner_renderer_for_cycl_string(final SubLObject term_string) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym125$GET_TERM_LEARNER_RENDERER_FOR_CYCL_STRING, term_string));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym125$GET_TERM_LEARNER_RENDERER_FOR_CYCL_STRING, term_string));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject v_term = Eval.eval(reader.read_from_string(web_utilities.html_url_decode(term_string), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
        return get_term_learner_renderer_for_cycl(v_term);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 28315L)
    public static SubLObject get_term_learner_renderer_for_cycl_id(final SubLObject term_id) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym126$GET_TERM_LEARNER_RENDERER_FOR_CYCL_ID, term_id));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym126$GET_TERM_LEARNER_RENDERER_FOR_CYCL_ID, term_id));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject v_term = document_annotation_widgets.term_learner_object_from_id(term_id);
        return get_term_learner_renderer_for_cycl(v_term);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 28565L)
    public static SubLObject get_term_learner_renderer_for_cycl(final SubLObject v_term) {
        final SubLObject nl = pph_main.generate_phrase(v_term, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject constraints = (SubLObject)((cure_api.NIL != fort_types_interface.collectionP(v_term)) ? cure_api.$list128 : cure_api.$list129);
        return (SubLObject)ConsesLow.list(new_term_learner_open_select_renderer((SubLObject)cure_api.NIL, (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(nl, v_term, (SubLObject)cure_api.T)), v_term, constraints, (SubLObject)cure_api.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 28873L)
    public static SubLObject get_term_learner_string_renderer_for_cycl_string(final SubLObject v_cycl_string) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym130$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL_STRING, v_cycl_string));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym130$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL_STRING, v_cycl_string));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject v_term = Eval.eval(reader.read_from_string(web_utilities.html_url_decode(v_cycl_string), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
        return get_term_learner_string_renderer_for_cycl(v_term);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 29180L)
    public static SubLObject get_term_learner_string_renderer_for_cycl_id(final SubLObject term_id) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym131$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL_ID, term_id));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym131$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL_ID, term_id));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject v_term = document_annotation_widgets.term_learner_object_from_id(term_id);
        return get_term_learner_string_renderer_for_cycl(v_term);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 29451L)
    public static SubLObject get_term_learner_string_renderer_for_cycl(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym132$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL, v_term));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym132$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL, v_term));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject nl = pph_main.generate_phrase(v_term, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject constraints = (SubLObject)((cure_api.NIL != fort_types_interface.collectionP(v_term)) ? cure_api.$list128 : cure_api.$list129);
        return (SubLObject)ConsesLow.list(new_term_learner_string_renderer(nl, v_term, (SubLObject)cure_api.$kw20$DEFAULT, constraints));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 29821L)
    public static SubLObject get_term_learner_string_renderer_from_open_select_renderer_list(final SubLObject renderers) {
        SubLObject cdolist_list_var = renderers;
        SubLObject renderer = (SubLObject)cure_api.NIL;
        renderer = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (conses_high.getf(renderer, (SubLObject)cure_api.$kw134$RENDERER_TYPE, (SubLObject)cure_api.UNPROVIDED) == cure_api.$kw135$OPEN_SELECT_RENDERER) {
                SubLObject v_term = (SubLObject)cure_api.NIL;
                if (cure_api.NIL == v_term) {
                    SubLObject csome_list_var = conses_high.getf(renderer, (SubLObject)cure_api.$kw137$SELECTION_RENDERERS, (SubLObject)cure_api.UNPROVIDED);
                    SubLObject selection_renderer = (SubLObject)cure_api.NIL;
                    selection_renderer = csome_list_var.first();
                    while (cure_api.NIL == v_term && cure_api.NIL != csome_list_var) {
                        if (cure_api.NIL != conses_high.getf(selection_renderer, (SubLObject)cure_api.$kw136$INITIALLY_SELECTED, (SubLObject)cure_api.UNPROVIDED)) {
                            v_term = conses_high.getf(selection_renderer, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED);
                        }
                        csome_list_var = csome_list_var.rest();
                        selection_renderer = csome_list_var.first();
                    }
                }
                if (cure_api.NIL != v_term) {
                    return get_term_learner_string_renderer_for_cycl(v_term);
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            renderer = cdolist_list_var.first();
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 30290L)
    public static SubLObject new_term_learner_string_renderer(final SubLObject string, SubLObject cycl, SubLObject display_linkP, SubLObject arg_constraints) {
        if (cycl == cure_api.UNPROVIDED) {
            cycl = (SubLObject)cure_api.NIL;
        }
        if (display_linkP == cure_api.UNPROVIDED) {
            display_linkP = (SubLObject)cure_api.$kw20$DEFAULT;
        }
        if (arg_constraints == cure_api.UNPROVIDED) {
            arg_constraints = (SubLObject)cure_api.NIL;
        }
        SubLObject result = (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw134$RENDERER_TYPE, (SubLObject)cure_api.$kw138$STRING_RENDERER, (SubLObject)cure_api.$kw67$STRING, unicode_nauts.convert_unicode_nauts_to_utf8_strings(string));
        if (display_linkP == cure_api.$kw20$DEFAULT) {
            display_linkP = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL != forts.fort_p(cycl) && cure_api.NIL == kb_accessors.relation_in_any_mtP(cycl));
        }
        if (cure_api.NIL != display_linkP) {
            result = conses_high.putf(result, (SubLObject)cure_api.$kw139$DISPLAY_LINK, (SubLObject)cure_api.T);
        }
        if (cure_api.NIL != cycl && !cycl.equal((SubLObject)cure_api.$kw140$PPH_EMPTY_CYCL)) {
            result = conses_high.putf(result, (SubLObject)cure_api.$kw119$CONCEPT_ID, document_annotation_widgets.term_learner_id(cycl));
            result = conses_high.putf(result, (SubLObject)cure_api.$kw117$CYCL, cycl);
        }
        if (cure_api.NIL != conses_high.getf(arg_constraints, (SubLObject)cure_api.$kw141$GENLS, (SubLObject)cure_api.UNPROVIDED)) {
            result = conses_high.putf(result, (SubLObject)cure_api.$kw142$GENLS_CONSTRAINTS, cyc_terms_to_term_learner_terms(conses_high.getf(arg_constraints, (SubLObject)cure_api.$kw141$GENLS, (SubLObject)cure_api.UNPROVIDED)));
        }
        if (cure_api.NIL != conses_high.getf(arg_constraints, (SubLObject)cure_api.$kw143$ISA, (SubLObject)cure_api.UNPROVIDED)) {
            result = conses_high.putf(result, (SubLObject)cure_api.$kw144$ISA_CONSTRAINTS, cyc_terms_to_term_learner_terms(conses_high.getf(arg_constraints, (SubLObject)cure_api.$kw143$ISA, (SubLObject)cure_api.UNPROVIDED)));
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 31220L)
    public static SubLObject new_term_learner_modifiable_string_renderer(final SubLObject string, final SubLObject arg_pos) {
        return (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw134$RENDERER_TYPE, (SubLObject)cure_api.$kw145$MODIFIABLE_STRING_RENDERER, (SubLObject)cure_api.$kw67$STRING, string, (SubLObject)cure_api.$kw146$ARG_POS, arg_pos);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 31534L)
    public static SubLObject new_term_learner_modifiable_text_renderer(final SubLObject string, final SubLObject arg_pos) {
        return (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw134$RENDERER_TYPE, (SubLObject)cure_api.$kw147$MODIFIABLE_TEXT_RENDERER, (SubLObject)cure_api.$kw67$STRING, string, (SubLObject)cure_api.$kw146$ARG_POS, arg_pos);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 31809L)
    public static SubLObject new_term_learner_open_select_renderer(final SubLObject arg_pos, final SubLObject nl_cycl_valid_triples, SubLObject selected_cycl, SubLObject arg_constraints, SubLObject allow_duplicationP) {
        if (selected_cycl == cure_api.UNPROVIDED) {
            selected_cycl = (SubLObject)cure_api.NIL;
        }
        if (arg_constraints == cure_api.UNPROVIDED) {
            arg_constraints = (SubLObject)cure_api.NIL;
        }
        if (allow_duplicationP == cure_api.UNPROVIDED) {
            allow_duplicationP = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ret_value = (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw134$RENDERER_TYPE, (SubLObject)cure_api.$kw135$OPEN_SELECT_RENDERER);
        final SubLObject constraint_nl = arg_constraint_string(arg_constraints);
        if (cure_api.NIL != arg_pos) {
            ret_value = conses_high.putf(ret_value, (SubLObject)cure_api.$kw146$ARG_POS, arg_pos);
        }
        thread.resetMultipleValues();
        SubLObject renderers = new_term_learner_open_select_renderer_int(nl_cycl_valid_triples, selected_cycl);
        final SubLObject new_entry_box_added = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (cure_api.NIL == new_entry_box_added) {
            if (cure_api.NIL != renderers) {
                final SubLObject new_cons = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.listS((SubLObject)cure_api.$kw67$STRING, (SubLObject)((cure_api.NIL != constraint_nl) ? Sequences.cconcatenate((SubLObject)cure_api.$str148$Some_other_, constraint_nl) : cure_api.$str149$Something_else), (SubLObject)cure_api.$list150), (SubLObject)cure_api.NIL);
                final SubLObject list = renderers;
                if (cure_api.NIL != list) {
                    subl_macros.rplacd_last(list, new_cons);
                }
                else {
                    renderers = new_cons;
                }
            }
            else {
                final SubLObject new_cons = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.listS((SubLObject)cure_api.$kw67$STRING, (SubLObject)((cure_api.NIL != constraint_nl) ? constraint_nl : cure_api.$str50$), (SubLObject)cure_api.$list150), (SubLObject)cure_api.NIL);
                final SubLObject list = renderers;
                if (cure_api.NIL != list) {
                    subl_macros.rplacd_last(list, new_cons);
                }
                else {
                    renderers = new_cons;
                }
            }
        }
        ret_value = conses_high.putf(ret_value, (SubLObject)cure_api.$kw137$SELECTION_RENDERERS, renderers);
        if (cure_api.NIL != conses_high.getf(arg_constraints, (SubLObject)cure_api.$kw141$GENLS, (SubLObject)cure_api.UNPROVIDED)) {
            ret_value = conses_high.putf(ret_value, (SubLObject)cure_api.$kw142$GENLS_CONSTRAINTS, cyc_terms_to_term_learner_terms(conses_high.getf(arg_constraints, (SubLObject)cure_api.$kw141$GENLS, (SubLObject)cure_api.UNPROVIDED)));
        }
        if (cure_api.NIL != conses_high.getf(arg_constraints, (SubLObject)cure_api.$kw143$ISA, (SubLObject)cure_api.UNPROVIDED)) {
            ret_value = conses_high.putf(ret_value, (SubLObject)cure_api.$kw144$ISA_CONSTRAINTS, cyc_terms_to_term_learner_terms(conses_high.getf(arg_constraints, (SubLObject)cure_api.$kw143$ISA, (SubLObject)cure_api.UNPROVIDED)));
        }
        if (cure_api.NIL != constraint_nl) {
            ret_value = conses_high.putf(ret_value, (SubLObject)cure_api.$kw151$CONSTRAINT_STRING, constraint_nl);
        }
        if (cure_api.NIL != allow_duplicationP) {
            ret_value = conses_high.putf(ret_value, (SubLObject)cure_api.$kw152$ALLOW_DUPLICATION, (SubLObject)cure_api.T);
        }
        return ret_value;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 34828L)
    public static SubLObject arg_constraint_string(final SubLObject arg_constraints) {
        final SubLObject genls_constraints = conses_high.getf(arg_constraints, (SubLObject)cure_api.$kw141$GENLS, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject isa_constraints = conses_high.getf(arg_constraints, (SubLObject)cure_api.$kw143$ISA, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject sorted_constraints = Sort.sort(Sequences.cconcatenate(isa_constraints, genls_constraints), (SubLObject)cure_api.$sym153$_, (SubLObject)cure_api.$sym154$GENERALITY_ESTIMATE);
        SubLObject min_constraint = (SubLObject)cure_api.NIL;
        min_constraint = list_utilities.first_n_if((SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.$sym155$THCL_FORT_, sorted_constraints, (SubLObject)cure_api.UNPROVIDED).first();
        if (cure_api.NIL == min_constraint) {
            min_constraint = sorted_constraints.first();
        }
        if (cure_api.NIL != min_constraint) {
            return pph_main.generate_phrase(min_constraint, (SubLObject)cure_api.$list156, (SubLObject)cure_api.NIL, cure_default_generation_mt((SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 35651L)
    public static SubLObject new_term_learner_open_select_renderer_int(final SubLObject triple_list, SubLObject selected_cycl) {
        if (selected_cycl == cure_api.UNPROVIDED) {
            selected_cycl = (SubLObject)cure_api.NIL;
        }
        SubLObject renderers = (SubLObject)cure_api.NIL;
        SubLObject new_entry_box_added = (SubLObject)cure_api.NIL;
        SubLObject initial_selection_done = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = triple_list;
        SubLObject list_elt = (SubLObject)cure_api.NIL;
        list_elt = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (list_elt.first() == cure_api.$kw157$TEXT_MATCHES) {
                renderers = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list((SubLObject)cure_api.$kw157$TEXT_MATCHES, conses_high.second(list_elt), new_term_learner_open_select_renderer_int(conses_high.third(list_elt), (SubLObject)cure_api.UNPROVIDED)), renderers);
            }
            else {
                SubLObject current;
                final SubLObject datum = current = list_elt;
                SubLObject nl = (SubLObject)cure_api.NIL;
                SubLObject cycl = (SubLObject)cure_api.NIL;
                SubLObject valid = (SubLObject)cure_api.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list158);
                nl = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list158);
                cycl = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list158);
                valid = current.first();
                current = current.rest();
                if (cure_api.NIL == current) {
                    SubLObject renderer = (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw67$STRING, unicode_nauts.convert_unicode_nauts_to_utf8_strings(nl), (SubLObject)cure_api.$kw159$VALID, valid);
                    if (cure_api.NIL == cycl) {
                        renderer = conses_high.putf(renderer, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.$str160$newValue);
                        renderer = conses_high.putf(renderer, (SubLObject)cure_api.$kw161$CYCL_ID, (SubLObject)cure_api.$str160$newValue);
                        new_entry_box_added = (SubLObject)cure_api.T;
                    }
                    else if (cure_api.NIL != cycl) {
                        renderer = conses_high.putf(renderer, (SubLObject)cure_api.$kw161$CYCL_ID, document_annotation_widgets.term_learner_id(cycl));
                        renderer = conses_high.putf(renderer, (SubLObject)cure_api.$kw117$CYCL, cycl);
                    }
                    if (cure_api.NIL == initial_selection_done && cycl.eql(selected_cycl)) {
                        renderer = conses_high.putf(renderer, (SubLObject)cure_api.$kw136$INITIALLY_SELECTED, (SubLObject)cure_api.T);
                        initial_selection_done = (SubLObject)cure_api.T;
                    }
                    renderers = (SubLObject)ConsesLow.cons(renderer, renderers);
                }
                else {
                    cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list158);
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            list_elt = cdolist_list_var.first();
        }
        return Values.values(Sequences.nreverse(renderers), new_entry_box_added);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 37003L)
    public static SubLObject get_legend_string_from_justifications(final SubLObject justifications) {
        SubLObject legend_string = (SubLObject)cure_api.NIL;
        if (cure_api.NIL == legend_string) {
            SubLObject csome_list_var;
            SubLObject justification;
            for (csome_list_var = justifications, justification = (SubLObject)cure_api.NIL, justification = csome_list_var.first(); cure_api.NIL == legend_string && cure_api.NIL != csome_list_var; legend_string = term_learner_justification_string(justification), csome_list_var = csome_list_var.rest(), justification = csome_list_var.first()) {}
        }
        return legend_string;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 37281L)
    public static SubLObject new_term_learner_single_justification_type(final SubLObject cycl, final SubLObject weight, final SubLObject justification, final SubLObject nl_string, final SubLObject assert_sentence, final SubLObject status_code, SubLObject displayP, SubLObject requiredP, SubLObject selectedP) {
        if (displayP == cure_api.UNPROVIDED) {
            displayP = (SubLObject)cure_api.T;
        }
        if (requiredP == cure_api.UNPROVIDED) {
            requiredP = (SubLObject)cure_api.T;
        }
        if (selectedP == cure_api.UNPROVIDED) {
            selectedP = (SubLObject)cure_api.NIL;
        }
        final SubLObject concept_id = document_annotation_widgets.term_learner_id(cycl);
        return (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$kw117$CYCL, cycl, cure_api.$kw118$WEIGHT, weight, cure_api.$kw162$JUSTIFICATION, justification, cure_api.$kw119$CONCEPT_ID, concept_id, cure_api.$kw120$NL_STRING, unicode_nauts.convert_unicode_nauts_to_utf8_strings(nl_string), cure_api.$kw122$ASSERT_SENTENCE_ID, document_annotation_widgets.term_learner_id(assert_sentence), cure_api.$kw123$STATUS_CODE, status_code, cure_api.$kw9$DISPLAY, displayP, cure_api.$kw10$REQUIRED, requiredP, cure_api.$kw136$INITIALLY_SELECTED, selectedP });
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 38033L)
    public static SubLObject term_learner_add_lexical_phrase(final SubLObject phrase_string, final SubLObject term_id, SubLObject original_string, SubLObject document_url, SubLObject doc_title, SubLObject user, SubLObject lexical_mt) {
        if (original_string == cure_api.UNPROVIDED) {
            original_string = (SubLObject)cure_api.NIL;
        }
        if (document_url == cure_api.UNPROVIDED) {
            document_url = (SubLObject)cure_api.NIL;
        }
        if (doc_title == cure_api.UNPROVIDED) {
            doc_title = (SubLObject)cure_api.NIL;
        }
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (lexical_mt == cure_api.UNPROVIDED) {
            lexical_mt = cure_api.$term_learner_default_lexical_assertion_mt$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym163$TERM_LEARNER_ADD_LEXICAL_PHRASE, phrase_string, term_id, original_string, document_url, user, lexical_mt));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym163$TERM_LEARNER_ADD_LEXICAL_PHRASE, phrase_string, term_id, original_string, document_url, user, lexical_mt));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject v_term = document_annotation_widgets.term_learner_object_from_id(term_id);
        final SubLObject lexical_justifications = (SubLObject)ConsesLow.list(new_term_learner_justification(phrase_string, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$kw97$USER, (SubLObject)cure_api.NIL, document_annotation_widgets.term_learner_id(lexical_mt)));
        final SubLObject fragment_justification = (SubLObject)cure_api.NIL;
        final SubLObject default_weight = (SubLObject)cure_api.$float98$0_9;
        SubLObject result = (SubLObject)cure_api.NIL;
        final SubLObject _prev_bind_2 = api_control_vars.$the_cyclist$.currentBinding(thread);
        final SubLObject _prev_bind_3 = cure_api.$current_tl_task$.currentBinding(thread);
        try {
            api_control_vars.$the_cyclist$.bind(user, thread);
            cure_api.$current_tl_task$.bind(default_task_for_user(user), thread);
            final SubLObject domain_mt = query_mt_for_task(cure_api.$current_tl_task$.getDynamicValue(thread));
            final SubLObject lexical_formula = auto_lexifier.auto_lexify(phrase_string, v_term, lexical_mt, domain_mt).first();
            final SubLObject renderers = (SubLObject)ConsesLow.list(new_term_learner_string_renderer(phrase_string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
            if (cure_api.NIL != result) {
                result = (SubLObject)ConsesLow.cons(new_term_learner_type_int(lexical_formula, default_weight, lexical_justifications, fragment_justification, phrase_string, lexical_formula, cure_api.$term_learner_unknown_assertible$.getGlobalValue(), renderers, (SubLObject)cure_api.NIL, (SubLObject)cure_api.T, (SubLObject)cure_api.T, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL), result);
            }
            else {
                term_learner_assert_lexical_info(v_term, phrase_string, domain_mt, lexical_mt, lexical_formula);
                result = (SubLObject)ConsesLow.cons(new_term_learner_type_int(lexical_formula, default_weight, lexical_justifications, fragment_justification, phrase_string, lexical_formula, cure_api.$term_learner_known_removable$.getGlobalValue(), renderers, (SubLObject)cure_api.NIL, (SubLObject)cure_api.T, (SubLObject)cure_api.T, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL), result);
            }
        }
        finally {
            cure_api.$current_tl_task$.rebind(_prev_bind_3, thread);
            api_control_vars.$the_cyclist$.rebind(_prev_bind_2, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 42478L)
    public static SubLObject xml_term_learner_user_choice(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject command = string_to_user_action_keyword(html_utilities.html_extract_input((SubLObject)cure_api.$str164$userAction, args));
        final SubLObject term_string = html_utilities.html_extract_input((SubLObject)cure_api.$str165$termString, args);
        final SubLObject choice_id = string_utilities.trim_whitespace(web_utilities.html_url_decode(html_utilities.html_extract_input((SubLObject)cure_api.$str166$choiceid, args)));
        final SubLObject substitutions = get_substitutions_from_args(args);
        final SubLObject justifications = reader.read_from_string_ignoring_errors(html_utilities.html_extract_input((SubLObject)cure_api.$str167$justifications, args), (SubLObject)cure_api.NIL, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject sentence_id_string = html_utilities.html_extract_input((SubLObject)cure_api.$str168$sentenceId, args);
        final SubLObject term_id = string_utilities.trim_whitespace(html_utilities.html_extract_input((SubLObject)cure_api.$str169$termId, args));
        final SubLObject title = string_utilities.trim_whitespace(html_utilities.html_extract_input((SubLObject)cure_api.$str170$title, args));
        final SubLObject url = web_utilities.html_url_decode(html_utilities.html_extract_input((SubLObject)cure_api.$str171$url, args));
        final SubLObject result_value = term_learner_user_choice(choice_id, term_string, term_id, sentence_id_string, substitutions, command, justifications, url, title, api_control_vars.$the_cyclist$.getDynamicValue(thread));
        final SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
        try {
            xml_vars.$xml_stream$.bind(html_macros.$html_stream$.getDynamicValue(thread), thread);
            SubLObject status_attrs = (SubLObject)ConsesLow.list((SubLObject)cure_api.$str172$code, conses_high.getf(result_value, (SubLObject)cure_api.$kw123$STATUS_CODE, (SubLObject)cure_api.UNPROVIDED));
            if (cure_api.NIL != conses_high.getf(result_value, (SubLObject)cure_api.$kw173$SENTENCE_ID, (SubLObject)cure_api.UNPROVIDED)) {
                status_attrs = Sequences.cconcatenate(status_attrs, (SubLObject)ConsesLow.list((SubLObject)cure_api.$str168$sentenceId, conses_high.getf(result_value, (SubLObject)cure_api.$kw173$SENTENCE_ID, (SubLObject)cure_api.UNPROVIDED)));
            }
            if (cure_api.NIL != conses_high.getf(result_value, (SubLObject)cure_api.$kw174$NEW_SENTENCE_ID, (SubLObject)cure_api.UNPROVIDED)) {
                status_attrs = Sequences.cconcatenate(status_attrs, (SubLObject)ConsesLow.list((SubLObject)cure_api.$str175$newSentenceId, conses_high.getf(result_value, (SubLObject)cure_api.$kw174$NEW_SENTENCE_ID, (SubLObject)cure_api.UNPROVIDED)));
            }
            try {
                final SubLObject _prev_bind_0_$14 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                try {
                    xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                    xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str176$status, status_attrs, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                    final SubLObject _prev_bind_0_$15 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                    try {
                        xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                        if (cure_api.NIL != conses_high.getf(result_value, (SubLObject)cure_api.$kw178$NEW_CYCL, (SubLObject)cure_api.UNPROVIDED)) {
                            try {
                                final SubLObject _prev_bind_0_$16 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$17 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                                try {
                                    xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                    xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str179$newCycLSentenceHLIDString, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                                    final SubLObject _prev_bind_0_$17 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                    try {
                                        xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                                        xml_utilities.xml_print(web_utilities.html_url_encode(conses_high.getf(result_value, (SubLObject)cure_api.$kw180$NEW_CYCL_HL_ID, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED);
                                    }
                                    finally {
                                        xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$17, thread);
                                    }
                                }
                                finally {
                                    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$17, thread);
                                    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$16, thread);
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$18 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str179$newCycLSentenceHLIDString);
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$18, thread);
                                }
                            }
                        }
                        if (cure_api.NIL != conses_high.getf(result_value, (SubLObject)cure_api.$kw178$NEW_CYCL, (SubLObject)cure_api.UNPROVIDED)) {
                            try {
                                final SubLObject _prev_bind_0_$19 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$18 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                                try {
                                    xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                    xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str181$newCycLSentenceDisplayString, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                                    final SubLObject _prev_bind_0_$20 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                    try {
                                        xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                                        xml_utilities.xml_print(web_utilities.html_url_encode(kb_utilities.pretty_print_cycl_to_string(conses_high.getf(result_value, (SubLObject)cure_api.$kw178$NEW_CYCL, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED);
                                    }
                                    finally {
                                        xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$20, thread);
                                    }
                                }
                                finally {
                                    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$18, thread);
                                    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$19, thread);
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$21 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                    final SubLObject _values2 = Values.getValuesAsVector();
                                    xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str181$newCycLSentenceDisplayString);
                                    Values.restoreValuesFromVector(_values2);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$21, thread);
                                }
                            }
                        }
                        if (cure_api.NIL != conses_high.getf(result_value, (SubLObject)cure_api.$kw120$NL_STRING, (SubLObject)cure_api.UNPROVIDED)) {
                            try {
                                final SubLObject _prev_bind_0_$22 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$19 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                                try {
                                    xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                    xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str182$newNLSentence, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                                    final SubLObject _prev_bind_0_$23 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                    try {
                                        xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                                        xml_utilities.xml_print(web_utilities.html_url_encode(conses_high.getf(result_value, (SubLObject)cure_api.$kw120$NL_STRING, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED);
                                    }
                                    finally {
                                        xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$23, thread);
                                    }
                                }
                                finally {
                                    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$19, thread);
                                    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$22, thread);
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$24 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                    final SubLObject _values3 = Values.getValuesAsVector();
                                    xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str182$newNLSentence);
                                    Values.restoreValuesFromVector(_values3);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$24, thread);
                                }
                            }
                        }
                        try {
                            final SubLObject _prev_bind_0_$25 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$20 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                            try {
                                xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str183$justification, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                                final SubLObject _prev_bind_0_$26 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                try {
                                    xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                                    xml_utilities.xml_print(conses_high.getf(result_value, (SubLObject)cure_api.$kw162$JUSTIFICATION, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED);
                                }
                                finally {
                                    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$26, thread);
                                }
                            }
                            finally {
                                xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$20, thread);
                                xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$25, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$27 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                final SubLObject _values4 = Values.getValuesAsVector();
                                xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str183$justification);
                                Values.restoreValuesFromVector(_values4);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$27, thread);
                            }
                        }
                    }
                    finally {
                        xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$15, thread);
                    }
                }
                finally {
                    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
                    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$14, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$28 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values5 = Values.getValuesAsVector();
                    xml_utilities.xml_terpri();
                    xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str176$status);
                    Values.restoreValuesFromVector(_values5);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$28, thread);
                }
            }
        }
        finally {
            xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 44598L)
    public static SubLObject get_substitutions_from_args(final SubLObject args) {
        SubLObject substitutions = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = args;
        SubLObject cons = (SubLObject)cure_api.NIL;
        cons = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = cons;
            SubLObject key = (SubLObject)cure_api.NIL;
            SubLObject value = (SubLObject)cure_api.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list186);
            key = current.first();
            current = (value = current.rest());
            if (cure_api.NIL != string_utilities.starts_with(key, (SubLObject)cure_api.$str187$cyclarg)) {
                substitutions = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(web_utilities.html_url_decode(string_utilities.substring(key, (SubLObject)cure_api.SEVEN_INTEGER, (SubLObject)cure_api.UNPROVIDED)), web_utilities.html_url_decode(value.first()), (SubLObject)cure_api.$kw161$CYCL_ID), substitutions);
            }
            if (cure_api.NIL != string_utilities.starts_with(key, (SubLObject)cure_api.$str188$stringarg)) {
                substitutions = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(web_utilities.html_url_decode(string_utilities.substring(key, (SubLObject)cure_api.NINE_INTEGER, (SubLObject)cure_api.UNPROVIDED)), web_utilities.html_url_decode(value.first()), (SubLObject)cure_api.$kw67$STRING), substitutions);
            }
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        return substitutions;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 45080L)
    public static SubLObject string_to_user_action_keyword(final SubLObject string) {
        if (string.equalp((SubLObject)cure_api.$str189$assert)) {
            return (SubLObject)cure_api.$kw190$ASSERT;
        }
        if (string.equalp((SubLObject)cure_api.$str191$replace)) {
            return (SubLObject)cure_api.$kw192$REPLACE;
        }
        if (string.equalp((SubLObject)cure_api.$str193$unassert)) {
            return (SubLObject)cure_api.$kw194$UNASSERT;
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 45307L)
    public static SubLObject term_learner_user_choice(final SubLObject choice_id, final SubLObject term_string, final SubLObject term_id, final SubLObject sentence_id_string, final SubLObject substitutions, final SubLObject command, final SubLObject justifications, final SubLObject url, final SubLObject doc_title, final SubLObject user) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$sym195$TERM_LEARNER_USER_CHOICE, choice_id, term_string, term_id, sentence_id_string, substitutions, command, justifications, url, doc_title, user }));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$sym195$TERM_LEARNER_USER_CHOICE, choice_id, term_string, term_id, sentence_id_string, substitutions, command, justifications, url, doc_title, user }));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject sentence_template = kb_utilities.maybe_find_object_by_compact_hl_external_id_string(sentence_id_string);
        if (command == cure_api.$kw194$UNASSERT) {
            return term_learner_handle_user_choice(choice_id, term_string, term_id, sentence_template, justifications, url, doc_title, user, (SubLObject)cure_api.$kw196$REJECT, (SubLObject)cure_api.T);
        }
        if (command == cure_api.$kw192$REPLACE) {
            term_learner_handle_user_choice(choice_id, term_string, term_id, sentence_template, justifications, url, doc_title, user, (SubLObject)cure_api.$kw196$REJECT, (SubLObject)cure_api.T);
        }
        if (cure_api.NIL != conses_high.member(command, (SubLObject)cure_api.$list197, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
            SubLObject new_sentence = sentence_template;
            SubLObject cdolist_list_var = substitutions;
            SubLObject substitution = (SubLObject)cure_api.NIL;
            substitution = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject current;
                final SubLObject datum = current = substitution;
                SubLObject argpos_string = (SubLObject)cure_api.NIL;
                SubLObject raw_new_value = (SubLObject)cure_api.NIL;
                SubLObject type = (SubLObject)cure_api.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list198);
                argpos_string = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list198);
                raw_new_value = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list198);
                type = current.first();
                current = current.rest();
                if (cure_api.NIL == current) {
                    final SubLObject arg_pos = reader.read_from_string_ignoring_errors(argpos_string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                    final SubLObject new_value = (type == cure_api.$kw67$STRING) ? raw_new_value : document_annotation_widgets.term_learner_object_from_id(string_utilities.trim_whitespace(raw_new_value));
                    new_sentence = el_utilities.replace_formula_arg_position(arg_pos, new_value, new_sentence);
                }
                else {
                    cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list198);
                }
                cdolist_list_var = cdolist_list_var.rest();
                substitution = cdolist_list_var.first();
            }
            SubLObject assert_result = term_learner_handle_user_choice(choice_id, term_string, term_id, new_sentence, justifications, url, doc_title, user, (SubLObject)cure_api.$kw199$ACCEPT, (SubLObject)cure_api.T);
            final SubLObject nl_sentence_string = get_nl_generation_for_user_added_sentence(new_sentence);
            final SubLObject utf8_sentence = unicode_nauts.convert_unicode_nauts_to_utf8_strings(new_sentence);
            assert_result = conses_high.putf(assert_result, (SubLObject)cure_api.$kw178$NEW_CYCL, utf8_sentence);
            assert_result = conses_high.putf(assert_result, (SubLObject)cure_api.$kw174$NEW_SENTENCE_ID, document_annotation_widgets.term_learner_id(new_sentence));
            if (cure_api.NIL != nl_sentence_string) {
                assert_result = conses_high.putf(assert_result, (SubLObject)cure_api.$kw200$NEW_NL_SENTENCE, nl_sentence_string);
            }
            assert_result = conses_high.putf(assert_result, (SubLObject)cure_api.$kw201$NEW_CYCL_SENTENCE_STRING, utf8_sentence);
            assert_result = conses_high.putf(assert_result, (SubLObject)cure_api.$kw173$SENTENCE_ID, document_annotation_widgets.term_learner_id(sentence_template));
            return assert_result;
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 47829L)
    public static SubLObject xml_term_learner_create_new(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject arg_pos = html_utilities.html_extract_input((SubLObject)cure_api.$str202$argpos, args);
        final SubLObject doc_url = html_utilities.html_extract_input((SubLObject)cure_api.$str171$url, args);
        final SubLObject doc_title = html_utilities.html_extract_input((SubLObject)cure_api.$str170$title, args);
        final SubLObject justifications = (SubLObject)cure_api.NIL;
        SubLObject assert_sentence_strings = (SubLObject)cure_api.NIL;
        SubLObject nl_strings = (SubLObject)cure_api.NIL;
        SubLObject renderers = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = args;
        SubLObject arg = (SubLObject)cure_api.NIL;
        arg = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.NIL != string_utilities.starts_with(arg.first(), (SubLObject)cure_api.$str203$sentence)) {
                assert_sentence_strings = (SubLObject)ConsesLow.cons(conses_high.second(arg), assert_sentence_strings);
            }
            else if (cure_api.NIL != string_utilities.starts_with(arg.first(), (SubLObject)cure_api.$str165$termString)) {
                nl_strings = (SubLObject)ConsesLow.cons(conses_high.second(arg), nl_strings);
            }
            cdolist_list_var = cdolist_list_var.rest();
            arg = cdolist_list_var.first();
        }
        renderers = term_learner_create_new(assert_sentence_strings, nl_strings, arg_pos, justifications, doc_title, doc_url, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
        try {
            xml_vars.$xml_stream$.bind(html_macros.$html_stream$.getDynamicValue(thread), thread);
            xml_output_renderers(renderers);
        }
        finally {
            xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 48568L)
    public static SubLObject is_formula_arg_position_a_collectionP(SubLObject formula, final SubLObject arg_pos, SubLObject mt, SubLObject col) {
        if (mt == cure_api.UNPROVIDED) {
            mt = (SubLObject)cure_api.NIL;
        }
        if (col == cure_api.UNPROVIDED) {
            col = cure_api.$const49$Collection;
        }
        assert cure_api.NIL != Types.listp(formula) : formula;
        formula = el_utilities.replace_formula_arg_position(arg_pos, (SubLObject)cure_api.$sym206$_X88928381ASDF, formula);
        return genls.any_specP(col, at_var_types.formula_variable_isa_constraints((SubLObject)cure_api.$sym206$_X88928381ASDF, formula, mt, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 48949L)
    public static SubLObject cure_assert_sentence(final SubLObject el_sentence, SubLObject user, SubLObject task, SubLObject mt) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (task == cure_api.UNPROVIDED) {
            task = default_task_for_user(user);
        }
        if (mt == cure_api.UNPROVIDED) {
            mt = hlmt_czer.coerce_to_hlmt(default_assert_mt_for_user_and_task(user, task));
        }
        return ke.ke_assert_now(el_sentence, mt, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 49347L)
    public static SubLObject cure_unassert_sentence(final SubLObject el_sentence, SubLObject user, SubLObject task, SubLObject mt) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (task == cure_api.UNPROVIDED) {
            task = default_task_for_user(user);
        }
        if (mt == cure_api.UNPROVIDED) {
            mt = hlmt_czer.coerce_to_hlmt(default_assert_mt_for_user_and_task(user, task));
        }
        return ke.ke_unassert_now(el_sentence, mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 49738L)
    public static SubLObject create_new_cure_term_and_assert_sentence(final SubLObject nl_string, final SubLObject el_sentence, final SubLObject arg_pos, SubLObject tag_term, SubLObject user, SubLObject task, SubLObject mt, SubLObject lexical_mt) {
        if (tag_term == cure_api.UNPROVIDED) {
            tag_term = cure_api.$const56$DocIngesterUserCreatedTerm;
        }
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (task == cure_api.UNPROVIDED) {
            task = default_task_for_user(user);
        }
        if (mt == cure_api.UNPROVIDED) {
            mt = hlmt_czer.coerce_to_hlmt(default_assert_mt_for_user_and_task(user, task));
        }
        if (lexical_mt == cure_api.UNPROVIDED) {
            lexical_mt = cure_api.$term_learner_default_lexical_assertion_mt$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$sym209$CREATE_NEW_CURE_TERM_AND_ASSERT_SENTENCE, nl_string, el_sentence, arg_pos, tag_term, user, task, mt, lexical_mt }));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$sym209$CREATE_NEW_CURE_TERM_AND_ASSERT_SENTENCE, nl_string, el_sentence, arg_pos, tag_term, user, task, mt, lexical_mt }));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject new_term = rkf_term_utilities.rkf_create(nl_string, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject term_id = kb_utilities.compact_hl_external_id_string(new_term);
        final SubLObject _prev_bind_3 = api_control_vars.$the_cyclist$.currentBinding(thread);
        try {
            api_control_vars.$the_cyclist$.bind(user, thread);
            ke.ke_assert_now((SubLObject)ConsesLow.list(cure_api.$const210$termDependsOn, new_term, mt), cure_api.$const211$UniversalVocabularyMt, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            if (cure_api.NIL != is_formula_arg_position_a_collectionP(el_sentence, arg_pos, mt, (SubLObject)cure_api.UNPROVIDED) && !morphology.singularize_string(nl_string, (SubLObject)cure_api.UNPROVIDED).equalp(nl_string)) {
                ke.ke_rename(new_term, constants_high.suggest_constant_name(nl_string, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$kw51$UPCASE, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
            }
            term_learner_add_lexical_phrase(nl_string, term_id, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, user, lexical_mt);
            if (cure_api.NIL != constant_handles.valid_constant(tag_term, (SubLObject)cure_api.UNPROVIDED)) {
                ke.ke_assert_now((SubLObject)ConsesLow.list(cure_api.$const57$quotedIsa, new_term, tag_term), cure_api.$const54$BaseKB, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            }
            cure_assert_sentence(el_utilities.replace_formula_arg_position(arg_pos, new_term, el_sentence), user, task, mt);
            return (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw117$CYCL, new_term, (SubLObject)cure_api.$kw212$NL, nl_string, (SubLObject)cure_api.$kw213$HL_ID, kb_utilities.compact_hl_external_id_string(new_term));
        }
        finally {
            api_control_vars.$the_cyclist$.rebind(_prev_bind_3, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 51511L)
    public static SubLObject term_learner_create_new(final SubLObject assert_sentence_strings, final SubLObject nl_strings, final SubLObject original_arg_pos, SubLObject justifications, SubLObject doc_title, SubLObject doc_url, SubLObject user, SubLObject lexical_mt) {
        if (justifications == cure_api.UNPROVIDED) {
            justifications = (SubLObject)cure_api.NIL;
        }
        if (doc_title == cure_api.UNPROVIDED) {
            doc_title = (SubLObject)cure_api.$str50$;
        }
        if (doc_url == cure_api.UNPROVIDED) {
            doc_url = (SubLObject)cure_api.$str50$;
        }
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (lexical_mt == cure_api.UNPROVIDED) {
            lexical_mt = cure_api.$term_learner_default_lexical_assertion_mt$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$sym214$TERM_LEARNER_CREATE_NEW, assert_sentence_strings, nl_strings, original_arg_pos, justifications, doc_title, doc_url, user, lexical_mt }));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$sym214$TERM_LEARNER_CREATE_NEW, assert_sentence_strings, nl_strings, original_arg_pos, justifications, doc_title, doc_url, user, lexical_mt }));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        SubLObject new_term = (SubLObject)cure_api.NIL;
        SubLObject term_id = (SubLObject)cure_api.NIL;
        final SubLObject term_strings = Mapping.mapcar((SubLObject)cure_api.$sym215$HTML_URL_DECODE, nl_strings);
        final SubLObject primary_term_string = term_strings.first();
        if (cure_api.NIL == justifications) {
            justifications = (SubLObject)ConsesLow.list(new_term_learner_justification(primary_term_string, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$kw97$USER, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
        }
        final SubLObject _prev_bind_3 = api_control_vars.$the_cyclist$.currentBinding(thread);
        try {
            api_control_vars.$the_cyclist$.bind(user, thread);
            final SubLObject mt = get_mts_for_user_choice(doc_url, doc_title, justifications, user, (SubLObject)cure_api.UNPROVIDED).first();
            new_term = rkf_term_utilities.rkf_create(primary_term_string, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            term_id = kb_utilities.compact_hl_external_id_string(new_term);
            if (cure_api.NIL != constant_handles.valid_constant(cure_api.$const56$DocIngesterUserCreatedTerm, (SubLObject)cure_api.UNPROVIDED)) {
                rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.listS(cure_api.$const57$quotedIsa, new_term, (SubLObject)cure_api.$list58), cure_api.$const54$BaseKB, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            }
            rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const210$termDependsOn, new_term, mt), cure_api.$const211$UniversalVocabularyMt, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            SubLObject non_isa_sentences = (SubLObject)cure_api.NIL;
            final SubLObject base_sentences = Mapping.mapcar((SubLObject)cure_api.$sym216$GET_BASE_SENTENCE_FROM_SENTENCE_STRING, assert_sentence_strings);
            final SubLObject isa_collection = new_term_will_be_collectionP(base_sentences);
            SubLObject cdolist_list_var = base_sentences;
            SubLObject base_sentence = (SubLObject)cure_api.NIL;
            base_sentence = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                final SubLObject sentence = conses_high.subst(new_term, (SubLObject)cure_api.$kw217$NEW_TERM, base_sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                if (cycl_utilities.formula_arg0(sentence).eql(cure_api.$const55$isa)) {
                    rkf_assertion_utilities.rkf_assert_with_implicature(sentence, (cure_api.NIL != isa_collection) ? cure_api.$const211$UniversalVocabularyMt : mt, (SubLObject)cure_api.T);
                }
                else {
                    non_isa_sentences = (SubLObject)ConsesLow.cons(sentence, non_isa_sentences);
                }
                cdolist_list_var = cdolist_list_var.rest();
                base_sentence = cdolist_list_var.first();
            }
            cdolist_list_var = non_isa_sentences;
            SubLObject sentence2 = (SubLObject)cure_api.NIL;
            sentence2 = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                final SubLObject assert_mt = assert_mt_for_sentence(sentence2, mt, isa_collection);
                rkf_assertion_utilities.rkf_assert_with_implicature(sentence2, assert_mt, (SubLObject)cure_api.T);
                cdolist_list_var = cdolist_list_var.rest();
                sentence2 = cdolist_list_var.first();
            }
            if (cure_api.NIL != fort_types_interface.collectionP(new_term) && !morphology.singularize_string(primary_term_string, (SubLObject)cure_api.UNPROVIDED).equalp(primary_term_string)) {
                ke.ke_rename(new_term, constants_high.suggest_constant_name(primary_term_string, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$kw51$UPCASE, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
            }
            SubLObject cdolist_list_var2 = term_strings;
            SubLObject string = (SubLObject)cure_api.NIL;
            string = cdolist_list_var2.first();
            while (cure_api.NIL != cdolist_list_var2) {
                term_learner_add_lexical_phrase(string, term_id, (SubLObject)cure_api.$str50$, doc_url, doc_title, user, lexical_mt);
                cdolist_list_var2 = cdolist_list_var2.rest();
                string = cdolist_list_var2.first();
            }
        }
        finally {
            api_control_vars.$the_cyclist$.rebind(_prev_bind_3, thread);
        }
        return Values.values((SubLObject)ConsesLow.list(new_term_learner_open_select_renderer(original_arg_pos, (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(primary_term_string, new_term, (SubLObject)cure_api.T)), new_term, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)), new_term);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 55081L)
    public static SubLObject assert_mt_for_sentence(final SubLObject sentence, final SubLObject default_mt, final SubLObject isa_collection) {
        if (cure_api.NIL == isa_collection) {
            return default_mt;
        }
        if (cure_api.NIL != genl_predicates.genl_predP(cycl_utilities.formula_arg0(sentence), cure_api.$const55$isa, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
            return cure_api.$const211$UniversalVocabularyMt;
        }
        if (cure_api.NIL != genl_predicates.genl_predP(cycl_utilities.formula_arg0(sentence), cure_api.$const76$genls, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
            return cure_api.$const211$UniversalVocabularyMt;
        }
        return default_mt;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 55613L)
    public static SubLObject new_term_will_be_collectionP(final SubLObject sentences) {
        SubLObject isa_collection = (SubLObject)cure_api.NIL;
        if (cure_api.NIL == isa_collection) {
            SubLObject csome_list_var;
            SubLObject sentence;
            for (csome_list_var = sentences, sentence = (SubLObject)cure_api.NIL, sentence = csome_list_var.first(); cure_api.NIL == isa_collection && cure_api.NIL != csome_list_var; isa_collection = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.$kw217$NEW_TERM == cycl_utilities.formula_arg1(sentence, (SubLObject)cure_api.UNPROVIDED) && (cure_api.$const76$genls.eql(cycl_utilities.formula_arg0(sentence)) || cure_api.NIL != genl_predicates.genl_predP(cycl_utilities.formula_arg0(sentence), cure_api.$const76$genls, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED) || (cure_api.$const55$isa.eql(cycl_utilities.formula_arg0(sentence)) && cure_api.NIL != isa.isaP(cycl_utilities.formula_arg2(sentence, (SubLObject)cure_api.UNPROVIDED), cure_api.$const110$CollectionType, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) || (cure_api.NIL != genl_predicates.genl_predP(cycl_utilities.formula_arg0(sentence), cure_api.$const55$isa, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL != isa.isaP(cycl_utilities.formula_arg2(sentence, (SubLObject)cure_api.UNPROVIDED), cure_api.$const110$CollectionType, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)))), csome_list_var = csome_list_var.rest(), sentence = csome_list_var.first()) {}
        }
        return isa_collection;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 56259L)
    public static SubLObject term_learner_renderer_for_new_taxonomic_relative(final SubLObject term_string, final SubLObject term_id, final SubLObject type_id, final SubLObject relation_type, SubLObject user, SubLObject task) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (task == cure_api.UNPROVIDED) {
            task = default_task_for_user(user);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym218$TERM_LEARNER_RENDERER_FOR_NEW_TAXONOMIC_RELATIVE, term_string, term_id, type_id, relation_type, user, task));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym218$TERM_LEARNER_RENDERER_FOR_NEW_TAXONOMIC_RELATIVE, term_string, term_id, type_id, relation_type, user, task));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject type = document_annotation_widgets.term_learner_object_from_id(type_id);
        final SubLObject cycl_sentence = term_learner_get_taxonomic_sentence_for_new_type(relation_type, type);
        final SubLObject new_sentence_id = kb_utilities.compact_hl_external_id_string(cycl_sentence);
        final SubLObject new_term = (cure_api.NIL != string_utilities.non_empty_stringP(term_id)) ? document_annotation_widgets.term_learner_object_from_id(term_id) : Values.nth_value_step_2(Values.nth_value_step_1((SubLObject)cure_api.ONE_INTEGER), term_learner_create_new((SubLObject)ConsesLow.list(new_sentence_id), (SubLObject)ConsesLow.list(term_string), (SubLObject)cure_api.$str50$, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
        final SubLObject assert_sentence = cycl_utilities.expression_subst(new_term, (SubLObject)cure_api.$kw217$NEW_TERM, cycl_sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        rkf_assertion_utilities.rkf_assert_now(assert_sentence, default_assert_mt_for_user_and_task(user, task));
        SubLObject ignore_errors_tag = (SubLObject)cure_api.NIL;
        try {
            thread.throwStack.push(cure_api.$kw40$IGNORE_ERRORS_TARGET);
            final SubLObject _prev_bind_3 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cure_api.$sym41$IGNORE_ERRORS_HANDLER), thread);
                try {
                    SubLObject stream2 = (SubLObject)cure_api.NIL;
                    try {
                        final SubLObject _prev_bind_0_$33 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                            stream2 = compatibility.open_text(cure_api.$term_learner_user_added_types_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                        }
                        finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$33, thread);
                        }
                        if (!stream2.isStream()) {
                            Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, cure_api.$term_learner_user_added_types_log_file$.getDynamicValue(thread));
                        }
                        final SubLObject s = stream2;
                        PrintLow.format(s, (SubLObject)cure_api.$str109$_input_cyctermid___A__date___A___, new SubLObject[] { kb_utilities.compact_hl_external_id_string(type), numeric_date_utilities.timestamp((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), term_string });
                    }
                    finally {
                        final SubLObject _prev_bind_0_$34 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (stream2.isStream()) {
                                streams_high.close(stream2, (SubLObject)cure_api.UNPROVIDED);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$34, thread);
                        }
                    }
                }
                catch (Throwable catch_var) {
                    Errors.handleThrowable(catch_var, (SubLObject)cure_api.NIL);
                }
            }
            finally {
                Errors.$error_handler$.rebind(_prev_bind_3, thread);
            }
        }
        catch (Throwable ccatch_env_var) {
            ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, (SubLObject)cure_api.$kw40$IGNORE_ERRORS_TARGET);
        }
        finally {
            thread.throwStack.pop();
        }
        return get_term_learner_string_renderer_for_cycl(new_term);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 58300L)
    public static SubLObject term_learner_get_taxonomic_sentence_for_new_type(final SubLObject relation_type, final SubLObject existing_term) {
        if (relation_type.equal((SubLObject)cure_api.$str219$spec)) {
            return (SubLObject)ConsesLow.list(cure_api.$const76$genls, (SubLObject)cure_api.$kw217$NEW_TERM, existing_term);
        }
        if (relation_type.equal((SubLObject)cure_api.$str220$instance)) {
            return (SubLObject)ConsesLow.list(cure_api.$const55$isa, (SubLObject)cure_api.$kw217$NEW_TERM, existing_term);
        }
        return (SubLObject)cure_api.$kw221$INVALID;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 58584L)
    public static SubLObject get_base_sentence_from_sentence_string(final SubLObject sentence_string) {
        if (cure_api.NIL != kb_utilities.compact_hl_external_id_string_p(sentence_string)) {
            return kb_utilities.maybe_find_object_by_compact_hl_external_id_string(sentence_string);
        }
        return transform_list_utilities.transform(reader.read_from_string_ignoring_errors(sentence_string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.$sym222$FIND_BY_ID_STRING_P, (SubLObject)cure_api.$sym223$DECODE_ID_STRING, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 58917L)
    public static SubLObject find_by_id_string_p(final SubLObject cons) {
        return (SubLObject)SubLObjectFactory.makeBoolean(cons.isList() && cons.first() == cure_api.$sym224$MAYBE_FIND_OBJECT_BY_COMPACT_HL_EXTERNAL_ID_STRING);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 59066L)
    public static SubLObject decode_id_string(final SubLObject cons) {
        return kb_utilities.maybe_find_object_by_compact_hl_external_id_string(conses_high.second(cons));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 59183L)
    public static SubLObject xml_term_learner_user_substitution(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject raw_sentence_id = html_utilities.html_extract_input((SubLObject)cure_api.$str168$sentenceId, args);
        final SubLObject term_string = html_utilities.html_extract_input((SubLObject)cure_api.$str165$termString, args);
        final SubLObject arg_pos_string = html_utilities.html_extract_input((SubLObject)cure_api.$str225$argPos, args);
        final SubLObject limit_string = html_utilities.html_extract_input((SubLObject)cure_api.$str226$limit, args);
        final SubLObject renderers = term_learner_user_substitution(raw_sentence_id, term_string, arg_pos_string, limit_string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
        try {
            xml_vars.$xml_stream$.bind(html_macros.$html_stream$.getDynamicValue(thread), thread);
            xml_output_renderers(renderers);
        }
        finally {
            xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
        }
        return renderers;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 59694L)
    public static SubLObject term_learner_user_substitution(SubLObject raw_sentence_id, final SubLObject term_string, SubLObject argpos_string, SubLObject limit_string, SubLObject raw_explicit_isa_constraints, SubLObject raw_explicit_genls_constraints, SubLObject user, SubLObject task, SubLObject allow_cycl_entryP) {
        if (raw_explicit_isa_constraints == cure_api.UNPROVIDED) {
            raw_explicit_isa_constraints = (SubLObject)cure_api.NIL;
        }
        if (raw_explicit_genls_constraints == cure_api.UNPROVIDED) {
            raw_explicit_genls_constraints = (SubLObject)cure_api.NIL;
        }
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (task == cure_api.UNPROVIDED) {
            task = cure_api.$current_tl_task$.getDynamicValue();
        }
        if (allow_cycl_entryP == cure_api.UNPROVIDED) {
            allow_cycl_entryP = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$sym228$TERM_LEARNER_USER_SUBSTITUTION, raw_sentence_id, term_string, argpos_string, limit_string, raw_explicit_isa_constraints, raw_explicit_genls_constraints, user, task, allow_cycl_entryP }));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$sym228$TERM_LEARNER_USER_SUBSTITUTION, raw_sentence_id, term_string, argpos_string, limit_string, raw_explicit_isa_constraints, raw_explicit_genls_constraints, user, task, allow_cycl_entryP }));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        if (cure_api.NIL == raw_sentence_id) {
            raw_sentence_id = (SubLObject)cure_api.$str50$;
        }
        if (cure_api.NIL == argpos_string) {
            argpos_string = (SubLObject)cure_api.$str50$;
        }
        if (cure_api.NIL == limit_string) {
            limit_string = (SubLObject)cure_api.$str229$100;
        }
        if (cure_api.NIL == task) {
            task = default_task_for_user(user);
        }
        final SubLObject original_sentence_id = string_utilities.string_subst((SubLObject)cure_api.$str230$_, (SubLObject)cure_api.$str106$_, raw_sentence_id, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject mt = wff_checking_mt_for_user_and_task(user, task);
        final SubLObject sentence = document_annotation_widgets.term_learner_object_from_id(original_sentence_id);
        final SubLObject argpos = reader.read_from_string_ignoring_errors(argpos_string, (SubLObject)cure_api.NIL, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject arg_value = (SubLObject)((cure_api.NIL != sentence && cure_api.NIL != argpos) ? cycl_utilities.formula_arg_position(sentence, argpos, (SubLObject)cure_api.UNPROVIDED) : cure_api.NIL);
        final SubLObject limit = reader.read_from_string_ignoring_errors(limit_string, (SubLObject)cure_api.NIL, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject query_var = (SubLObject)cure_api.$sym231$_THIS_QUERY_VAR;
        final SubLObject query_sentence = (SubLObject)((cure_api.NIL != arg_value && cure_api.NIL != sentence) ? cycl_utilities.formula_subst(query_var, arg_value, sentence, Symbols.symbol_function((SubLObject)cure_api.EQUAL), (SubLObject)cure_api.UNPROVIDED) : cure_api.NIL);
        final SubLObject explicit_isa_constraints = term_learner_constraint_list_from_string(raw_explicit_isa_constraints);
        final SubLObject implied_isa_constraints = at_var_types.formula_variable_isa_constraints(query_var, query_sentence, mt, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject isa_constraints = Sequences.cconcatenate(implied_isa_constraints, explicit_isa_constraints);
        final SubLObject duplicatableP = conses_high.member(argpos, cure_list_item_arg_poses(sentence), Symbols.symbol_function((SubLObject)cure_api.EQUAL), (SubLObject)cure_api.UNPROVIDED);
        final SubLObject utf8_term_string = unicode_nauts.convert_unicode_nauts_to_utf8_strings(term_string);
        final SubLObject nl_mt = parsing_mt_for_task(task);
        if (cure_api.NIL != constraint_filters.any_spec_ofP(isa_constraints, cure_api.$const232$String, cure_api.$const64$InferencePSC)) {
            return new_term_learner_modifiable_string_renderer(term_string, argpos);
        }
        methods.funcall_instance_method_with_1_args(document_annotation_widgets.get_default_document_ingester_annotation_lexicon(nl_mt), (SubLObject)cure_api.$sym33$LEARN, unicode_nauts.convert_unicode_nauts_to_utf8_strings(term_string));
        final SubLObject explicit_genls_constraints = term_learner_constraint_list_from_string(raw_explicit_genls_constraints);
        final SubLObject implied_genls_constraints = at_var_types.formula_variable_genl_constraints(query_var, query_sentence, mt, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject genls_constraints = Sequences.cconcatenate(implied_genls_constraints, explicit_genls_constraints);
        final SubLObject lex_entries = methods.funcall_instance_method_with_1_args(document_annotation_widgets.get_default_document_ingester_annotation_lexicon(nl_mt), (SubLObject)cure_api.$sym34$GET, utf8_term_string);
        final SubLObject cycl_entry_terms = (SubLObject)((cure_api.NIL != allow_cycl_entryP) ? cb_frames.terms_for_browsing(term_string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED) : cure_api.NIL);
        final SubLObject denot_cycls = Sequences.delete_duplicates(Sequences.cconcatenate(cycl_entry_terms, term_lexicon.denots_for_term_lexicon_entries(lex_entries)), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        SubLObject valid_denot_cycls = (SubLObject)cure_api.NIL;
        SubLObject initial_selection = (SubLObject)cure_api.NIL;
        final SubLObject denot_nls = term_learner_cycl_terms_to_nl_strings(denot_cycls, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject look_for_subwordsP = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == Sequences.find_if((SubLObject)cure_api.$sym233$NUMBERP, denot_cycls, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
        final SubLObject subword_cycl_nl_pairs = (SubLObject)((cure_api.NIL != look_for_subwordsP) ? subword_nl_cycl_pairs_from_string(term_string) : cure_api.NIL);
        SubLObject nl_cycl_valid_triples = (SubLObject)cure_api.NIL;
        SubLObject cycl = (SubLObject)cure_api.NIL;
        SubLObject cycl_$35 = (SubLObject)cure_api.NIL;
        SubLObject nl_string = (SubLObject)cure_api.NIL;
        SubLObject nl_string_$36 = (SubLObject)cure_api.NIL;
        cycl = denot_cycls;
        cycl_$35 = cycl.first();
        nl_string = denot_nls;
        nl_string_$36 = nl_string.first();
        while (cure_api.NIL != nl_string || cure_api.NIL != cycl) {
            thread.resetMultipleValues();
            final SubLObject not_invalid = term_learner_valid_substitution(cycl_$35, isa_constraints, genls_constraints, query_sentence, mt);
            final SubLObject passed_constraints = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (cure_api.NIL != not_invalid && passed_constraints.numG((SubLObject)cure_api.ZERO_INTEGER)) {
                valid_denot_cycls = (SubLObject)ConsesLow.cons(cycl_$35, valid_denot_cycls);
                nl_cycl_valid_triples = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(nl_string_$36, cycl_$35, not_invalid), nl_cycl_valid_triples);
            }
            cycl = cycl.rest();
            cycl_$35 = cycl.first();
            nl_string = nl_string.rest();
            nl_string_$36 = nl_string.first();
        }
        if (cure_api.NIL == nl_cycl_valid_triples) {
            cycl = (SubLObject)cure_api.NIL;
            SubLObject cycl_$36 = (SubLObject)cure_api.NIL;
            nl_string = (SubLObject)cure_api.NIL;
            SubLObject nl_string_$37 = (SubLObject)cure_api.NIL;
            cycl = denot_cycls;
            cycl_$36 = cycl.first();
            nl_string = denot_nls;
            nl_string_$37 = nl_string.first();
            while (cure_api.NIL != nl_string || cure_api.NIL != cycl) {
                final SubLObject not_invalid = term_learner_valid_substitution(cycl_$36, isa_constraints, genls_constraints, query_sentence, mt);
                if (cure_api.NIL != not_invalid) {
                    valid_denot_cycls = (SubLObject)ConsesLow.cons(cycl_$36, valid_denot_cycls);
                }
                nl_cycl_valid_triples = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(nl_string_$37, cycl_$36, not_invalid), nl_cycl_valid_triples);
                cycl = cycl.rest();
                cycl_$36 = cycl.first();
                nl_string = nl_string.rest();
                nl_string_$37 = nl_string.first();
            }
        }
        if (cure_api.NIL != list_utilities.lengthE(valid_denot_cycls, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.UNPROVIDED)) {
            initial_selection = valid_denot_cycls.first();
        }
        nl_cycl_valid_triples = Sort.sort(nl_cycl_valid_triples, (SubLObject)cure_api.$sym234$SECOND_TRUE, (SubLObject)cure_api.$sym235$THIRD);
        SubLObject valid_text_match_triples = (SubLObject)cure_api.NIL;
        SubLObject invalid_text_match_triples = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = subword_cycl_nl_pairs;
        SubLObject cycl_nl = (SubLObject)cure_api.NIL;
        cycl_nl = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = cycl_nl;
            SubLObject cycl2 = (SubLObject)cure_api.NIL;
            SubLObject nl = (SubLObject)cure_api.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list236);
            cycl2 = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list236);
            nl = current.first();
            current = current.rest();
            if (cure_api.NIL == current) {
                thread.resetMultipleValues();
                final SubLObject not_invalid2 = term_learner_valid_substitution(cycl2, isa_constraints, genls_constraints, query_sentence, mt);
                final SubLObject constraints_passed = thread.secondMultipleValue();
                thread.resetMultipleValues();
                if (cure_api.NIL != not_invalid2 && constraints_passed.numG((SubLObject)cure_api.ZERO_INTEGER)) {
                    valid_text_match_triples = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(nl, cycl2, (SubLObject)cure_api.T), valid_text_match_triples);
                }
                else {
                    invalid_text_match_triples = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(nl, cycl2, (SubLObject)cure_api.NIL), invalid_text_match_triples);
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list236);
            }
            cdolist_list_var = cdolist_list_var.rest();
            cycl_nl = cdolist_list_var.first();
        }
        if (cure_api.NIL != valid_text_match_triples) {
            final SubLObject text_match_count = (SubLObject)((cure_api.NIL != limit) ? Numbers.subtract(limit, Sequences.length(valid_denot_cycls)) : cure_api.NIL);
            final SubLObject limited_matches = (cure_api.NIL != text_match_count) ? list_utilities.random_n(text_match_count, valid_text_match_triples) : valid_text_match_triples;
            final SubLObject remaining_needed = (SubLObject)((cure_api.NIL != text_match_count) ? Numbers.subtract(text_match_count, Sequences.length(limited_matches)) : cure_api.NIL);
            final SubLObject limited_invalid_matches = (SubLObject)((cure_api.NIL == remaining_needed) ? invalid_text_match_triples : (remaining_needed.numG((SubLObject)cure_api.ZERO_INTEGER) ? list_utilities.first_n(remaining_needed, invalid_text_match_triples) : cure_api.NIL));
            nl_cycl_valid_triples = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list((SubLObject)cure_api.$kw157$TEXT_MATCHES, term_string, Sequences.cconcatenate(limited_matches, limited_invalid_matches)), nl_cycl_valid_triples);
        }
        return unicode_nauts.convert_unicode_nauts_to_utf8_strings((SubLObject)ConsesLow.list(new_term_learner_open_select_renderer(argpos, Sequences.nreverse(nl_cycl_valid_triples), initial_selection, (SubLObject)cure_api.NIL, duplicatableP)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 66482L)
    public static SubLObject get_nl_cycl_valid_triples_via_scg(final SubLObject utf8_string, final SubLObject isa_constraints, final SubLObject genls_constraints, final SubLObject query_sentence, final SubLObject mt, SubLObject timeout) {
        if (timeout == cure_api.UNPROVIDED) {
            timeout = (SubLObject)cure_api.THREE_INTEGER;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject timed_out = (SubLObject)cure_api.NIL;
        SubLObject raw_scg_result = (SubLObject)cure_api.NIL;
        SubLObject triples = (SubLObject)cure_api.NIL;
        SubLObject cycls = (SubLObject)cure_api.NIL;
        SubLObject ignore_errors_tag = (SubLObject)cure_api.NIL;
        try {
            thread.throwStack.push(cure_api.$kw40$IGNORE_ERRORS_TARGET);
            final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cure_api.$sym41$IGNORE_ERRORS_HANDLER), thread);
                try {
                    final SubLObject tag = subl_macro_promotions.with_timeout_make_tag();
                    try {
                        thread.throwStack.push(tag);
                        final SubLObject _prev_bind_0_$39 = subl_macro_promotions.$within_with_timeout$.currentBinding(thread);
                        try {
                            subl_macro_promotions.$within_with_timeout$.bind((SubLObject)cure_api.T, thread);
                            SubLObject timer = (SubLObject)cure_api.NIL;
                            try {
                                final SubLObject _prev_bind_0_$40 = subl_macro_promotions.$with_timeout_nesting_depth$.currentBinding(thread);
                                try {
                                    subl_macro_promotions.$with_timeout_nesting_depth$.bind(Numbers.add((SubLObject)cure_api.ONE_INTEGER, subl_macro_promotions.$with_timeout_nesting_depth$.getDynamicValue(thread)), thread);
                                    timer = subl_macro_promotions.with_timeout_start_timer(timeout, tag);
                                    raw_scg_result = scg_api.scg_parse_term(utf8_string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                                }
                                finally {
                                    subl_macro_promotions.$with_timeout_nesting_depth$.rebind(_prev_bind_0_$40, thread);
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$41 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    subl_macro_promotions.with_timeout_stop_timer(timer);
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$41, thread);
                                }
                            }
                        }
                        finally {
                            subl_macro_promotions.$within_with_timeout$.rebind(_prev_bind_0_$39, thread);
                        }
                    }
                    catch (Throwable ccatch_env_var) {
                        timed_out = Errors.handleThrowable(ccatch_env_var, tag);
                    }
                    finally {
                        thread.throwStack.pop();
                    }
                    if (cure_api.NIL != timed_out) {
                        Errors.warn((SubLObject)cure_api.$str237$Timeout_attempting_to_call_SCG_on, utf8_string);
                    }
                    SubLObject cdolist_list_var = raw_scg_result;
                    SubLObject cycl = (SubLObject)cure_api.NIL;
                    cycl = cdolist_list_var.first();
                    while (cure_api.NIL != cdolist_list_var) {
                        thread.resetMultipleValues();
                        final SubLObject not_invalid = term_learner_valid_substitution(cycl, isa_constraints, genls_constraints, query_sentence, mt);
                        final SubLObject passed_constraints = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        if (cure_api.NIL != not_invalid && passed_constraints.numG((SubLObject)cure_api.ZERO_INTEGER)) {
                            cycls = (SubLObject)ConsesLow.cons(cycl, cycls);
                            triples = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(term_learner_cycl_term_to_nl_string(cycl, (SubLObject)cure_api.UNPROVIDED).first(), cycl, not_invalid), triples);
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        cycl = cdolist_list_var.first();
                    }
                }
                catch (Throwable catch_var) {
                    Errors.handleThrowable(catch_var, (SubLObject)cure_api.NIL);
                }
            }
            finally {
                Errors.$error_handler$.rebind(_prev_bind_0, thread);
            }
        }
        catch (Throwable ccatch_env_var2) {
            ignore_errors_tag = Errors.handleThrowable(ccatch_env_var2, (SubLObject)cure_api.$kw40$IGNORE_ERRORS_TARGET);
        }
        finally {
            thread.throwStack.pop();
        }
        return Values.values(triples, cycls);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 67278L)
    public static SubLObject term_learner_constraint_list_from_string(final SubLObject constraint_string) {
        SubLObject constraints = (SubLObject)((cure_api.NIL == constraint_string || cure_api.NIL != string_utilities.empty_string_p(constraint_string)) ? cure_api.NIL : document_annotation_widgets.term_learner_object_from_id(constraint_string));
        if (cure_api.NIL != cycl_grammar.cycl_denotational_term_p(constraints)) {
            constraints = (SubLObject)ConsesLow.list(constraints);
        }
        return constraints;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 67641L)
    public static SubLObject clear_term_learner_valid_substitution() {
        final SubLObject cs = cure_api.$term_learner_valid_substitution_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 67641L)
    public static SubLObject remove_term_learner_valid_substitution(final SubLObject cycl_term, final SubLObject isa_constraints, final SubLObject genls_constraints, final SubLObject sentence, final SubLObject mt) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$term_learner_valid_substitution_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(cycl_term, isa_constraints, genls_constraints, sentence, mt), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 67641L)
    public static SubLObject term_learner_valid_substitution_internal(final SubLObject cycl_term, final SubLObject isa_constraints, final SubLObject genls_constraints, final SubLObject sentence, final SubLObject mt) {
        SubLObject invalid = (SubLObject)cure_api.NIL;
        SubLObject passed_constraints = (SubLObject)cure_api.ZERO_INTEGER;
        if (cure_api.NIL == invalid) {
            SubLObject csome_list_var = isa_constraints;
            SubLObject isa_constraint = (SubLObject)cure_api.NIL;
            isa_constraint = csome_list_var.first();
            while (cure_api.NIL == invalid && cure_api.NIL != csome_list_var) {
                if (cure_api.NIL != lexicon_accessors.denot_has_typeP(cycl_term, isa_constraint, mt)) {
                    passed_constraints = Numbers.add(passed_constraints, (SubLObject)cure_api.ONE_INTEGER);
                }
                else if (cure_api.NIL != at_defns.not_has_typeP(cycl_term, isa_constraint, mt)) {
                    invalid = (SubLObject)cure_api.T;
                }
                csome_list_var = csome_list_var.rest();
                isa_constraint = csome_list_var.first();
            }
        }
        if (cure_api.NIL == invalid) {
            SubLObject csome_list_var = genls_constraints;
            SubLObject genls_constraint = (SubLObject)cure_api.NIL;
            genls_constraint = csome_list_var.first();
            while (cure_api.NIL == invalid && cure_api.NIL != csome_list_var) {
                if (cure_api.NIL != genls.genlsP(cycl_term, genls_constraint, mt, (SubLObject)cure_api.UNPROVIDED)) {
                    passed_constraints = Numbers.add(passed_constraints, (SubLObject)cure_api.ONE_INTEGER);
                }
                if (cure_api.NIL != genls.not_genlP(cycl_term, genls_constraint, mt, (SubLObject)cure_api.UNPROVIDED)) {
                    invalid = (SubLObject)cure_api.T;
                }
                csome_list_var = csome_list_var.rest();
                genls_constraint = csome_list_var.first();
            }
        }
        return Values.values((SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == invalid), passed_constraints);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 67641L)
    public static SubLObject term_learner_valid_substitution(final SubLObject cycl_term, final SubLObject isa_constraints, final SubLObject genls_constraints, final SubLObject sentence, final SubLObject mt) {
        SubLObject caching_state = cure_api.$term_learner_valid_substitution_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym238$TERM_LEARNER_VALID_SUBSTITUTION, (SubLObject)cure_api.$sym239$_TERM_LEARNER_VALID_SUBSTITUTION_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQUALP, (SubLObject)cure_api.FIVE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym240$CLEAR_TERM_LEARNER_VALID_SUBSTITUTION);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_5(cycl_term, isa_constraints, genls_constraints, sentence, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (cycl_term.equalp(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (isa_constraints.equalp(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (genls_constraints.equalp(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (sentence.equalp(cached_args.first())) {
                                cached_args = cached_args.rest();
                                if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && mt.equalp(cached_args.first())) {
                                    return memoization_state.caching_results(results2);
                                }
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(term_learner_valid_substitution_internal(cycl_term, isa_constraints, genls_constraints, sentence, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(cycl_term, isa_constraints, genls_constraints, sentence, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 68701L)
    public static SubLObject subword_nl_cycl_pairs_from_string(final SubLObject string) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_set = lexicon_subword_index.nl_trie_subword_index_search_set(string, (SubLObject)cure_api.UNPROVIDED);
        SubLObject cycl_nl_pairs = (SubLObject)cure_api.NIL;
        final SubLObject dict = dictionary.new_dictionary((SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED);
        if (cure_api.NIL == set.set_p(v_set)) {
            return (SubLObject)cure_api.NIL;
        }
        if (!set.set_size(v_set).numG((SubLObject)cure_api.TWENTY_INTEGER)) {
            final SubLObject set_contents_var = set.do_set_internal(v_set);
            SubLObject basis_object;
            SubLObject state;
            SubLObject super_string;
            SubLObject cdolist_list_var;
            SubLObject denot;
            for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)cure_api.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); cure_api.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                super_string = set_contents.do_set_contents_next(basis_object, state);
                if (cure_api.NIL != set_contents.do_set_contents_element_validP(state, super_string)) {
                    cdolist_list_var = lexicon_accessors.denots_of_string(super_string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                    denot = (SubLObject)cure_api.NIL;
                    denot = cdolist_list_var.first();
                    while (cure_api.NIL != cdolist_list_var) {
                        dictionary_utilities.dictionary_push(dict, denot, super_string);
                        cdolist_list_var = cdolist_list_var.rest();
                        denot = cdolist_list_var.first();
                    }
                }
            }
        }
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(dict)); cure_api.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            final SubLObject cycl = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            final SubLObject strings = thread.secondMultipleValue();
            thread.resetMultipleValues();
            cycl_nl_pairs = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(cycl, Sort.sort(strings, (SubLObject)cure_api.$sym153$_, (SubLObject)cure_api.$sym241$LENGTH).first()), cycl_nl_pairs);
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        return cycl_nl_pairs;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 69216L)
    public static SubLObject xml_term_learner_possible_types_from_substitution(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject sentence_id = html_utilities.html_extract_input((SubLObject)cure_api.$str168$sentenceId, args);
        final SubLObject term_string = html_utilities.html_extract_input((SubLObject)cure_api.$str165$termString, args);
        final SubLObject argpos_string = html_utilities.html_extract_input((SubLObject)cure_api.$str225$argPos, args);
        final SubLObject sexpr_result = term_learner_possible_types_from_substitution(sentence_id, term_string, argpos_string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
        try {
            xml_vars.$xml_stream$.bind(html_macros.$html_stream$.getDynamicValue(thread), thread);
            xml_output_term_types(sexpr_result);
        }
        finally {
            xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 69668L)
    public static SubLObject term_learner_possible_types_from_substitution(final SubLObject sentence_id, final SubLObject term_string, final SubLObject argpos_string, SubLObject user, SubLObject task) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (task == cure_api.UNPROVIDED) {
            task = cure_api.$current_tl_task$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym243$TERM_LEARNER_POSSIBLE_TYPES_FROM_SUBSTITUTION, sentence_id, term_string, argpos_string));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym243$TERM_LEARNER_POSSIBLE_TYPES_FROM_SUBSTITUTION, sentence_id, term_string, argpos_string));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        methods.funcall_instance_method_with_1_args(document_annotation_widgets.get_default_document_ingester_annotation_lexicon((SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.$sym33$LEARN, unicode_nauts.convert_unicode_nauts_to_utf8_strings(term_string));
        final SubLObject mt = query_mt_for_user_and_task(user, task);
        final SubLObject nl_mt = parsing_mt_for_task(task);
        final SubLObject sentence = document_annotation_widgets.term_learner_object_from_id(sentence_id);
        final SubLObject argpos = reader.read_from_string_ignoring_errors(argpos_string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject arg_value = cycl_utilities.formula_arg_position(sentence, argpos, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject query_var = (SubLObject)cure_api.$sym231$_THIS_QUERY_VAR;
        final SubLObject query_sentence = cycl_utilities.expression_subst(query_var, arg_value, sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject isa_constraints = at_var_types.formula_variable_isa_constraints(query_var, query_sentence, mt, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject genls_constraints = at_var_types.formula_variable_genl_constraints(query_var, query_sentence, mt, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject denot_cycls = term_learner_get_word_denots_from_string(term_string, nl_mt);
        final SubLObject justification = new_term_learner_justification(term_string, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$kw97$USER, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject display_isa_constraintsP = list_utilities.lengthE(genls_constraints, (SubLObject)cure_api.ZERO_INTEGER, (SubLObject)cure_api.UNPROVIDED);
        SubLObject new_types = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = isa_constraints;
        SubLObject v_isa = (SubLObject)cure_api.NIL;
        v_isa = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            new_types = (SubLObject)ConsesLow.cons(new_term_learner_single_justification_type(v_isa, (SubLObject)cure_api.$float98$0_9, justification, term_learner_cycl_term_to_nl_string(v_isa, (SubLObject)cure_api.UNPROVIDED).first(), (SubLObject)ConsesLow.list(cure_api.$const55$isa, (SubLObject)cure_api.$kw217$NEW_TERM, v_isa), cure_api.$term_learner_unknown_assertible$.getGlobalValue(), display_isa_constraintsP, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), new_types);
            cdolist_list_var = cdolist_list_var.rest();
            v_isa = cdolist_list_var.first();
        }
        cdolist_list_var = genls_constraints;
        SubLObject genl = (SubLObject)cure_api.NIL;
        genl = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            new_types = (SubLObject)ConsesLow.cons(new_term_learner_single_justification_type(genl, (SubLObject)cure_api.$float98$0_9, justification, term_learner_cycl_term_to_nl_string(genl, (SubLObject)cure_api.UNPROVIDED).first(), (SubLObject)ConsesLow.list(cure_api.$const76$genls, (SubLObject)cure_api.$kw217$NEW_TERM, genl), cure_api.$term_learner_unknown_assertible$.getGlobalValue(), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), new_types);
            cdolist_list_var = cdolist_list_var.rest();
            genl = cdolist_list_var.first();
        }
        final SubLObject valid_denots = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var2 = denot_cycls;
        SubLObject denot = (SubLObject)cure_api.NIL;
        denot = cdolist_list_var2.first();
        while (cure_api.NIL != cdolist_list_var2) {
            thread.resetMultipleValues();
            final SubLObject not_invalid = term_learner_valid_substitution(denot, isa_constraints, genls_constraints, query_sentence, mt);
            final SubLObject constraints_passed = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (cure_api.NIL != not_invalid && constraints_passed.numG((SubLObject)cure_api.ZERO_INTEGER)) {
                new_types = (SubLObject)ConsesLow.cons(new_term_learner_single_justification_type(denot, (SubLObject)cure_api.$float98$0_9, justification, term_learner_cycl_term_to_nl_string(denot, (SubLObject)cure_api.UNPROVIDED).first(), (SubLObject)ConsesLow.list(cure_api.$const76$genls, (SubLObject)cure_api.$kw217$NEW_TERM, denot), cure_api.$term_learner_unknown_assertible$.getGlobalValue(), (SubLObject)cure_api.T, (SubLObject)cure_api.NIL, list_utilities.singletonP(valid_denots)), new_types);
            }
            cdolist_list_var2 = cdolist_list_var2.rest();
            denot = cdolist_list_var2.first();
        }
        if (cure_api.NIL == new_types) {
            cdolist_list_var2 = denot_cycls;
            denot = (SubLObject)cure_api.NIL;
            denot = cdolist_list_var2.first();
            while (cure_api.NIL != cdolist_list_var2) {
                if (cure_api.NIL != term_learner_valid_substitution(denot, isa_constraints, genls_constraints, query_sentence, mt)) {
                    new_types = (SubLObject)ConsesLow.cons(new_term_learner_single_justification_type(denot, (SubLObject)cure_api.$float98$0_9, justification, term_learner_cycl_term_to_nl_string(denot, (SubLObject)cure_api.UNPROVIDED).first(), (SubLObject)ConsesLow.list(cure_api.$const76$genls, (SubLObject)cure_api.$kw217$NEW_TERM, denot), cure_api.$term_learner_unknown_assertible$.getGlobalValue(), (SubLObject)cure_api.T, (SubLObject)cure_api.NIL, list_utilities.singletonP(valid_denots)), new_types);
                }
                cdolist_list_var2 = cdolist_list_var2.rest();
                denot = cdolist_list_var2.first();
            }
        }
        return new_types;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 72632L)
    public static SubLObject term_learner_get_word_denots_from_string(final SubLObject string, SubLObject nl_mt) {
        if (nl_mt == cure_api.UNPROVIDED) {
            nl_mt = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject utf8 = unicode_nauts.convert_unicode_nauts_to_utf8_strings(string);
        final SubLObject lexicon = document_annotation_widgets.get_default_document_ingester_annotation_lexicon(nl_mt);
        final SubLObject sentence_iterator = concept_tagger.tag_concepts(document.new_document(utf8, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$sym244$RKF_STANDARD_STRING_WORDIFY), (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw245$LEXICON, lexicon, (SubLObject)cure_api.$kw246$OUTPUT_SPEC, nl_api_datastructures.new_nl_interpretation_spec((SubLObject)cure_api.$list247)));
        SubLObject result_cycls = (SubLObject)cure_api.NIL;
        SubLObject valid;
        for (SubLObject done_var = (SubLObject)cure_api.NIL; cure_api.NIL == done_var; done_var = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == valid)) {
            thread.resetMultipleValues();
            final SubLObject sentence_result = iteration.iteration_next(sentence_iterator);
            valid = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (cure_api.NIL != valid) {
                SubLObject cdolist_list_var = document.sentence_yield_exhaustive(sentence_result);
                SubLObject word = (SubLObject)cure_api.NIL;
                word = cdolist_list_var.first();
                while (cure_api.NIL != cdolist_list_var) {
                    result_cycls = Sequences.cconcatenate(document.word_cycls(word), result_cycls);
                    cdolist_list_var = cdolist_list_var.rest();
                    word = cdolist_list_var.first();
                }
            }
        }
        return result_cycls;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 73351L)
    public static SubLObject first_true(final SubLObject a, final SubLObject b) {
        return a;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 73479L)
    public static SubLObject second_true(final SubLObject a, final SubLObject b) {
        return b;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 73609L)
    public static SubLObject term_learner_autocomplete_native(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        SubLObject prefix = (SubLObject)cure_api.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list250);
        prefix = current.first();
        current = current.rest();
        SubLObject allow_other_keys_p = (SubLObject)cure_api.NIL;
        SubLObject rest = current;
        SubLObject bad = (SubLObject)cure_api.NIL;
        SubLObject current_$42 = (SubLObject)cure_api.NIL;
        while (cure_api.NIL != rest) {
            cdestructuring_bind.destructuring_bind_must_consp(rest, datum, (SubLObject)cure_api.$list250);
            current_$42 = rest.first();
            rest = rest.rest();
            cdestructuring_bind.destructuring_bind_must_consp(rest, datum, (SubLObject)cure_api.$list250);
            if (cure_api.NIL == conses_high.member(current_$42, (SubLObject)cure_api.$list251, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                bad = (SubLObject)cure_api.T;
            }
            if (current_$42 == cure_api.$kw6$ALLOW_OTHER_KEYS) {
                allow_other_keys_p = rest.first();
            }
            rest = rest.rest();
        }
        if (cure_api.NIL != bad && cure_api.NIL == allow_other_keys_p) {
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list250);
        }
        final SubLObject limit_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw252$LIMIT, current);
        final SubLObject limit = (SubLObject)((cure_api.NIL != limit_tail) ? conses_high.cadr(limit_tail) : cure_api.TWENTY_INTEGER);
        final SubLObject return_attrs_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw253$RETURN_ATTRS, current);
        final SubLObject return_attrs = (SubLObject)((cure_api.NIL != return_attrs_tail) ? conses_high.cadr(return_attrs_tail) : cure_api.$str50$);
        final SubLObject sentence_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw254$SENTENCE, current);
        final SubLObject sentence = (SubLObject)((cure_api.NIL != sentence_tail) ? conses_high.cadr(sentence_tail) : cure_api.NIL);
        final SubLObject arg_pos_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw146$ARG_POS, current);
        final SubLObject arg_pos = (SubLObject)((cure_api.NIL != arg_pos_tail) ? conses_high.cadr(arg_pos_tail) : cure_api.ZERO_INTEGER);
        final SubLObject case_sensitive_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw255$CASE_SENSITIVE, current);
        final SubLObject case_sensitive = (SubLObject)((cure_api.NIL != case_sensitive_tail) ? conses_high.cadr(case_sensitive_tail) : cure_api.NIL);
        final SubLObject constants_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw256$CONSTANTS, current);
        final SubLObject constants = (SubLObject)((cure_api.NIL != constants_tail) ? conses_high.cadr(constants_tail) : cure_api.NIL);
        return (SubLObject)ConsesLow.listS((SubLObject)cure_api.$sym257$TERM_LEARNER_AUTOCOMPLETE_INT, new SubLObject[] { prefix, ConsesLow.list((SubLObject)cure_api.$sym258$TO_STRING, limit), return_attrs, ConsesLow.list((SubLObject)cure_api.$sym259$COMPACT_HL_EXTERNAL_ID_STRING, sentence), ConsesLow.list((SubLObject)cure_api.$sym258$TO_STRING, arg_pos), ConsesLow.list((SubLObject)cure_api.$sym258$TO_STRING, case_sensitive), ConsesLow.list((SubLObject)cure_api.$sym258$TO_STRING, constants), cure_api.$list260 });
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 74025L)
    public static SubLObject term_learner_autocomplete(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        SubLObject prefix = (SubLObject)cure_api.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list262);
        prefix = current.first();
        current = current.rest();
        SubLObject allow_other_keys_p = (SubLObject)cure_api.NIL;
        SubLObject rest = current;
        SubLObject bad = (SubLObject)cure_api.NIL;
        SubLObject current_$43 = (SubLObject)cure_api.NIL;
        while (cure_api.NIL != rest) {
            cdestructuring_bind.destructuring_bind_must_consp(rest, datum, (SubLObject)cure_api.$list262);
            current_$43 = rest.first();
            rest = rest.rest();
            cdestructuring_bind.destructuring_bind_must_consp(rest, datum, (SubLObject)cure_api.$list262);
            if (cure_api.NIL == conses_high.member(current_$43, (SubLObject)cure_api.$list263, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                bad = (SubLObject)cure_api.T;
            }
            if (current_$43 == cure_api.$kw6$ALLOW_OTHER_KEYS) {
                allow_other_keys_p = rest.first();
            }
            rest = rest.rest();
        }
        if (cure_api.NIL != bad && cure_api.NIL == allow_other_keys_p) {
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list262);
        }
        final SubLObject limit_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw252$LIMIT, current);
        final SubLObject limit = (SubLObject)((cure_api.NIL != limit_tail) ? conses_high.cadr(limit_tail) : cure_api.$str264$20);
        final SubLObject return_attrs_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw253$RETURN_ATTRS, current);
        final SubLObject return_attrs = (SubLObject)((cure_api.NIL != return_attrs_tail) ? conses_high.cadr(return_attrs_tail) : cure_api.$str50$);
        final SubLObject sentence_id_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw173$SENTENCE_ID, current);
        final SubLObject sentence_id = (SubLObject)((cure_api.NIL != sentence_id_tail) ? conses_high.cadr(sentence_id_tail) : cure_api.$str265$Mww);
        final SubLObject arg_pos_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw146$ARG_POS, current);
        final SubLObject arg_pos = (SubLObject)((cure_api.NIL != arg_pos_tail) ? conses_high.cadr(arg_pos_tail) : cure_api.$str50$);
        final SubLObject case_sensitive_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw255$CASE_SENSITIVE, current);
        final SubLObject case_sensitive = (SubLObject)((cure_api.NIL != case_sensitive_tail) ? conses_high.cadr(case_sensitive_tail) : cure_api.$str266$nil);
        final SubLObject constants_tail = cdestructuring_bind.property_list_member((SubLObject)cure_api.$kw256$CONSTANTS, current);
        final SubLObject constants = (SubLObject)((cure_api.NIL != constants_tail) ? conses_high.cadr(constants_tail) : cure_api.$str266$nil);
        return (SubLObject)ConsesLow.listS((SubLObject)cure_api.$sym257$TERM_LEARNER_AUTOCOMPLETE_INT, new SubLObject[] { prefix, limit, return_attrs, sentence_id, arg_pos, case_sensitive, constants, cure_api.$list267 });
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 74314L)
    public static SubLObject xml_term_learner_autocomplete(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject prefix = html_utilities.html_extract_input((SubLObject)cure_api.$str268$prefix, args);
        final SubLObject count = (SubLObject)((cure_api.NIL != html_utilities.html_extract_input((SubLObject)cure_api.$str269$count, args)) ? html_utilities.html_extract_input((SubLObject)cure_api.$str269$count, args) : cure_api.$str264$20);
        final SubLObject sentence_id = html_utilities.html_extract_input((SubLObject)cure_api.$str168$sentenceId, args);
        final SubLObject arg_pos = html_utilities.html_extract_input((SubLObject)cure_api.$str225$argPos, args);
        final SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
        try {
            xml_vars.$xml_stream$.bind(html_macros.$html_stream$.getDynamicValue(thread), thread);
            print_high.princ(term_learner_autocomplete_int(prefix, count, (SubLObject)cure_api.$str50$, sentence_id, arg_pos, (SubLObject)cure_api.$str266$nil, (SubLObject)cure_api.$str266$nil, (SubLObject)cure_api.NIL), xml_vars.$xml_stream$.getDynamicValue(thread));
        }
        finally {
            xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 74778L)
    public static SubLObject term_learner_autocomplete_int(final SubLObject prefix, final SubLObject limit_string, final SubLObject return_attrs_string, final SubLObject sentence_id, final SubLObject arg_pos_string, final SubLObject case_sensitive_string, final SubLObject complete_on_constants_string, final SubLObject nativeP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$sym257$TERM_LEARNER_AUTOCOMPLETE_INT, prefix, limit_string, return_attrs_string, sentence_id, arg_pos_string, case_sensitive_string, complete_on_constants_string, nativeP }));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$sym257$TERM_LEARNER_AUTOCOMPLETE_INT, prefix, limit_string, return_attrs_string, sentence_id, arg_pos_string, case_sensitive_string, complete_on_constants_string, nativeP }));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject return_attrs = (SubLObject)((cure_api.NIL != reader.read_from_string_ignoring_errors(return_attrs_string, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) ? reader.read_from_string_ignoring_errors(return_attrs_string, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED) : cure_api.$list271);
        final SubLObject limit = reader.read_from_string_ignoring_errors(limit_string, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject case_sensitiveP = reader.read_from_string_ignoring_errors(case_sensitive_string, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject sentence = document_annotation_widgets.term_learner_object_from_id(sentence_id);
        final SubLObject arg_pos = reader.read_from_string_ignoring_errors(arg_pos_string, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject arg_constraints = (SubLObject)((cure_api.NIL != sentence) ? html_complete.get_arg_constraints_for_arg(sentence, arg_pos, cure_api.$const64$InferencePSC) : cure_api.NIL);
        final SubLObject isa_filter = html_complete.get_isa_filter_from_arg_constraints(arg_constraints);
        final SubLObject genls_filter = html_complete.get_genls_filter_from_arg_constraints(arg_constraints);
        final SubLObject isa_restrictions = (SubLObject)cure_api.NIL;
        final SubLObject genls_restrictions = (SubLObject)cure_api.NIL;
        final SubLObject complete_on_constantsP = reader.read_from_string_ignoring_errors(complete_on_constants_string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        SubLObject output_string = (SubLObject)cure_api.NIL;
        final SubLObject lexicon = document_annotation_widgets.get_default_document_ingester_annotation_lexicon((SubLObject)cure_api.UNPROVIDED);
        final SubLObject timeout = (SubLObject)cure_api.TWENTY_INTEGER;
        if (cure_api.NIL == nativeP) {
            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_4 = mt_relevance_macros.$mt$.currentBinding(thread);
            try {
                mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)cure_api.$sym272$RELEVANT_MT_IS_EVERYTHING, thread);
                mt_relevance_macros.$mt$.bind(cure_api.$const273$EverythingPSC, thread);
                final SubLObject _prev_bind_0_$44 = xml_vars.$xml_stream$.currentBinding(thread);
                try {
                    xml_vars.$xml_stream$.bind((SubLObject)cure_api.NIL, thread);
                    try {
                        xml_vars.$xml_stream$.setDynamicValue(streams_high.make_private_string_output_stream(), thread);
                        html_complete.xml_complete_int(prefix, (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$kw253$RETURN_ATTRS, return_attrs, cure_api.$kw274$ISA_FILTER, isa_filter, cure_api.$kw275$GENLS_FILTER, genls_filter, cure_api.$kw276$ISA_RESTRICTIONS, isa_restrictions, cure_api.$kw277$GENLS_RESTRICTIONS, genls_restrictions, cure_api.$kw252$LIMIT, limit, cure_api.$kw278$TIMEOUT, timeout, cure_api.$kw279$CASE_SENSITIVE_, case_sensitiveP, cure_api.$kw280$COMPLETE_ON_CONSTANTS_, complete_on_constantsP, cure_api.$kw245$LEXICON, lexicon }));
                        output_string = streams_high.get_output_stream_string(xml_vars.$xml_stream$.getDynamicValue(thread));
                    }
                    finally {
                        final SubLObject _prev_bind_0_$45 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            streams_high.close(xml_vars.$xml_stream$.getDynamicValue(thread), (SubLObject)cure_api.UNPROVIDED);
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$45, thread);
                        }
                    }
                }
                finally {
                    xml_vars.$xml_stream$.rebind(_prev_bind_0_$44, thread);
                }
                return output_string;
            }
            finally {
                mt_relevance_macros.$mt$.rebind(_prev_bind_4, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_3, thread);
            }
        }
        return html_complete.native_complete_int(prefix, (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$kw253$RETURN_ATTRS, return_attrs, cure_api.$kw274$ISA_FILTER, isa_filter, cure_api.$kw275$GENLS_FILTER, genls_filter, cure_api.$kw276$ISA_RESTRICTIONS, isa_restrictions, cure_api.$kw277$GENLS_RESTRICTIONS, genls_restrictions, cure_api.$kw252$LIMIT, limit, cure_api.$kw278$TIMEOUT, timeout, cure_api.$kw279$CASE_SENSITIVE_, case_sensitiveP, cure_api.$kw280$COMPLETE_ON_CONSTANTS_, complete_on_constantsP, cure_api.$kw245$LEXICON, lexicon }));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 78450L)
    public static SubLObject get_allotted_tasks(final SubLObject user) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym281$GET_ALLOTTED_TASKS, user));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym281$GET_ALLOTTED_TASKS, user));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        SubLObject tasks = ask_utilities.query_variable((SubLObject)cure_api.$sym282$_X, (SubLObject)ConsesLow.list(cure_api.$const60$and, (SubLObject)cure_api.$list283, (SubLObject)ConsesLow.list(cure_api.$const284$or, (SubLObject)ConsesLow.list(cure_api.$const285$thereExists, (SubLObject)cure_api.$sym286$_CURRENT_TASK, (SubLObject)ConsesLow.list(cure_api.$const60$and, (SubLObject)cure_api.$list287, (SubLObject)ConsesLow.list(cure_api.$const288$cureUserModel, (SubLObject)cure_api.$sym289$_MONAD_USER, (SubLObject)cure_api.$sym286$_CURRENT_TASK, user))), (SubLObject)ConsesLow.list(cure_api.$const60$and, (SubLObject)ConsesLow.list(cure_api.$const290$allottedAgents, (SubLObject)cure_api.$sym282$_X, user)))), cure_api.$const291$AnalystDatabaseMt, (SubLObject)cure_api.$list292);
        final SubLObject current_task = default_task_for_user(user);
        SubLObject result = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var;
        tasks = (cdolist_list_var = list_utilities.snoc(current_task, Sequences.remove(current_task, tasks, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)));
        SubLObject task = (SubLObject)cure_api.NIL;
        task = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            result = (SubLObject)ConsesLow.cons(new_term_learner_string_renderer(pph_main.generate_phrase(task, (SubLObject)cure_api.$kw20$DEFAULT, (SubLObject)cure_api.NIL, (SubLObject)ConsesLow.listS(cure_api.$const293$MtUnionFn, pph_vars.$pph_language_mt$.getDynamicValue(thread), (SubLObject)cure_api.$list294), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), task, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), result);
            cdolist_list_var = cdolist_list_var.rest();
            task = cdolist_list_var.first();
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 79434L)
    public static SubLObject term_learner_get_fact_sheet_for_term(final SubLObject concept_id, SubLObject user, SubLObject task) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (task == cure_api.UNPROVIDED) {
            task = cure_api.$current_tl_task$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym295$TERM_LEARNER_GET_FACT_SHEET_FOR_TERM, concept_id));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym295$TERM_LEARNER_GET_FACT_SHEET_FOR_TERM, concept_id));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject cycl = document_annotation_widgets.term_learner_object_from_id(concept_id);
        final SubLObject mt = query_mt_for_user_and_task(user, task);
        SubLObject body_content = (SubLObject)cure_api.NIL;
        if (cure_api.NIL != concept_naked_for_factsheetP(cycl, mt)) {
            return (SubLObject)cure_api.$str296$_html__body_No_known_facts__body_;
        }
        final SubLObject _prev_bind_3 = fact_sheets.$allow_fact_sheet_evaluationsP$.currentBinding(thread);
        try {
            fact_sheets.$allow_fact_sheet_evaluationsP$.bind((SubLObject)cure_api.ZERO_INTEGER, thread);
            final SubLObject v_properties = list_utilities.merge_plist(term_learner_standard_fact_sheet_properties(), term_learner_context_sensitive_fact_sheet_properties(cycl, user, task));
            final SubLObject linkless = fact_sheets.get_linkless_fact_sheet_for_term_in_html(cycl, (SubLObject)cure_api.$kw297$NORMAL, (SubLObject)cure_api.$kw20$DEFAULT, (SubLObject)cure_api.$kw20$DEFAULT, v_properties);
            final SubLObject body_start = Numbers.add((SubLObject)cure_api.ONE_INTEGER, Sequences.search((SubLObject)cure_api.$str298$_, linkless, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.IDENTITY, (SubLObject)cure_api.ZERO_INTEGER, (SubLObject)cure_api.NIL, Sequences.search(html_macros.$html_body_head$.getGlobalValue(), linkless, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED));
            final SubLObject body_end = Sequences.search(html_macros.$html_body_tail$.getGlobalValue(), linkless, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            body_content = Sequences.subseq(linkless, body_start, body_end);
        }
        finally {
            fact_sheets.$allow_fact_sheet_evaluationsP$.rebind(_prev_bind_3, thread);
        }
        return body_content;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 80467L)
    public static SubLObject term_learner_get_fact_sheet_updates_for_term(final SubLObject concept_id, SubLObject user, SubLObject task) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (task == cure_api.UNPROVIDED) {
            task = cure_api.$current_tl_task$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym299$TERM_LEARNER_GET_FACT_SHEET_UPDATES_FOR_TERM, concept_id, user, task));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym299$TERM_LEARNER_GET_FACT_SHEET_UPDATES_FOR_TERM, concept_id, user, task));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject cycl = document_annotation_widgets.term_learner_object_from_id(concept_id);
        final SubLObject mt = query_mt_for_user_and_task(user, task);
        SubLObject body_content = (SubLObject)cure_api.NIL;
        if (cure_api.NIL != concept_naked_for_factsheetP(cycl, mt)) {
            return (SubLObject)cure_api.$str50$;
        }
        final SubLObject _prev_bind_3 = fact_sheets.$allow_fact_sheet_evaluationsP$.currentBinding(thread);
        try {
            fact_sheets.$allow_fact_sheet_evaluationsP$.bind((SubLObject)cure_api.ZERO_INTEGER, thread);
            final SubLObject v_properties = list_utilities.merge_plist(list_utilities.merge_plist(term_learner_standard_fact_sheet_properties(), term_learner_context_sensitive_fact_sheet_properties(cycl, user, task)), (SubLObject)cure_api.$list300);
            final SubLObject linkless = fact_sheets.get_linkless_fact_sheet_for_term_in_html(cycl, (SubLObject)cure_api.$kw297$NORMAL, (SubLObject)cure_api.$kw20$DEFAULT, (SubLObject)cure_api.$kw20$DEFAULT, v_properties);
            final SubLObject body_start = Numbers.add((SubLObject)cure_api.ONE_INTEGER, Sequences.search((SubLObject)cure_api.$str298$_, linkless, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.IDENTITY, (SubLObject)cure_api.ZERO_INTEGER, (SubLObject)cure_api.NIL, Sequences.search(html_macros.$html_body_head$.getGlobalValue(), linkless, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED));
            final SubLObject body_end = Sequences.search(html_macros.$html_body_tail$.getGlobalValue(), linkless, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            body_content = Sequences.subseq(linkless, body_start, body_end);
        }
        finally {
            fact_sheets.$allow_fact_sheet_evaluationsP$.rebind(_prev_bind_3, thread);
        }
        return body_content;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 81530L)
    public static SubLObject term_learner_standard_fact_sheet_properties() {
        return (SubLObject)cure_api.$list301;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 81658L)
    public static SubLObject term_learner_context_sensitive_fact_sheet_properties(final SubLObject topic, final SubLObject user, SubLObject task) {
        if (cure_api.NIL == task) {
            task = default_task_for_user(user);
        }
        SubLObject v_properties = (SubLObject)cure_api.NIL;
        if (cure_api.NIL != term_learner_prefer_slot_value_fact_sheetsP(topic, user, task)) {
            final SubLObject except_preds = forbidden_slot_value_fact_sheet_category_preds(topic, user, task);
            v_properties = list_utilities.merge_plist(v_properties, (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw302$SLOT_VALUE_PREFERENCE_PATTERN, (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw303$NOT, reader.bq_cons((SubLObject)cure_api.$kw304$OR, except_preds))));
        }
        Errors.warn((SubLObject)cure_api.$str305$Fact_sheet_properties___S, v_properties);
        return v_properties;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 82192L)
    public static SubLObject term_learner_prefer_slot_value_fact_sheetsP(final SubLObject topic, final SubLObject user, final SubLObject task) {
        return cyc_kernel.closed_query_success_token_p(inference_kernel.new_cyc_query((SubLObject)ConsesLow.list(constants_high.find_constant((SubLObject)cure_api.$str306$preferSlotValueFormatForTermLearn), topic, user, task), cure_api.$const64$InferencePSC, (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$kw307$ALLOW_ABNORMALITY_CHECKING_, cure_api.NIL, cure_api.$kw308$MAX_PROBLEM_COUNT, cure_api.$int309$1000, cure_api.$kw310$EVALUATE_SUBL_ALLOWED_, cure_api.NIL, cure_api.$kw311$NEW_TERMS_ALLOWED_, cure_api.NIL, cure_api.$kw312$COMPUTE_ANSWER_JUSTIFICATIONS_, cure_api.NIL, cure_api.$kw313$MAX_NUMBER, cure_api.ONE_INTEGER, cure_api.$kw314$MAX_TRANSFORMATION_DEPTH, cure_api.ONE_INTEGER, cure_api.$kw315$MAX_PROOF_DEPTH, cure_api.ONE_INTEGER, cure_api.$kw316$CONTINUABLE_, cure_api.NIL, cure_api.$kw317$PRODUCTIVITY_LIMIT, cure_api.$int318$100 })));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 82725L)
    public static SubLObject forbidden_slot_value_fact_sheet_category_preds(final SubLObject topic, final SubLObject user, final SubLObject task) {
        return ask_utilities.query_variable((SubLObject)cure_api.$sym112$_PRED, (SubLObject)ConsesLow.list(constants_high.find_constant((SubLObject)cure_api.$str319$forbidSlotValueFormatForTermLearn), (SubLObject)cure_api.$sym112$_PRED, topic, user, task), cure_api.$const64$InferencePSC, (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$kw307$ALLOW_ABNORMALITY_CHECKING_, cure_api.NIL, cure_api.$kw308$MAX_PROBLEM_COUNT, cure_api.$int309$1000, cure_api.$kw310$EVALUATE_SUBL_ALLOWED_, cure_api.NIL, cure_api.$kw311$NEW_TERMS_ALLOWED_, cure_api.NIL, cure_api.$kw312$COMPUTE_ANSWER_JUSTIFICATIONS_, cure_api.NIL, cure_api.$kw314$MAX_TRANSFORMATION_DEPTH, cure_api.ONE_INTEGER, cure_api.$kw315$MAX_PROOF_DEPTH, cure_api.ONE_INTEGER, cure_api.$kw320$ANSWER_LANGUAGE, cure_api.$kw321$HL, cure_api.$kw316$CONTINUABLE_, cure_api.NIL, cure_api.$kw317$PRODUCTIVITY_LIMIT, cure_api.$int318$100 }));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 83275L)
    public static SubLObject concept_naked_for_factsheetP(final SubLObject cycl, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)cure_api.NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt, thread);
            final SubLObject reified_cycl = narts_high.nart_substitute(cycl);
            result = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == forts.fort_p(reified_cycl) || cure_api.NIL != subl_promotions.memberP(isa.asserted_isa(reified_cycl, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.$list322, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED));
        }
        finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 85028L)
    public static SubLObject term_learner_unmodifiable_statusP(final SubLObject code) {
        return subl_promotions.memberP(code, cure_api.$term_learner_unmodifiable$.getGlobalValue(), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 85138L)
    public static SubLObject term_learner_known_statusP(final SubLObject code) {
        return subl_promotions.memberP(code, (SubLObject)ConsesLow.list(cure_api.$term_learner_known_not_removable$.getGlobalValue(), cure_api.$term_learner_known_derived$.getGlobalValue(), cure_api.$term_learner_known_removable$.getGlobalValue()), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 85315L)
    public static SubLObject term_learner_fact_status(final SubLObject term_string, final SubLObject term_id, final SubLObject sentence_template_id, final SubLObject justifications, final SubLObject url, final SubLObject doc_title, final SubLObject user) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym323$TERM_LEARNER_FACT_STATUS, term_string, term_id, sentence_template_id, justifications, url, doc_title, user));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym323$TERM_LEARNER_FACT_STATUS, term_string, term_id, sentence_template_id, justifications, url, doc_title, user));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject mt = find_query_mt_from_justifications(justifications, user);
        final SubLObject sentence_template = document_annotation_widgets.term_learner_object_from_id(sentence_template_id);
        final SubLObject sentence = get_sentence_from_template(term_string, term_id, sentence_template);
        final SubLObject pred = cycl_utilities.formula_arg0(sentence);
        final SubLObject specific_sentence = pred.eql(cure_api.$const75$is_Underspecified) ? cure_specify_is(sentence, mt) : sentence;
        if (cure_api.NIL != cycl_utilities.expression_find((SubLObject)cure_api.$kw324$TERM, sentence_template, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED) && term_id.equal((SubLObject)cure_api.$str325$null)) {
            return (SubLObject)ConsesLow.list((SubLObject)cure_api.ZERO_INTEGER, (SubLObject)cure_api.$str50$);
        }
        return term_learner_fact_status_int(specific_sentence, mt, user);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 86358L)
    public static SubLObject cure_specify_is(final SubLObject sentence, final SubLObject mt) {
        if (cure_api.NIL != fort_types_interface.collectionP(cycl_utilities.formula_arg2(sentence, (SubLObject)cure_api.UNPROVIDED))) {
            return cycl_utilities.formula_subst(cure_api.$const76$genls, cure_api.$const75$is_Underspecified, sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        }
        if (cure_api.NIL != kb_accessors.individualP(cycl_utilities.formula_arg2(sentence, (SubLObject)cure_api.UNPROVIDED))) {
            return cycl_utilities.formula_subst(cure_api.$const55$isa, cure_api.$const75$is_Underspecified, sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        }
        return sentence;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 86715L)
    public static SubLObject find_query_mt_from_justifications(final SubLObject justs, SubLObject user) {
        if (user == cure_api.UNPROVIDED) {
            user = (SubLObject)cure_api.NIL;
        }
        final SubLObject task = default_task_for_user(user);
        SubLObject mts = (SubLObject)ConsesLow.list(query_mt_for_task(task));
        SubLObject cdolist_list_var = justs;
        SubLObject just = (SubLObject)cure_api.NIL;
        just = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            final SubLObject assert_mt = term_learner_justification_assert_mt(just);
            if (cure_api.NIL != assert_mt) {
                mts = (SubLObject)ConsesLow.cons(assert_mt, mts);
            }
            cdolist_list_var = cdolist_list_var.rest();
            just = cdolist_list_var.first();
        }
        return (SubLObject)((cure_api.NIL != list_utilities.lengthG(mts, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.UNPROVIDED)) ? ConsesLow.cons(cure_api.$const293$MtUnionFn, mts) : mts.first());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 87105L)
    public static SubLObject clear_term_learner_fact_status_int() {
        final SubLObject cs = cure_api.$term_learner_fact_status_int_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 87105L)
    public static SubLObject remove_term_learner_fact_status_int(final SubLObject sentence, final SubLObject mt, SubLObject user) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$term_learner_fact_status_int_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(sentence, mt, user), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 87105L)
    public static SubLObject term_learner_fact_status_int_internal(final SubLObject sentence, final SubLObject mt, final SubLObject user) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)cure_api.NIL;
        if (cure_api.NIL != el_utilities.sentence_free_variables(sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
            return (SubLObject)ConsesLow.list(cure_api.$term_learner_incomplete$.getGlobalValue(), (SubLObject)cure_api.$str50$);
        }
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            final SubLObject knownP = term_learner_knownP(sentence, mt);
            final SubLObject assertibleP = (SubLObject)((cure_api.NIL != knownP) ? cure_api.NIL : term_learner_sentence_assertibleP(sentence, mt));
            final SubLObject removableP = (SubLObject)((cure_api.NIL != knownP) ? sentence_removable_by_userP(sentence, user) : cure_api.NIL);
            final SubLObject derivedP = (SubLObject)((cure_api.NIL != knownP) ? derived_sentenceP(sentence, user) : cure_api.NIL);
            if (cure_api.NIL != knownP && cure_api.NIL != removableP) {
                result = (SubLObject)ConsesLow.list(cure_api.$term_learner_known_removable$.getGlobalValue(), (SubLObject)cure_api.$str50$);
            }
            else if (cure_api.NIL != knownP && cure_api.NIL == removableP) {
                result = (SubLObject)ConsesLow.list(cure_api.$term_learner_known_not_removable$.getGlobalValue(), (SubLObject)cure_api.$str50$);
            }
            else if (cure_api.NIL != knownP && cure_api.NIL != derivedP) {
                final SubLObject justification = (SubLObject)cure_api.$str327$Derived_from_other_assertions;
                result = (SubLObject)ConsesLow.list(cure_api.$term_learner_known_derived$.getGlobalValue(), justification);
            }
            else if (cure_api.NIL == knownP && cure_api.NIL != assertibleP) {
                result = (SubLObject)ConsesLow.list(cure_api.$term_learner_unknown_assertible$.getGlobalValue(), (SubLObject)cure_api.$str50$);
            }
            else if (cure_api.NIL == knownP && cure_api.NIL == assertibleP) {
                final SubLObject explanation_string = wff.explanation_of_why_not_wff_assert(sentence, mt, (SubLObject)cure_api.UNPROVIDED);
                SubLObject escaped_explanation = (SubLObject)cure_api.NIL;
                if (explanation_string.isString()) {
                    SubLObject stream = (SubLObject)cure_api.NIL;
                    try {
                        stream = streams_high.make_private_string_output_stream();
                        final SubLObject _prev_bind_0_$46 = xml_vars.$xml_stream$.currentBinding(thread);
                        try {
                            xml_vars.$xml_stream$.bind(stream, thread);
                            xml_utilities.xml_write_wXescaped_special_chars(explanation_string);
                        }
                        finally {
                            xml_vars.$xml_stream$.rebind(_prev_bind_0_$46, thread);
                        }
                        escaped_explanation = streams_high.get_output_stream_string(stream);
                    }
                    finally {
                        final SubLObject _prev_bind_0_$47 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$47, thread);
                        }
                    }
                }
                else {
                    escaped_explanation = (SubLObject)cure_api.$str50$;
                }
                result = (SubLObject)ConsesLow.list(cure_api.$term_learner_impossible$.getGlobalValue(), escaped_explanation);
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 87105L)
    public static SubLObject term_learner_fact_status_int(final SubLObject sentence, final SubLObject mt, SubLObject user) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        SubLObject caching_state = cure_api.$term_learner_fact_status_int_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym326$TERM_LEARNER_FACT_STATUS_INT, (SubLObject)cure_api.$sym328$_TERM_LEARNER_FACT_STATUS_INT_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.THREE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym329$CLEAR_TERM_LEARNER_FACT_STATUS_INT);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(sentence, mt, user);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (sentence.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && user.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(term_learner_fact_status_int_internal(sentence, mt, user)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(sentence, mt, user));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 88877L)
    public static SubLObject term_learner_knownP(final SubLObject sentence, final SubLObject mt) {
        return (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL != el_utilities.closedP(sentence, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL != rkf_query_utilities.rkf_known(sentence, mt, (SubLObject)cure_api.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 88993L)
    public static SubLObject sentence_removable_by_userP(final SubLObject sentence, final SubLObject user) {
        final SubLObject user_can_arbitrarily_delete = cure_user_has_arbitrary_deletion_privileges(user);
        final SubLObject asserts = term_learner_find_visible_assertions_cycl(sentence, (SubLObject)cure_api.UNPROVIDED);
        SubLObject must_stay = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == asserts);
        if (cure_api.NIL == must_stay) {
            SubLObject csome_list_var = asserts;
            SubLObject v_assert = (SubLObject)cure_api.NIL;
            v_assert = csome_list_var.first();
            while (cure_api.NIL == must_stay && cure_api.NIL != csome_list_var) {
                if (cure_api.NIL != tms.independently_deducible_assertionP(v_assert) && cure_api.NIL == user_can_arbitrarily_delete && cure_api.NIL == removal_modules_assertion_mt.assertion_asserted_byP(v_assert, user)) {
                    must_stay = (SubLObject)cure_api.T;
                }
                csome_list_var = csome_list_var.rest();
                v_assert = csome_list_var.first();
            }
        }
        return (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == must_stay);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 89598L)
    public static SubLObject cure_user_has_arbitrary_deletion_privileges(SubLObject user) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        final SubLObject task = default_task_for_user(user);
        return query_library_utils.allow_arbitrary_assertion_deletion(task);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 89792L)
    public static SubLObject derived_sentenceP(final SubLObject sentence, final SubLObject user) {
        final SubLObject asserts = term_learner_find_visible_assertions_cycl(sentence, (SubLObject)cure_api.UNPROVIDED);
        SubLObject derived = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == asserts);
        if (cure_api.NIL == derived) {
            SubLObject csome_list_var = asserts;
            SubLObject v_assert = (SubLObject)cure_api.NIL;
            v_assert = csome_list_var.first();
            while (cure_api.NIL == derived && cure_api.NIL != csome_list_var) {
                if (cure_api.NIL != assertions_high.deduced_assertionP(v_assert)) {
                    derived = (SubLObject)cure_api.T;
                }
                csome_list_var = csome_list_var.rest();
                v_assert = csome_list_var.first();
            }
        }
        return derived;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 90205L)
    public static SubLObject term_learner_find_visible_assertions_cycl_internal(final SubLObject sentence, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        return czer_meta.find_visible_assertions_cycl(sentence, mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 90205L)
    public static SubLObject term_learner_find_visible_assertions_cycl(final SubLObject sentence, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = (SubLObject)cure_api.NIL;
        if (cure_api.NIL == v_memoization_state) {
            return term_learner_find_visible_assertions_cycl_internal(sentence, mt);
        }
        caching_state = memoization_state.memoization_state_lookup(v_memoization_state, (SubLObject)cure_api.$sym330$TERM_LEARNER_FIND_VISIBLE_ASSERTIONS_CYCL, (SubLObject)cure_api.UNPROVIDED);
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), (SubLObject)cure_api.$sym330$TERM_LEARNER_FIND_VISIBLE_ASSERTIONS_CYCL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED);
            memoization_state.memoization_state_put(v_memoization_state, (SubLObject)cure_api.$sym330$TERM_LEARNER_FIND_VISIBLE_ASSERTIONS_CYCL, caching_state);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(sentence, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (sentence.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(thread.resetMultipleValues(), (SubLObject)Values.multiple_value_list(term_learner_find_visible_assertions_cycl_internal(sentence, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(sentence, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 90646L)
    public static SubLObject xml_term_learner_get_followups_for_term(SubLObject args) {
        if (args == cure_api.UNPROVIDED) {
            args = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject term_id = html_utilities.html_extract_input((SubLObject)cure_api.$str332$conceptId, args);
        final SubLObject max_s = html_utilities.html_extract_input((SubLObject)cure_api.$str333$max, args);
        final SubLObject max = (SubLObject)(max_s.isString() ? reader.read_from_string_ignoring_errors(max_s, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED) : cure_api.ZERO_INTEGER);
        final SubLObject questions_only_s = html_utilities.html_extract_input((SubLObject)cure_api.$str334$questionsOnly, args);
        final SubLObject questions_only = Equality.equal(questions_only_s, (SubLObject)cure_api.$str335$true);
        final SubLObject unknown_only_s = html_utilities.html_extract_input((SubLObject)cure_api.$str336$unknownOnly, args);
        final SubLObject unknown_only = Equality.equal(unknown_only_s, (SubLObject)cure_api.$str335$true);
        final SubLObject user_s = html_utilities.html_extract_input((SubLObject)cure_api.$str337$user, args);
        final SubLObject user = user_s.isString() ? reader.read_from_string_ignoring_errors(user_s, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED) : ((cure_api.NIL != api_control_vars.$the_cyclist$.getDynamicValue(thread)) ? api_control_vars.$the_cyclist$.getDynamicValue(thread) : cure_api.$const338$CycAdministrator);
        final SubLObject ignore_q_list_s = html_utilities.html_extract_input((SubLObject)cure_api.$str339$ignoreList, args);
        final SubLObject ignore_q_list = (SubLObject)((cure_api.NIL != string_utilities.non_empty_stringP(ignore_q_list_s)) ? Mapping.mapcar((SubLObject)cure_api.$sym224$MAYBE_FIND_OBJECT_BY_COMPACT_HL_EXTERNAL_ID_STRING, string_utilities.split_string(ignore_q_list_s, (SubLObject)cure_api.UNPROVIDED)) : cure_api.NIL);
        final SubLObject followups = term_learner_get_followups_for_term(term_id, user, max, unknown_only, questions_only, ignore_q_list);
        final SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
        try {
            xml_vars.$xml_stream$.bind(html_macros.$html_stream$.getDynamicValue(thread), thread);
            xml_output_term_types(followups);
        }
        finally {
            xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 91975L)
    public static SubLObject term_learner_get_followups_for_cycl_term(final SubLObject v_term, SubLObject user, SubLObject limit, SubLObject unknown_onlyP, SubLObject questions_onlyP, SubLObject ignore_list) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (limit == cure_api.UNPROVIDED) {
            limit = (SubLObject)cure_api.NIL;
        }
        if (unknown_onlyP == cure_api.UNPROVIDED) {
            unknown_onlyP = (SubLObject)cure_api.NIL;
        }
        if (questions_onlyP == cure_api.UNPROVIDED) {
            questions_onlyP = (SubLObject)cure_api.NIL;
        }
        if (ignore_list == cure_api.UNPROVIDED) {
            ignore_list = (SubLObject)cure_api.NIL;
        }
        return term_learner_get_followups_for_term(kb_utilities.compact_hl_external_id_string(v_term), user, limit, unknown_onlyP, questions_onlyP, ignore_list);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 92257L)
    public static SubLObject term_learner_get_followups_for_term(final SubLObject term_id, SubLObject user, SubLObject limit, SubLObject unknown_onlyP, SubLObject questions_onlyP, SubLObject ignore_list) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (limit == cure_api.UNPROVIDED) {
            limit = (SubLObject)cure_api.NIL;
        }
        if (unknown_onlyP == cure_api.UNPROVIDED) {
            unknown_onlyP = (SubLObject)cure_api.NIL;
        }
        if (questions_onlyP == cure_api.UNPROVIDED) {
            questions_onlyP = (SubLObject)cure_api.NIL;
        }
        if (ignore_list == cure_api.UNPROVIDED) {
            ignore_list = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym342$TERM_LEARNER_GET_FOLLOWUPS_FOR_TERM, term_id, user, limit, unknown_onlyP, questions_onlyP, ignore_list));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym342$TERM_LEARNER_GET_FOLLOWUPS_FOR_TERM, term_id, user, limit, unknown_onlyP, questions_onlyP, ignore_list));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        SubLObject sorted_result = (SubLObject)cure_api.NIL;
        final SubLObject already_resourcing_p = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
        try {
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_resource_limit(already_resourcing_p, (SubLObject)cure_api.SIX_INTEGER), thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(sbhl_marking_vars.possibly_new_marking_resource(already_resourcing_p), thread);
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind((SubLObject)cure_api.T, thread);
            final SubLObject local_state;
            final SubLObject state = local_state = memoization_state.possibly_new_memoization_state();
            final SubLObject _prev_bind_0_$48 = memoization_state.$memoization_state$.currentBinding(thread);
            try {
                memoization_state.$memoization_state$.bind(local_state, thread);
                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                try {
                    final SubLObject _prev_bind_0_$49 = api_control_vars.$the_cyclist$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$50 = pph_vars.$pph_addressee$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$51 = pph_vars.$pph_use_indexical_datesP$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = cure_api.$current_tl_task$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = cae_query_search.$current_cae_task$.currentBinding(thread);
                    try {
                        api_control_vars.$the_cyclist$.bind(user, thread);
                        pph_vars.$pph_addressee$.bind(user, thread);
                        pph_vars.$pph_use_indexical_datesP$.bind((SubLObject)cure_api.T, thread);
                        cure_api.$current_tl_task$.bind(default_task_for_user(user), thread);
                        cae_query_search.$current_cae_task$.bind(cure_api.$current_tl_task$.getDynamicValue(thread), thread);
                        final SubLObject cycl = document_annotation_widgets.term_learner_object_from_id(term_id);
                        final SubLObject followup_mt = followup_query_mt_for_userXtask(user, cure_api.$current_tl_task$.getDynamicValue(thread));
                        final SubLObject query_mt = query_mt_for_task(cure_api.$current_tl_task$.getDynamicValue(thread));
                        final SubLObject result = term_learner_unsorted_fragments_for_term(cycl, followup_mt, query_mt, unknown_onlyP, questions_onlyP, ignore_list);
                        final SubLObject sort_style = (SubLObject)(limit.eql((SubLObject)cure_api.ONE_INTEGER) ? cure_api.$kw343$UNCATEGORIZED : cure_api.$kw297$NORMAL);
                        sorted_result = sort_followups(result, cycl, followup_mt, query_library_utils.cae_default_paraphrase_mt(cure_api.$current_tl_task$.getDynamicValue(thread)), sort_style);
                        if (cure_api.NIL != limit && cure_api.ZERO_INTEGER.numL(limit) && limit.numL(Sequences.length(result))) {
                            SubLObject doneP = (SubLObject)cure_api.NIL;
                            SubLObject current_count = (SubLObject)cure_api.ZERO_INTEGER;
                            SubLObject temp_result = (SubLObject)cure_api.NIL;
                            if (cure_api.NIL == doneP) {
                                SubLObject csome_list_var = sorted_result;
                                SubLObject category = (SubLObject)cure_api.NIL;
                                category = csome_list_var.first();
                                while (cure_api.NIL == doneP && cure_api.NIL != csome_list_var) {
                                    final SubLObject followups = conses_high.getf(category, (SubLObject)cure_api.$kw344$TYPES, (SubLObject)cure_api.UNPROVIDED);
                                    final SubLObject number_needed = Numbers.subtract(limit, current_count);
                                    if (current_count.numGE(limit)) {
                                        doneP = (SubLObject)cure_api.T;
                                    }
                                    else if (Sequences.length(followups).numL(number_needed)) {
                                        temp_result = (SubLObject)ConsesLow.cons(category, temp_result);
                                        current_count = Numbers.add(current_count, Sequences.length(followups));
                                    }
                                    else {
                                        temp_result = (SubLObject)ConsesLow.cons(conses_high.putf(category, (SubLObject)cure_api.$kw344$TYPES, list_utilities.first_n(number_needed, followups)), temp_result);
                                        current_count = Numbers.add(current_count, Sequences.length(followups));
                                    }
                                    csome_list_var = csome_list_var.rest();
                                    category = csome_list_var.first();
                                }
                            }
                            sorted_result = Sequences.nreverse(temp_result);
                        }
                    }
                    finally {
                        cae_query_search.$current_cae_task$.rebind(_prev_bind_7, thread);
                        cure_api.$current_tl_task$.rebind(_prev_bind_6, thread);
                        pph_vars.$pph_use_indexical_datesP$.rebind(_prev_bind_2_$51, thread);
                        pph_vars.$pph_addressee$.rebind(_prev_bind_1_$50, thread);
                        api_control_vars.$the_cyclist$.rebind(_prev_bind_0_$49, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$50 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$50, thread);
                    }
                }
            }
            finally {
                memoization_state.$memoization_state$.rebind(_prev_bind_0_$48, thread);
            }
        }
        finally {
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_5, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_4, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
        }
        return sorted_result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 94768L)
    public static SubLObject term_learner_unsorted_fragments_for_term(final SubLObject v_term, final SubLObject followup_mt, final SubLObject query_mt, final SubLObject unknown_onlyP, final SubLObject questions_onlyP, final SubLObject ignore_list) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject term_phrase = term_learner_cycl_term_to_nl_string(v_term, (SubLObject)cure_api.UNPROVIDED).first();
        final SubLObject _prev_bind_0 = cae_query_search.$cae_query_search_skip_nl_generation$.currentBinding(thread);
        try {
            cae_query_search.$cae_query_search_skip_nl_generation$.bind((SubLObject)cure_api.T, thread);
            final SubLObject raw_fragments = cae_query_search.get_fragments_for_terms((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(term_phrase, v_term)), (SubLObject)cure_api.NIL, followup_mt, (SubLObject)cure_api.$kw345$BLANKS, (SubLObject)cure_api.NIL, (SubLObject)cure_api.UNPROVIDED);
            SubLObject result = (SubLObject)cure_api.NIL;
            SubLObject cdolist_list_var = raw_fragments;
            SubLObject fragment = (SubLObject)cure_api.NIL;
            fragment = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                final SubLObject fragment_cycl = fragment.first();
                final SubLObject focal_arg_poses = cycl_utilities.arg_positions_dfs(v_term, fragment_cycl, (SubLObject)cure_api.UNPROVIDED);
                if (cure_api.NIL != cycl_utilities.expression_find(v_term, fragment_cycl, (SubLObject)cure_api.T, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL == subl_promotions.memberP(fragment_cycl, ignore_list, (SubLObject)cure_api.$sym346$EQUALS_EL_, (SubLObject)cure_api.UNPROVIDED)) {
                    SubLObject cdolist_list_var_$53 = term_learner_types_for_fragment(focal_arg_poses, fragment, term_phrase, cure_default_generation_mt((SubLObject)cure_api.UNPROVIDED), query_mt, followup_mt, unknown_onlyP, questions_onlyP);
                    SubLObject type = (SubLObject)cure_api.NIL;
                    type = cdolist_list_var_$53.first();
                    while (cure_api.NIL != cdolist_list_var_$53) {
                        if (!cure_api.$term_learner_impossible$.getGlobalValue().equal(conses_high.getf(type, (SubLObject)cure_api.$kw123$STATUS_CODE, (SubLObject)cure_api.UNPROVIDED))) {
                            result = (SubLObject)ConsesLow.cons(type, result);
                        }
                        cdolist_list_var_$53 = cdolist_list_var_$53.rest();
                        type = cdolist_list_var_$53.first();
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                fragment = cdolist_list_var.first();
            }
            return result;
        }
        finally {
            cae_query_search.$cae_query_search_skip_nl_generation$.rebind(_prev_bind_0, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 95703L)
    public static SubLObject sort_followups(SubLObject followups, final SubLObject focal_term, final SubLObject mt, SubLObject paraphrase_mt, SubLObject sort_style) {
        if (paraphrase_mt == cure_api.UNPROVIDED) {
            paraphrase_mt = pph_vars.pph_language_mt();
        }
        if (sort_style == cure_api.UNPROVIDED) {
            sort_style = (SubLObject)cure_api.$kw297$NORMAL;
        }
        SubLObject categorized_followups = (SubLObject)cure_api.NIL;
        SubLObject ret_value = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = followups;
        SubLObject followup = (SubLObject)cure_api.NIL;
        followup = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject categories_and_types = (SubLObject)((sort_style == cure_api.$kw343$UNCATEGORIZED) ? cure_api.NIL : categories_and_types_for_sentence_and_term(conses_high.getf(followup, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED), focal_term, mt));
            final SubLObject new_followup = conses_high.putf(followup, (SubLObject)cure_api.$kw347$CATEGORY_INFO, categories_and_types);
            if (cure_api.NIL == categories_and_types) {
                categories_and_types = (SubLObject)ConsesLow.list((SubLObject)cure_api.NIL);
            }
            SubLObject cdolist_list_var_$54 = categories_and_types;
            SubLObject category_and_type = (SubLObject)cure_api.NIL;
            category_and_type = cdolist_list_var_$54.first();
            while (cure_api.NIL != cdolist_list_var_$54) {
                categorized_followups = list_utilities.alist_push(categorized_followups, category_and_type.first(), new_followup, (SubLObject)cure_api.UNPROVIDED);
                cdolist_list_var_$54 = cdolist_list_var_$54.rest();
                category_and_type = cdolist_list_var_$54.first();
            }
            cdolist_list_var = cdolist_list_var.rest();
            followup = cdolist_list_var.first();
        }
        followups = (SubLObject)cure_api.NIL;
        categorized_followups = (cdolist_list_var = sort_by_category(categorized_followups, focal_term, mt));
        SubLObject cons = (SubLObject)cure_api.NIL;
        cons = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = cons;
            SubLObject category_pred = (SubLObject)cure_api.NIL;
            SubLObject category_followups = (SubLObject)cure_api.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list348);
            category_pred = current.first();
            current = (category_followups = current.rest());
            final SubLObject sorted_followups = Sort.sort(category_followups, (SubLObject)cure_api.$sym349$HIGHER_PRIORITY_FOLLOWUP_IN_CATEGORY, (SubLObject)cure_api.UNPROVIDED);
            final SubLObject category_name = term_learner_category_label(category_pred, paraphrase_mt);
            followups = Sequences.cconcatenate(followups, sorted_followups);
            ret_value = Sequences.cconcatenate(ret_value, (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)cure_api.$kw350$CATEGORY, category_pred, (SubLObject)cure_api.$kw351$CATEGORY_NL, category_name, (SubLObject)cure_api.$kw344$TYPES, sorted_followups)));
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        return ret_value;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 97349L)
    public static SubLObject clear_term_learner_category_label() {
        final SubLObject cs = cure_api.$term_learner_category_label_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 97349L)
    public static SubLObject remove_term_learner_category_label(final SubLObject category_pred, SubLObject nl_mt) {
        if (nl_mt == cure_api.UNPROVIDED) {
            nl_mt = cure_api.$const352$EnglishParaphraseMt;
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$term_learner_category_label_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(category_pred, nl_mt), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 97349L)
    public static SubLObject term_learner_category_label_internal(final SubLObject category_pred, final SubLObject nl_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL == category_pred) {
            return (SubLObject)cure_api.$str354$Advanced_Info;
        }
        SubLObject known_label = (SubLObject)cure_api.NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(nl_mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            final SubLObject pred_var = cure_api.$const355$termSummaryPredicateLabel;
            if (cure_api.NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(category_pred, (SubLObject)cure_api.ONE_INTEGER, pred_var)) {
                final SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(category_pred, (SubLObject)cure_api.ONE_INTEGER, pred_var);
                SubLObject done_var = (SubLObject)cure_api.NIL;
                final SubLObject token_var = (SubLObject)cure_api.NIL;
                while (cure_api.NIL == done_var) {
                    final SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                    final SubLObject valid = (SubLObject)SubLObjectFactory.makeBoolean(!token_var.eql(final_index_spec));
                    if (cure_api.NIL != valid) {
                        SubLObject final_index_iterator = (SubLObject)cure_api.NIL;
                        try {
                            final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, (SubLObject)cure_api.$kw356$GAF, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL);
                            SubLObject done_var_$55 = (SubLObject)cure_api.NIL;
                            final SubLObject token_var_$56 = (SubLObject)cure_api.NIL;
                            while (cure_api.NIL == done_var_$55) {
                                final SubLObject v_assert = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$56);
                                final SubLObject valid_$57 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var_$56.eql(v_assert));
                                if (cure_api.NIL != valid_$57) {
                                    if (cure_api.NIL == known_label) {
                                        known_label = cycl_utilities.formula_arg2(v_assert, (SubLObject)cure_api.UNPROVIDED);
                                    }
                                    else if (kb_mapping_utilities.fpred_value_in_relevant_mts(v_assert, cure_api.$const357$genStringAssertion, nl_mt, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.UNPROVIDED).equal(category_pred)) {
                                        known_label = cycl_utilities.formula_arg2(v_assert, (SubLObject)cure_api.UNPROVIDED);
                                    }
                                }
                                done_var_$55 = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == valid_$57);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$58 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (cure_api.NIL != final_index_iterator) {
                                    kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$58, thread);
                            }
                        }
                    }
                    done_var = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == valid);
                }
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)((cure_api.NIL != known_label) ? known_label : cure_api.$str354$Advanced_Info);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 97349L)
    public static SubLObject term_learner_category_label(final SubLObject category_pred, SubLObject nl_mt) {
        if (nl_mt == cure_api.UNPROVIDED) {
            nl_mt = cure_api.$const352$EnglishParaphraseMt;
        }
        SubLObject caching_state = cure_api.$term_learner_category_label_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym353$TERM_LEARNER_CATEGORY_LABEL, (SubLObject)cure_api.$sym358$_TERM_LEARNER_CATEGORY_LABEL_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym359$CLEAR_TERM_LEARNER_CATEGORY_LABEL);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(category_pred, nl_mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (category_pred.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && nl_mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(term_learner_category_label_internal(category_pred, nl_mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(category_pred, nl_mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 97989L)
    public static SubLObject clear_get_followup_categories_for_type() {
        final SubLObject cs = cure_api.$get_followup_categories_for_type_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 97989L)
    public static SubLObject remove_get_followup_categories_for_type(final SubLObject coll, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$get_followup_categories_for_type_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(coll, mt), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 97989L)
    public static SubLObject get_followup_categories_for_type_internal(final SubLObject coll, final SubLObject mt) {
        return ask_utilities.query_variable((SubLObject)cure_api.$sym361$_CAT, (SubLObject)ConsesLow.list(cure_api.$const362$subtopicCollectionForCategory, (SubLObject)cure_api.$sym361$_CAT, coll), mt, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 97989L)
    public static SubLObject get_followup_categories_for_type(final SubLObject coll, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        SubLObject caching_state = cure_api.$get_followup_categories_for_type_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym360$GET_FOLLOWUP_CATEGORIES_FOR_TYPE, (SubLObject)cure_api.$sym363$_GET_FOLLOWUP_CATEGORIES_FOR_TYPE_CACHING_STATE_, (SubLObject)cure_api.$int364$1024, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym365$CLEAR_GET_FOLLOWUP_CATEGORIES_FOR_TYPE);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(coll, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (coll.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_followup_categories_for_type_internal(coll, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(coll, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 98214L)
    public static SubLObject clear_get_pred_list_order_for_type() {
        final SubLObject cs = cure_api.$get_pred_list_order_for_type_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 98214L)
    public static SubLObject remove_get_pred_list_order_for_type(final SubLObject type, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$get_pred_list_order_for_type_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(type, mt), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 98214L)
    public static SubLObject get_pred_list_order_for_type_internal(final SubLObject type, final SubLObject mt) {
        return cycl_utilities.formula_args(ask_utilities.query_variable((SubLObject)cure_api.$sym367$_PRED_LIST, (SubLObject)ConsesLow.listS(cure_api.$const368$summaryPredicateWRTSetOrCollectio, type, (SubLObject)cure_api.$list369), mt, (SubLObject)cure_api.UNPROVIDED).first(), (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 98214L)
    public static SubLObject get_pred_list_order_for_type(final SubLObject type, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        SubLObject caching_state = cure_api.$get_pred_list_order_for_type_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym366$GET_PRED_LIST_ORDER_FOR_TYPE, (SubLObject)cure_api.$sym370$_GET_PRED_LIST_ORDER_FOR_TYPE_CACHING_STATE_, (SubLObject)cure_api.$int364$1024, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym371$CLEAR_GET_PRED_LIST_ORDER_FOR_TYPE);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(type, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (type.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_pred_list_order_for_type_internal(type, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(type, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 98495L)
    public static SubLObject categories_and_types_for_sentence_and_term(final SubLObject sentence, final SubLObject focal_term, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        final SubLObject temp_sentence = substitute_arg_constraints_for_vars(sentence, mt);
        final SubLObject non_negated = cycl_utilities.formula_arg0(temp_sentence).eql(cure_api.$const372$not) ? cycl_utilities.formula_arg1(temp_sentence, (SubLObject)cure_api.UNPROVIDED) : temp_sentence;
        return categories_and_types_for_sentence_and_term_int(non_negated, focal_term, mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 98887L)
    public static SubLObject substitute_arg_constraints_for_vars(SubLObject sentence, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            SubLObject cdolist_list_var;
            final SubLObject var_positions = cdolist_list_var = cycl_utilities.arg_positions_if_dfs((SubLObject)cure_api.$sym373$EL_VARIABLE_P, sentence, (SubLObject)cure_api.UNPROVIDED);
            SubLObject var_position = (SubLObject)cure_api.NIL;
            var_position = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                final SubLObject relation = cycl_utilities.formula_arg0(cycl_utilities.formula_arg_position(sentence, conses_high.butlast(var_position, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED));
                final SubLObject arg_num = conses_high.last(var_position, (SubLObject)cure_api.UNPROVIDED).first();
                final SubLObject arg_genl = substitutable_arg_constraint_for_reln(relation, arg_num);
                sentence = cycl_utilities.formula_arg_position_subst(arg_genl, var_position, sentence);
                cdolist_list_var = cdolist_list_var.rest();
                var_position = cdolist_list_var.first();
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return sentence;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 99518L)
    public static SubLObject clear_substitutable_arg_constraint_for_reln() {
        final SubLObject cs = cure_api.$substitutable_arg_constraint_for_reln_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 99518L)
    public static SubLObject remove_substitutable_arg_constraint_for_reln(final SubLObject reln, final SubLObject arg_num) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$substitutable_arg_constraint_for_reln_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(reln, arg_num), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 99518L)
    public static SubLObject substitutable_arg_constraint_for_reln_internal(final SubLObject reln, final SubLObject arg_num) {
        final SubLObject base_genls = ask_utilities.query_variable((SubLObject)cure_api.$sym375$_COL, (SubLObject)ConsesLow.listS(cure_api.$const376$argGenl, reln, arg_num, (SubLObject)cure_api.$list377), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject result = (cure_api.NIL != base_genls) ? base_genls.first() : cure_api.$const38$Thing;
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 99518L)
    public static SubLObject substitutable_arg_constraint_for_reln(final SubLObject reln, final SubLObject arg_num) {
        SubLObject caching_state = cure_api.$substitutable_arg_constraint_for_reln_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym374$SUBSTITUTABLE_ARG_CONSTRAINT_FOR_RELN, (SubLObject)cure_api.$sym378$_SUBSTITUTABLE_ARG_CONSTRAINT_FOR_RELN_CACHING_STATE_, (SubLObject)cure_api.$int379$256, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym380$CLEAR_SUBSTITUTABLE_ARG_CONSTRAINT_FOR_RELN);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(reln, arg_num);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (reln.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && arg_num.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(substitutable_arg_constraint_for_reln_internal(reln, arg_num)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(reln, arg_num));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 99807L)
    public static SubLObject categories_and_types_for_sentence_and_term_int(final SubLObject sentence, final SubLObject focal_term, final SubLObject mt) {
        return categories_and_types_for_sentence_and_term_int_via_indexing(sentence, focal_term, mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 99996L)
    public static SubLObject categories_and_types_for_sentence_and_term_int_via_query(final SubLObject sentence, final SubLObject focal_term, final SubLObject mt) {
        return ask_utilities.query_template((SubLObject)cure_api.$list381, (SubLObject)ConsesLow.list(cure_api.$const285$thereExists, (SubLObject)cure_api.$sym112$_PRED, (SubLObject)ConsesLow.list(cure_api.$const285$thereExists, (SubLObject)cure_api.$sym382$_N, (SubLObject)ConsesLow.list(cure_api.$const60$and, (SubLObject)ConsesLow.list(cure_api.$const383$equalSymbols, (SubLObject)cure_api.$sym384$_TERM, focal_term), (SubLObject)ConsesLow.list(cure_api.$const385$argN, (SubLObject)cure_api.$sym386$_SENTENCE_PRED, (SubLObject)cure_api.ZERO_INTEGER, sentence), (SubLObject)cure_api.$list387, (SubLObject)ConsesLow.list(cure_api.$const385$argN, (SubLObject)cure_api.$sym384$_TERM, (SubLObject)cure_api.$sym382$_N, sentence), (SubLObject)ConsesLow.list(cure_api.$const284$or, (SubLObject)cure_api.$list388, (SubLObject)cure_api.$list389, (SubLObject)cure_api.$list390, (SubLObject)cure_api.$list391, (SubLObject)ConsesLow.listS(cure_api.$const60$and, (SubLObject)cure_api.$list392, (SubLObject)ConsesLow.list(cure_api.$const73$assertedSentence, sentence), (SubLObject)cure_api.$list393), (SubLObject)ConsesLow.listS(cure_api.$const60$and, (SubLObject)cure_api.$list394, (SubLObject)ConsesLow.list(cure_api.$const73$assertedSentence, sentence), (SubLObject)cure_api.$list395))))), mt, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 101584L)
    public static SubLObject clear_categories_and_types_for_sentence_and_term_int_via_indexing() {
        final SubLObject cs = cure_api.$categories_and_types_for_sentence_and_term_int_via_indexing_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 101584L)
    public static SubLObject remove_categories_and_types_for_sentence_and_term_int_via_indexing(final SubLObject sentence, final SubLObject focal_term, final SubLObject mt) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$categories_and_types_for_sentence_and_term_int_via_indexing_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(sentence, focal_term, mt), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 101584L)
    public static SubLObject categories_and_types_for_sentence_and_term_int_via_indexing_internal(final SubLObject sentence, final SubLObject focal_term, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)cure_api.NIL;
        final SubLObject hl_mt = narts_high.nart_substitute(mt);
        final SubLObject preds_requiring_isa = (SubLObject)cure_api.$list397;
        final SubLObject preds_requiring_asserted_sentence = (SubLObject)cure_api.$list398;
        final SubLObject preds_allowing_spec_preds = (SubLObject)cure_api.$list399;
        final SubLObject sentence_pred = cycl_utilities.formula_arg0(sentence);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)cure_api.$sym400$RELEVANT_MT_IS_GENL_MT, thread);
            mt_relevance_macros.$mt$.bind(hl_mt, thread);
            SubLObject end_var;
            SubLObject arg_num;
            SubLObject cdolist_list_var;
            SubLObject pred;
            SubLObject pred_var;
            SubLObject iterator_var;
            SubLObject done_var;
            SubLObject token_var;
            SubLObject final_index_spec;
            SubLObject valid;
            SubLObject final_index_iterator;
            SubLObject done_var_$59;
            SubLObject token_var_$60;
            SubLObject ass;
            SubLObject valid_$61;
            SubLObject _prev_bind_0_$62;
            SubLObject _values;
            for (end_var = number_utilities.f_1X(el_utilities.formula_arity(sentence, (SubLObject)cure_api.UNPROVIDED)), arg_num = (SubLObject)cure_api.NIL, arg_num = (SubLObject)cure_api.ONE_INTEGER; !arg_num.numGE(end_var); arg_num = number_utilities.f_1X(arg_num)) {
                cdolist_list_var = (SubLObject)cure_api.$list402;
                pred = (SubLObject)cure_api.NIL;
                pred = cdolist_list_var.first();
                while (cure_api.NIL != cdolist_list_var) {
                    pred_var = pred;
                    if (cure_api.NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(arg_num, (SubLObject)cure_api.FOUR_INTEGER, pred_var)) {
                        iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(arg_num, (SubLObject)cure_api.FOUR_INTEGER, pred_var);
                        done_var = (SubLObject)cure_api.NIL;
                        token_var = (SubLObject)cure_api.NIL;
                        while (cure_api.NIL == done_var) {
                            final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                            valid = (SubLObject)SubLObjectFactory.makeBoolean(!token_var.eql(final_index_spec));
                            if (cure_api.NIL != valid) {
                                final_index_iterator = (SubLObject)cure_api.NIL;
                                try {
                                    final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, (SubLObject)cure_api.$kw356$GAF, (SubLObject)cure_api.$kw401$TRUE, (SubLObject)cure_api.NIL);
                                    done_var_$59 = (SubLObject)cure_api.NIL;
                                    token_var_$60 = (SubLObject)cure_api.NIL;
                                    while (cure_api.NIL == done_var_$59) {
                                        ass = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$60);
                                        valid_$61 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var_$60.eql(ass));
                                        if (cure_api.NIL != valid_$61 && cure_api.NIL != ((cure_api.NIL != subl_promotions.memberP(pred, preds_requiring_isa, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) ? isa.isaP(focal_term, cycl_utilities.formula_arg3(ass, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED) : genls.genlP(focal_term, cycl_utilities.formula_arg3(ass, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) && (sentence_pred.equal(cycl_utilities.formula_arg1(ass, (SubLObject)cure_api.UNPROVIDED)) || (cure_api.NIL != subl_promotions.memberP(pred, preds_allowing_spec_preds, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL != genl_predicates.genl_predP(sentence_pred, cycl_utilities.formula_arg1(ass, (SubLObject)cure_api.UNPROVIDED), mt, (SubLObject)cure_api.UNPROVIDED))) && (cure_api.NIL == subl_promotions.memberP(pred, preds_requiring_asserted_sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED) || cure_api.NIL != czer_meta.find_visible_assertions_cycl(sentence, mt))) {
                                            result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(cycl_utilities.formula_arg2(ass, (SubLObject)cure_api.UNPROVIDED), cycl_utilities.formula_arg3(ass, (SubLObject)cure_api.UNPROVIDED)), result);
                                        }
                                        done_var_$59 = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == valid_$61);
                                    }
                                }
                                finally {
                                    _prev_bind_0_$62 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                        _values = Values.getValuesAsVector();
                                        if (cure_api.NIL != final_index_iterator) {
                                            kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                        }
                                        Values.restoreValuesFromVector(_values);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$62, thread);
                                    }
                                }
                            }
                            done_var = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == valid);
                        }
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    pred = cdolist_list_var.first();
                }
            }
        }
        finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 101584L)
    public static SubLObject categories_and_types_for_sentence_and_term_int_via_indexing(final SubLObject sentence, final SubLObject focal_term, final SubLObject mt) {
        SubLObject caching_state = cure_api.$categories_and_types_for_sentence_and_term_int_via_indexing_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym396$CATEGORIES_AND_TYPES_FOR_SENTENCE_AND_TERM_INT_VIA_INDEXING, (SubLObject)cure_api.$sym403$_CATEGORIES_AND_TYPES_FOR_SENTENCE_AND_TERM_INT_VIA_INDEXING_CACH, (SubLObject)cure_api.$int379$256, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.THREE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym404$CLEAR_CATEGORIES_AND_TYPES_FOR_SENTENCE_AND_TERM_INT_VIA_INDEXING);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(sentence, focal_term, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (sentence.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (focal_term.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && mt.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(categories_and_types_for_sentence_and_term_int_via_indexing_internal(sentence, focal_term, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(sentence, focal_term, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 103412L)
    public static SubLObject sort_by_category(final SubLObject categorized_followups, final SubLObject focal_term, final SubLObject mt) {
        final SubLObject pred_sort_order = summary_pred_sort_order_for_focal_term(focal_term, mt);
        final SubLObject sorted_followups = list_utilities.sort_via_position(categorized_followups, pred_sort_order, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.$sym405$FIRST);
        return sorted_followups;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 103784L)
    public static SubLObject clear_summary_pred_sort_order_for_focal_term() {
        final SubLObject cs = cure_api.$summary_pred_sort_order_for_focal_term_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 103784L)
    public static SubLObject remove_summary_pred_sort_order_for_focal_term(final SubLObject focal_term, final SubLObject mt) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$summary_pred_sort_order_for_focal_term_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(focal_term, mt), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 103784L)
    public static SubLObject summary_pred_sort_order_for_focal_term_internal(final SubLObject focal_term, final SubLObject mt) {
        final SubLObject sorted_preds_from_genls = Sort.sort(ask_utilities.query_template((SubLObject)cure_api.$list407, (SubLObject)ConsesLow.list(cure_api.$const60$and, (SubLObject)cure_api.$list408, (SubLObject)ConsesLow.listS(cure_api.$const76$genls, focal_term, (SubLObject)cure_api.$list409)), mt, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.$sym410$GENERALITY_ESTIMATE_, (SubLObject)cure_api.$sym405$FIRST);
        final SubLObject sorted_preds_from_isa = Sort.sort(ask_utilities.query_template((SubLObject)cure_api.$list407, (SubLObject)ConsesLow.list(cure_api.$const60$and, (SubLObject)cure_api.$list411, (SubLObject)ConsesLow.listS(cure_api.$const55$isa, focal_term, (SubLObject)cure_api.$list409)), mt, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.$sym410$GENERALITY_ESTIMATE_, (SubLObject)cure_api.$sym405$FIRST);
        final SubLObject pred_sort_order = list_utilities.remove_duplicates_from_end(Mapping.mapcan((SubLObject)cure_api.$sym412$CDADR, ConsesLow.nconc(sorted_preds_from_genls, sorted_preds_from_isa), cure_api.EMPTY_SUBL_OBJECT_ARRAY), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        return pred_sort_order;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 103784L)
    public static SubLObject summary_pred_sort_order_for_focal_term(final SubLObject focal_term, final SubLObject mt) {
        SubLObject caching_state = cure_api.$summary_pred_sort_order_for_focal_term_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym406$SUMMARY_PRED_SORT_ORDER_FOR_FOCAL_TERM, (SubLObject)cure_api.$sym413$_SUMMARY_PRED_SORT_ORDER_FOR_FOCAL_TERM_CACHING_STATE_, (SubLObject)cure_api.$int414$128, (SubLObject)cure_api.EQL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym415$CLEAR_SUMMARY_PRED_SORT_ORDER_FOR_FOCAL_TERM);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(focal_term, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (focal_term.eql(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && mt.eql(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(summary_pred_sort_order_for_focal_term_internal(focal_term, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(focal_term, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 104511L)
    public static SubLObject higher_priority_followup_in_category(final SubLObject followup1, final SubLObject followup2, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        final SubLObject pred1 = narts_high.nart_substitute(cycl_utilities.formula_arg0(conses_high.getf(followup1, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED)));
        final SubLObject pred2 = narts_high.nart_substitute(cycl_utilities.formula_arg0(conses_high.getf(followup2, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED)));
        final SubLObject justifying_type1 = get_justifying_type_from_fragment_justification(conses_high.getf(followup1, (SubLObject)cure_api.$kw21$FRAGMENT_JUSTIFICATION, (SubLObject)cure_api.UNPROVIDED));
        final SubLObject justifying_type2 = get_justifying_type_from_fragment_justification(conses_high.getf(followup2, (SubLObject)cure_api.$kw21$FRAGMENT_JUSTIFICATION, (SubLObject)cure_api.UNPROVIDED));
        final SubLObject summary_pred1 = get_followup_categories_for_type(justifying_type1, mt).first();
        final SubLObject summary_pred2 = get_followup_categories_for_type(justifying_type2, mt).first();
        final SubLObject pred_order_from_type = get_pred_list_order_for_type(justifying_type1, cure_api.$const64$InferencePSC);
        final SubLObject pred1_position = Sequences.position(pred1, pred_order_from_type, Symbols.symbol_function((SubLObject)cure_api.EQUAL), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject pred2_position = Sequences.position(pred2, pred_order_from_type, Symbols.symbol_function((SubLObject)cure_api.EQUAL), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        if (cure_api.NIL == pred1) {
            return (SubLObject)cure_api.T;
        }
        if (cure_api.NIL == pred2) {
            return (SubLObject)cure_api.NIL;
        }
        if (cure_api.NIL != genl_predicates.proper_genl_predP(pred1, pred2, mt, (SubLObject)cure_api.UNPROVIDED)) {
            return (SubLObject)cure_api.T;
        }
        if (cure_api.NIL != genl_predicates.proper_genl_predP(pred2, pred1, mt, (SubLObject)cure_api.UNPROVIDED)) {
            return (SubLObject)cure_api.NIL;
        }
        if (cure_api.NIL != justifying_type2 && cure_api.NIL != justifying_type1 && cure_api.NIL != cardinality_estimates.generality_estimateL(justifying_type1, justifying_type2)) {
            return (SubLObject)cure_api.T;
        }
        if (cure_api.NIL != justifying_type2 && cure_api.NIL != justifying_type1 && cure_api.NIL != cardinality_estimates.generality_estimateG(justifying_type1, justifying_type2)) {
            return (SubLObject)cure_api.NIL;
        }
        if (cure_api.NIL != summary_pred2 && cure_api.NIL != summary_pred1 && cure_api.NIL != kb_utilities.term_L(summary_pred1, summary_pred2, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
            return (SubLObject)cure_api.T;
        }
        if (cure_api.NIL != summary_pred2 && cure_api.NIL != summary_pred1 && cure_api.NIL != kb_utilities.term_L(summary_pred2, summary_pred1, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
            return (SubLObject)cure_api.NIL;
        }
        if (cure_api.NIL == pred1_position) {
            return (SubLObject)cure_api.NIL;
        }
        if (cure_api.NIL == pred2_position) {
            return (SubLObject)cure_api.T;
        }
        if (pred1_position.numL(pred2_position)) {
            return (SubLObject)cure_api.T;
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 106169L)
    public static SubLObject get_justifying_type_from_fragment_justification(final SubLObject just) {
        final SubLObject cdolist_list_var;
        final SubLObject type_positions = cdolist_list_var = Sequences.cconcatenate(cycl_utilities.arg_positions_dfs((SubLObject)cure_api.$kw143$ISA, just, (SubLObject)cure_api.UNPROVIDED), cycl_utilities.arg_positions_dfs((SubLObject)cure_api.$kw141$GENLS, just, (SubLObject)cure_api.UNPROVIDED));
        SubLObject position = (SubLObject)cure_api.NIL;
        position = cdolist_list_var.first();
        if (cure_api.NIL != cdolist_list_var) {
            return cycl_utilities.formula_arg_position(just, list_utilities.snoc((SubLObject)cure_api.TWO_INTEGER, conses_high.butlast(position, (SubLObject)cure_api.UNPROVIDED)), (SubLObject)cure_api.UNPROVIDED);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 106455L)
    public static SubLObject debug_followups_for_term(final SubLObject v_term, SubLObject user) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject already_resourcing_p = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
        try {
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_resource_limit(already_resourcing_p, (SubLObject)cure_api.SIX_INTEGER), thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(sbhl_marking_vars.possibly_new_marking_resource(already_resourcing_p), thread);
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind((SubLObject)cure_api.T, thread);
            final SubLObject local_state;
            final SubLObject state = local_state = memoization_state.possibly_new_memoization_state();
            final SubLObject _prev_bind_0_$63 = memoization_state.$memoization_state$.currentBinding(thread);
            try {
                memoization_state.$memoization_state$.bind(local_state, thread);
                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                try {
                    final SubLObject term_phrase = term_learner_cycl_term_to_nl_string(v_term, (SubLObject)cure_api.UNPROVIDED).first();
                    final SubLObject _prev_bind_0_$64 = cure_api.$current_tl_task$.currentBinding(thread);
                    try {
                        cure_api.$current_tl_task$.bind(default_task_for_user(user), thread);
                        final SubLObject followup_query_mt = followup_query_mt_for_userXtask(user, cure_api.$current_tl_task$.getDynamicValue(thread));
                        final SubLObject raw_fragments = cae_query_search.get_fragments_for_terms((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(term_phrase, v_term)), (SubLObject)cure_api.NIL, followup_query_mt, (SubLObject)cure_api.$kw345$BLANKS, (SubLObject)cure_api.NIL, (SubLObject)cure_api.UNPROVIDED);
                        final SubLObject query_mt = query_mt_for_task(cure_api.$current_tl_task$.getDynamicValue(thread));
                        SubLObject fragments_with_term = (SubLObject)cure_api.NIL;
                        SubLObject unknown_questions = (SubLObject)cure_api.NIL;
                        SubLObject cdolist_list_var = raw_fragments;
                        SubLObject fragment = (SubLObject)cure_api.NIL;
                        fragment = cdolist_list_var.first();
                        while (cure_api.NIL != cdolist_list_var) {
                            if (cure_api.NIL != cycl_utilities.expression_find(v_term, fragment.first(), (SubLObject)cure_api.T, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED)) {
                                fragments_with_term = (SubLObject)ConsesLow.cons(fragment, fragments_with_term);
                                final SubLObject focal_arg_positions = cycl_utilities.arg_positions_dfs(v_term, fragment.first(), (SubLObject)cure_api.UNPROVIDED);
                                final SubLObject items_var = term_learner_types_for_fragment(focal_arg_positions, fragment, term_phrase, cure_default_generation_mt((SubLObject)cure_api.UNPROVIDED), query_mt, followup_query_mt, (SubLObject)cure_api.T, (SubLObject)cure_api.T);
                                if (items_var.isVector()) {
                                    final SubLObject vector_var = items_var;
                                    final SubLObject backwardP_var = (SubLObject)cure_api.NIL;
                                    SubLObject length;
                                    SubLObject v_iteration;
                                    SubLObject element_num;
                                    SubLObject item;
                                    for (length = Sequences.length(vector_var), v_iteration = (SubLObject)cure_api.NIL, v_iteration = (SubLObject)cure_api.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)cure_api.ONE_INTEGER)) {
                                        element_num = ((cure_api.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)cure_api.ONE_INTEGER) : v_iteration);
                                        item = Vectors.aref(vector_var, element_num);
                                        unknown_questions = (SubLObject)ConsesLow.cons(item, unknown_questions);
                                    }
                                }
                                else {
                                    SubLObject cdolist_list_var_$65 = items_var;
                                    SubLObject item2 = (SubLObject)cure_api.NIL;
                                    item2 = cdolist_list_var_$65.first();
                                    while (cure_api.NIL != cdolist_list_var_$65) {
                                        unknown_questions = (SubLObject)ConsesLow.cons(item2, unknown_questions);
                                        cdolist_list_var_$65 = cdolist_list_var_$65.rest();
                                        item2 = cdolist_list_var_$65.first();
                                    }
                                }
                            }
                            cdolist_list_var = cdolist_list_var.rest();
                            fragment = cdolist_list_var.first();
                        }
                        PrintLow.format((SubLObject)cure_api.T, (SubLObject)cure_api.$str416$_______________________________Fo, user);
                        PrintLow.format((SubLObject)cure_api.T, (SubLObject)cure_api.$str417$_______________________________Fo, followup_query_mt);
                        PrintLow.format((SubLObject)cure_api.T, (SubLObject)cure_api.$str418$_______________________________Fr);
                        format_nil.print_one_per_line(raw_fragments, (SubLObject)cure_api.UNPROVIDED);
                        PrintLow.format((SubLObject)cure_api.T, (SubLObject)cure_api.$str419$_______________________________Fr, v_term);
                        format_nil.print_one_per_line(fragments_with_term, (SubLObject)cure_api.UNPROVIDED);
                        PrintLow.format((SubLObject)cure_api.T, (SubLObject)cure_api.$str420$_______________________________Un, v_term);
                        format_nil.print_one_per_line(unknown_questions, (SubLObject)cure_api.UNPROVIDED);
                    }
                    finally {
                        cure_api.$current_tl_task$.rebind(_prev_bind_0_$64, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$65 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$65, thread);
                    }
                }
            }
            finally {
                memoization_state.$memoization_state$.rebind(_prev_bind_0_$63, thread);
            }
        }
        finally {
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_3, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_2, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 107962L)
    public static SubLObject clear_followup_query_mt_for_user() {
        final SubLObject cs = cure_api.$followup_query_mt_for_user_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 107962L)
    public static SubLObject remove_followup_query_mt_for_user(final SubLObject user) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$followup_query_mt_for_user_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(user), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 107962L)
    public static SubLObject followup_query_mt_for_user_internal(final SubLObject user) {
        final SubLObject interests = ask_utilities.query_variable((SubLObject)cure_api.$sym422$_TOPIC, (SubLObject)ConsesLow.listS(cure_api.$const423$interests, user, (SubLObject)cure_api.$list424), cure_api.$const64$InferencePSC, (SubLObject)cure_api.UNPROVIDED);
        SubLObject interest_mts = (SubLObject)cure_api.NIL;
        if (cure_api.NIL != constant_handles.valid_constantP(cure_api.$const425$DocumentReaderFollowupsForInteres, (SubLObject)cure_api.UNPROVIDED)) {
            SubLObject cdolist_list_var = interests;
            SubLObject interest = (SubLObject)cure_api.NIL;
            interest = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                if (cure_api.NIL != narts_high.find_nart((SubLObject)ConsesLow.list(cure_api.$const425$DocumentReaderFollowupsForInteres, interest))) {
                    interest_mts = (SubLObject)ConsesLow.cons(narts_high.nart_substitute((SubLObject)ConsesLow.list(cure_api.$const425$DocumentReaderFollowupsForInteres, interest)), interest_mts);
                }
                cdolist_list_var = cdolist_list_var.rest();
                interest = cdolist_list_var.first();
            }
        }
        if (cure_api.NIL != list_utilities.lengthG(interest_mts, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.UNPROVIDED)) {
            return el_utilities.make_formula(cure_api.$const293$MtUnionFn, interest_mts, (SubLObject)cure_api.UNPROVIDED);
        }
        if (cure_api.NIL != interest_mts) {
            return interest_mts.first();
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 107962L)
    public static SubLObject followup_query_mt_for_user(final SubLObject user) {
        SubLObject caching_state = cure_api.$followup_query_mt_for_user_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym421$FOLLOWUP_QUERY_MT_FOR_USER, (SubLObject)cure_api.$sym426$_FOLLOWUP_QUERY_MT_FOR_USER_CACHING_STATE_, (SubLObject)cure_api.$int414$128, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym427$CLEAR_FOLLOWUP_QUERY_MT_FOR_USER);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, user, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(followup_query_mt_for_user_internal(user)));
            memoization_state.caching_state_put(caching_state, user, results, (SubLObject)cure_api.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 108658L)
    public static SubLObject default_followup_query_mt(SubLObject user, SubLObject task) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (task == cure_api.UNPROVIDED) {
            task = cure_api.$current_tl_task$.getDynamicValue();
        }
        return followup_query_mt_for_userXtask(user, task);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 108812L)
    public static SubLObject clear_followup_query_mt_for_userXtask() {
        final SubLObject cs = cure_api.$followup_query_mt_for_userXtask_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 108812L)
    public static SubLObject remove_followup_query_mt_for_userXtask(final SubLObject user, SubLObject task) {
        if (task == cure_api.UNPROVIDED) {
            task = cure_api.$current_tl_task$.getDynamicValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$followup_query_mt_for_userXtask_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(user, task), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 108812L)
    public static SubLObject followup_query_mt_for_userXtask_internal(final SubLObject user, final SubLObject task) {
        final SubLObject mt_from_query = ask_utilities.query_variable((SubLObject)cure_api.$sym429$_MT, (SubLObject)ConsesLow.listS(cure_api.$const430$defaultCUREGuidanceMt, (SubLObject)ConsesLow.list(cure_api.$const431$SpecificationVariantFn, (SubLObject)cure_api.$list432, cure_api.$const433$analysisTask, task), (SubLObject)cure_api.$list434), cure_api.$const64$InferencePSC, (SubLObject)cure_api.UNPROVIDED).first();
        final SubLObject mt_from_user = followup_query_mt_for_user(user);
        final SubLObject mt = (SubLObject)((cure_api.NIL != mt_from_query && cure_api.NIL != mt_from_user) ? ConsesLow.list(cure_api.$const293$MtUnionFn, mt_from_query, mt_from_user) : ((cure_api.NIL != mt_from_query) ? mt_from_query : ((cure_api.NIL != mt_from_user) ? mt_from_user : cure_api.NIL)));
        return czer_main.canonicalize_term(mt, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 108812L)
    public static SubLObject followup_query_mt_for_userXtask(final SubLObject user, SubLObject task) {
        if (task == cure_api.UNPROVIDED) {
            task = cure_api.$current_tl_task$.getDynamicValue();
        }
        SubLObject caching_state = cure_api.$followup_query_mt_for_userXtask_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym428$FOLLOWUP_QUERY_MT_FOR_USER_TASK, (SubLObject)cure_api.$sym435$_FOLLOWUP_QUERY_MT_FOR_USER_TASK_CACHING_STATE_, (SubLObject)cure_api.$int414$128, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym436$CLEAR_FOLLOWUP_QUERY_MT_FOR_USER_TASK);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(user, task);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (user.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && task.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(followup_query_mt_for_userXtask_internal(user, task)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(user, task));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 109701L)
    public static SubLObject clear_term_learner_known_bindings_for_sentence() {
        final SubLObject cs = cure_api.$term_learner_known_bindings_for_sentence_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 109701L)
    public static SubLObject remove_term_learner_known_bindings_for_sentence(final SubLObject sentence, final SubLObject mt, SubLObject inference_props) {
        if (inference_props == cure_api.UNPROVIDED) {
            inference_props = (SubLObject)cure_api.NIL;
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$term_learner_known_bindings_for_sentence_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(sentence, mt, inference_props), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 109701L)
    public static SubLObject term_learner_known_bindings_for_sentence_internal(SubLObject sentence, final SubLObject mt, SubLObject inference_props) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        inference_props = inference_datastructures_enumerated_types.merge_query_properties(inference_props, (SubLObject)cure_api.$list438);
        final SubLObject arg0 = cycl_utilities.formula_arg0(sentence);
        if (arg0.eql(cure_api.$const55$isa)) {
            sentence = el_utilities.replace_formula_arg((SubLObject)cure_api.ZERO_INTEGER, cure_api.$const439$nearestIsa, sentence);
        }
        else if (cure_api.NIL == forts.fort_p(arg0) || cure_api.NIL == genl_predicates.genl_predP(arg0, cure_api.$const55$isa, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
            if (arg0.eql(cure_api.$const76$genls)) {
                sentence = el_utilities.replace_formula_arg((SubLObject)cure_api.ZERO_INTEGER, cure_api.$const440$nearestGenls, sentence);
            }
            else if (cure_api.NIL != forts.fort_p(arg0) && cure_api.NIL != genl_predicates.genl_predP(arg0, cure_api.$const76$genls, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                sentence = (SubLObject)ConsesLow.list(cure_api.$const73$assertedSentence, sentence);
            }
            else if (cure_api.NIL == cure_api.$cure_show_best_bindings$.getDynamicValue(thread) && arg0.eql(cure_api.$const441$commonAilmentCause)) {
                sentence = (SubLObject)ConsesLow.list(cure_api.$const73$assertedSentence, sentence);
            }
            else if (cure_api.NIL == cure_api.$cure_show_best_bindings$.getDynamicValue(thread) && arg0.eql(cure_api.$const442$objectFoundInLocation)) {
                sentence = (SubLObject)ConsesLow.list(cure_api.$const73$assertedSentence, sentence);
            }
            else if (cure_api.NIL == cure_api.$cure_show_best_bindings$.getDynamicValue(thread) && arg0.eql(cure_api.$const443$properlyGeographicallySubsumes)) {
                sentence = (SubLObject)ConsesLow.list(cure_api.$const73$assertedSentence, sentence);
            }
        }
        final SubLObject temporal_mt = (SubLObject)((cure_api.NIL != hlmt.atemporal_hlmtP(mt)) ? ConsesLow.list(cure_api.$const444$MtSpace, cure_api.$const445$AnytimePSC, mt) : mt);
        final SubLObject bindings_and_supports = inference_kernel.new_cyc_query(sentence, temporal_mt, inference_props);
        final SubLObject best_bindings = cure_get_best_bindings(bindings_and_supports, temporal_mt);
        return best_bindings;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 109701L)
    public static SubLObject term_learner_known_bindings_for_sentence(final SubLObject sentence, final SubLObject mt, SubLObject inference_props) {
        if (inference_props == cure_api.UNPROVIDED) {
            inference_props = (SubLObject)cure_api.NIL;
        }
        SubLObject caching_state = cure_api.$term_learner_known_bindings_for_sentence_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym437$TERM_LEARNER_KNOWN_BINDINGS_FOR_SENTENCE, (SubLObject)cure_api.$sym446$_TERM_LEARNER_KNOWN_BINDINGS_FOR_SENTENCE_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.THREE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym447$CLEAR_TERM_LEARNER_KNOWN_BINDINGS_FOR_SENTENCE);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(sentence, mt, inference_props);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (sentence.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && inference_props.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(term_learner_known_bindings_for_sentence_internal(sentence, mt, inference_props)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(sentence, mt, inference_props));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 111343L)
    public static SubLObject cure_get_best_bindings(final SubLObject bindings_and_supports, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject asserted_bindings = (SubLObject)cure_api.NIL;
        SubLObject derived_bindings = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = bindings_and_supports;
        SubLObject binding_and_supports = (SubLObject)cure_api.NIL;
        binding_and_supports = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = binding_and_supports;
            SubLObject binding_set = (SubLObject)cure_api.NIL;
            SubLObject support_set = (SubLObject)cure_api.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list448);
            binding_set = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list448);
            support_set = current.first();
            current = current.rest();
            if (cure_api.NIL == current) {
                SubLObject badP = (SubLObject)cure_api.NIL;
                if (cure_api.NIL == badP) {
                    SubLObject csome_list_var = binding_set;
                    SubLObject binding = (SubLObject)cure_api.NIL;
                    binding = csome_list_var.first();
                    while (cure_api.NIL == badP && cure_api.NIL != csome_list_var) {
                        if (cure_api.NIL == term_learner_possibly_relevant_generalizationP(binding.rest(), mt)) {
                            badP = (SubLObject)cure_api.T;
                        }
                        csome_list_var = csome_list_var.rest();
                        binding = csome_list_var.first();
                    }
                }
                if (cure_api.NIL == badP) {
                    if (cure_api.NIL != cure_api.$cure_show_best_bindings$.getDynamicValue(thread)) {
                        SubLObject binding_set_added = (SubLObject)cure_api.NIL;
                        SubLObject cdolist_list_var_$67 = support_set;
                        SubLObject support = (SubLObject)cure_api.NIL;
                        support = cdolist_list_var_$67.first();
                        while (cure_api.NIL != cdolist_list_var_$67) {
                            if (cure_api.NIL != assertion_handles.assertion_p(support) && cure_api.NIL != assertions_high.asserted_assertionP(support)) {
                                final SubLObject item_var = binding_set;
                                if (cure_api.NIL == conses_high.member(item_var, asserted_bindings, Symbols.symbol_function((SubLObject)cure_api.EQUAL), Symbols.symbol_function((SubLObject)cure_api.IDENTITY))) {
                                    asserted_bindings = (SubLObject)ConsesLow.cons(item_var, asserted_bindings);
                                }
                                binding_set_added = (SubLObject)cure_api.T;
                            }
                            cdolist_list_var_$67 = cdolist_list_var_$67.rest();
                            support = cdolist_list_var_$67.first();
                        }
                        if (cure_api.NIL == binding_set_added) {
                            final SubLObject item_var = binding_set;
                            if (cure_api.NIL == conses_high.member(item_var, derived_bindings, Symbols.symbol_function((SubLObject)cure_api.EQUAL), Symbols.symbol_function((SubLObject)cure_api.IDENTITY))) {
                                derived_bindings = (SubLObject)ConsesLow.cons(item_var, derived_bindings);
                            }
                        }
                    }
                    else {
                        final SubLObject item_var2 = binding_set;
                        if (cure_api.NIL == conses_high.member(item_var2, asserted_bindings, Symbols.symbol_function((SubLObject)cure_api.EQL), Symbols.symbol_function((SubLObject)cure_api.IDENTITY))) {
                            asserted_bindings = (SubLObject)ConsesLow.cons(item_var2, asserted_bindings);
                        }
                    }
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list448);
            }
            cdolist_list_var = cdolist_list_var.rest();
            binding_and_supports = cdolist_list_var.first();
        }
        return (cure_api.NIL != asserted_bindings) ? asserted_bindings : derived_bindings;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 112364L)
    public static SubLObject clear_term_learner_known_negated_bindings_for_sentence() {
        final SubLObject cs = cure_api.$term_learner_known_negated_bindings_for_sentence_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 112364L)
    public static SubLObject remove_term_learner_known_negated_bindings_for_sentence(final SubLObject sentence, final SubLObject mt, SubLObject inference_props) {
        if (inference_props == cure_api.UNPROVIDED) {
            inference_props = (SubLObject)cure_api.NIL;
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$term_learner_known_negated_bindings_for_sentence_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(sentence, mt, inference_props), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 112364L)
    public static SubLObject term_learner_known_negated_bindings_for_sentence_internal(final SubLObject sentence, final SubLObject mt, final SubLObject inference_props) {
        return term_learner_known_bindings_for_sentence((SubLObject)ConsesLow.list(cure_api.$const73$assertedSentence, (SubLObject)ConsesLow.list(cure_api.$const372$not, sentence)), mt, inference_props);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 112364L)
    public static SubLObject term_learner_known_negated_bindings_for_sentence(final SubLObject sentence, final SubLObject mt, SubLObject inference_props) {
        if (inference_props == cure_api.UNPROVIDED) {
            inference_props = (SubLObject)cure_api.NIL;
        }
        SubLObject caching_state = cure_api.$term_learner_known_negated_bindings_for_sentence_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym449$TERM_LEARNER_KNOWN_NEGATED_BINDINGS_FOR_SENTENCE, (SubLObject)cure_api.$sym450$_TERM_LEARNER_KNOWN_NEGATED_BINDINGS_FOR_SENTENCE_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.THREE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym451$CLEAR_TERM_LEARNER_KNOWN_NEGATED_BINDINGS_FOR_SENTENCE);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(sentence, mt, inference_props);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (sentence.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && inference_props.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(term_learner_known_negated_bindings_for_sentence_internal(sentence, mt, inference_props)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(sentence, mt, inference_props));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 112632L)
    public static SubLObject clear_term_learner_types_for_fragment() {
        final SubLObject cs = cure_api.$term_learner_types_for_fragment_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 112632L)
    public static SubLObject remove_term_learner_types_for_fragment(final SubLObject focal_arg_positions, final SubLObject fragment, final SubLObject term_phrase, final SubLObject nl_mt, final SubLObject domain_mt, final SubLObject followup_query_mt, SubLObject unknown_onlyP, SubLObject questions_onlyP) {
        if (unknown_onlyP == cure_api.UNPROVIDED) {
            unknown_onlyP = (SubLObject)cure_api.NIL;
        }
        if (questions_onlyP == cure_api.UNPROVIDED) {
            questions_onlyP = (SubLObject)cure_api.NIL;
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$term_learner_types_for_fragment_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(focal_arg_positions, fragment, term_phrase, nl_mt, domain_mt, followup_query_mt, unknown_onlyP, questions_onlyP), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 112632L)
    public static SubLObject term_learner_types_for_fragment_internal(final SubLObject focal_arg_positions, final SubLObject fragment, final SubLObject term_phrase, final SubLObject nl_mt, final SubLObject domain_mt, final SubLObject followup_query_mt, final SubLObject unknown_onlyP, final SubLObject questions_onlyP) {
        SubLObject cycl = cae_query_search.cae_query_search_fragment_formula(fragment);
        final SubLObject fragment_justification = cae_query_search.cae_query_search_fragment_justification(fragment);
        SubLObject term_learner_types = (SubLObject)cure_api.NIL;
        final SubLObject known_binding_lists = term_learner_known_bindings_for_sentence(cycl, domain_mt, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject known_negated_binding_lists = term_learner_known_negated_bindings_for_sentence(cycl, domain_mt, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject binding_constraints = term_learner_known_value_constraints_for_sentence(cycl, followup_query_mt);
        final SubLObject available_binding_lists = binding_lists_passing_constraints(known_binding_lists, binding_constraints, domain_mt);
        final SubLObject available_negated_binding_lists = binding_lists_passing_constraints(known_negated_binding_lists, binding_constraints, domain_mt);
        SubLObject bindings_lists = (SubLObject)cure_api.NIL;
        SubLObject negated_bindings_lists = (SubLObject)cure_api.NIL;
        final SubLObject default_unbound_bindings = default_unbound_bindings_for_fragment(cycl, followup_query_mt);
        if (cure_api.NIL == unknown_onlyP || cure_api.NIL == available_binding_lists) {
            if (cure_api.NIL != questions_onlyP || cure_api.NIL != unknown_onlyP) {
                cycl = bindings.apply_bindings(default_unbound_bindings, cycl);
                bindings_lists = (SubLObject)ConsesLow.list((SubLObject)cure_api.NIL);
                negated_bindings_lists = (SubLObject)ConsesLow.list((SubLObject)cure_api.NIL);
            }
            else if (cure_api.NIL != available_binding_lists || cure_api.NIL != available_negated_binding_lists) {
                bindings_lists = available_binding_lists;
                negated_bindings_lists = available_negated_binding_lists;
                if (cure_api.NIL != should_add_empty_bindingsP(bindings_lists, negated_bindings_lists, cycl, followup_query_mt)) {
                    bindings_lists = (SubLObject)ConsesLow.cons((SubLObject)cure_api.NIL, bindings_lists);
                }
            }
            else {
                bindings_lists = (SubLObject)ConsesLow.list((SubLObject)cure_api.NIL);
                negated_bindings_lists = (SubLObject)cure_api.NIL;
                cycl = bindings.apply_bindings(default_unbound_bindings, cycl);
            }
        }
        SubLObject cdolist_list_var = bindings_lists;
        SubLObject current_bindings = (SubLObject)cure_api.NIL;
        current_bindings = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            final SubLObject current_sentence = bindings.apply_bindings(current_bindings, cycl);
            final SubLObject suggestions = term_learner_candidate_replacements_for_sentence(focal_arg_positions, current_sentence, followup_query_mt);
            final SubLObject source_renderers = term_learner_source_renderers_for_sentence(current_sentence, domain_mt);
            final SubLObject justifications = new_term_learner_justifications(term_phrase, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$kw97$USER, source_renderers, (SubLObject)cure_api.UNPROVIDED);
            term_learner_types = (SubLObject)ConsesLow.cons(term_learner_type_for_fragment_int(current_sentence, followup_query_mt, cycl, current_bindings, suggestions, justifications, fragment_justification, nl_mt, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), term_learner_types);
            cdolist_list_var = cdolist_list_var.rest();
            current_bindings = cdolist_list_var.first();
        }
        cdolist_list_var = negated_bindings_lists;
        current_bindings = (SubLObject)cure_api.NIL;
        current_bindings = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            final SubLObject negated_cycl = (SubLObject)ConsesLow.list(cure_api.$const372$not, cycl);
            final SubLObject current_sentence2 = bindings.apply_bindings(current_bindings, negated_cycl);
            final SubLObject suggestions2 = term_learner_candidate_replacements_for_sentence(focal_arg_positions, current_sentence2, followup_query_mt);
            final SubLObject source_renderers2 = term_learner_source_renderers_for_sentence(current_sentence2, domain_mt);
            final SubLObject justifications2 = new_term_learner_justifications(term_phrase, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$kw97$USER, source_renderers2, (SubLObject)cure_api.UNPROVIDED);
            term_learner_types = (SubLObject)ConsesLow.cons(term_learner_type_for_fragment_int(current_sentence2, followup_query_mt, negated_cycl, current_bindings, suggestions2, justifications2, fragment_justification, nl_mt, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), term_learner_types);
            cdolist_list_var = cdolist_list_var.rest();
            current_bindings = cdolist_list_var.first();
        }
        return term_learner_types;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 112632L)
    public static SubLObject term_learner_types_for_fragment(final SubLObject focal_arg_positions, final SubLObject fragment, final SubLObject term_phrase, final SubLObject nl_mt, final SubLObject domain_mt, final SubLObject followup_query_mt, SubLObject unknown_onlyP, SubLObject questions_onlyP) {
        if (unknown_onlyP == cure_api.UNPROVIDED) {
            unknown_onlyP = (SubLObject)cure_api.NIL;
        }
        if (questions_onlyP == cure_api.UNPROVIDED) {
            questions_onlyP = (SubLObject)cure_api.NIL;
        }
        SubLObject caching_state = cure_api.$term_learner_types_for_fragment_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym452$TERM_LEARNER_TYPES_FOR_FRAGMENT, (SubLObject)cure_api.$sym453$_TERM_LEARNER_TYPES_FOR_FRAGMENT_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.EIGHT_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym454$CLEAR_TERM_LEARNER_TYPES_FOR_FRAGMENT);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_8(focal_arg_positions, fragment, term_phrase, nl_mt, domain_mt, followup_query_mt, unknown_onlyP, questions_onlyP);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (focal_arg_positions.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (fragment.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (term_phrase.equal(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (nl_mt.equal(cached_args.first())) {
                                cached_args = cached_args.rest();
                                if (domain_mt.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (followup_query_mt.equal(cached_args.first())) {
                                        cached_args = cached_args.rest();
                                        if (unknown_onlyP.equal(cached_args.first())) {
                                            cached_args = cached_args.rest();
                                            if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && questions_onlyP.equal(cached_args.first())) {
                                                return memoization_state.caching_results(results2);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(term_learner_types_for_fragment_internal(focal_arg_positions, fragment, term_phrase, nl_mt, domain_mt, followup_query_mt, unknown_onlyP, questions_onlyP)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(focal_arg_positions, fragment, term_phrase, nl_mt, domain_mt, followup_query_mt, unknown_onlyP, questions_onlyP));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 116509L)
    public static SubLObject should_add_empty_bindingsP(final SubLObject known_bindings_lists, final SubLObject known_negated_bindings_lists, final SubLObject cycl, final SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL == known_bindings_lists && cure_api.NIL != conses_high.member((SubLObject)cure_api.NIL, known_negated_bindings_lists, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
            return (SubLObject)cure_api.NIL;
        }
        if (cure_api.NIL == known_bindings_lists) {
            return (SubLObject)cure_api.T;
        }
        final SubLObject pred = cycl_utilities.formula_arg0(cycl);
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(domain_mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            return (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == kb_mapping_utilities.pred_values(pred, cure_api.$const455$singleEntryFormatInArgs, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 117330L)
    public static SubLObject default_unbound_bindings_for_fragment(final SubLObject cycl, final SubLObject mt) {
        final SubLObject free_vars = obsolete.formula_free_variables(cycl, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        SubLObject new_bindings = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = free_vars;
        SubLObject var = (SubLObject)cure_api.NIL;
        var = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            final SubLObject constraints = html_complete.get_arg_constraints_for_var(cycl, var, mt);
            SubLObject cdolist_list_var_$68;
            final SubLObject isa_constraints = cdolist_list_var_$68 = conses_high.getf(constraints, (SubLObject)cure_api.$kw143$ISA, (SubLObject)cure_api.UNPROVIDED);
            SubLObject constraint_cycl = (SubLObject)cure_api.NIL;
            constraint_cycl = cdolist_list_var_$68.first();
            while (cure_api.NIL != cdolist_list_var_$68) {
                if (cure_api.NIL != genls.genlP(constraint_cycl, cure_api.$const456$List, mt, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL == genls.genlP(constraint_cycl, cure_api.$const457$CharacterString, mt, (SubLObject)cure_api.UNPROVIDED)) {
                    final SubLObject exp_with_all_vars = (SubLObject)ConsesLow.list(cure_api.$const60$and, new_bindings, cycl);
                    final SubLObject new_var1 = czer_utilities.unique_el_var_wrt_expression(exp_with_all_vars, (SubLObject)cure_api.$sym282$_X);
                    final SubLObject new_var2 = czer_utilities.unique_el_var_wrt_expression(exp_with_all_vars, (SubLObject)cure_api.$sym458$_Y);
                    new_bindings = (SubLObject)ConsesLow.cons(bindings.make_variable_binding(var, (SubLObject)ConsesLow.list(cure_api.$const459$TheList, new_var1, new_var2)), new_bindings);
                }
                cdolist_list_var_$68 = cdolist_list_var_$68.rest();
                constraint_cycl = cdolist_list_var_$68.first();
            }
            cdolist_list_var = cdolist_list_var.rest();
            var = cdolist_list_var.first();
        }
        return new_bindings;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 118103L)
    public static SubLObject binding_lists_passing_constraints(final SubLObject binding_lists, final SubLObject binding_constraints, final SubLObject mt) {
        SubLObject result = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = binding_lists;
        SubLObject binding_list = (SubLObject)cure_api.NIL;
        binding_list = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.NIL != term_learner_meets_constraints(binding_list, binding_constraints, mt)) {
                result = (SubLObject)ConsesLow.cons(binding_list, result);
            }
            cdolist_list_var = cdolist_list_var.rest();
            binding_list = cdolist_list_var.first();
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 118386L)
    public static SubLObject term_learner_meets_constraints(final SubLObject binding_set, final SubLObject binding_constraints, final SubLObject mt) {
        SubLObject cdolist_list_var = binding_constraints;
        SubLObject constraint = (SubLObject)cure_api.NIL;
        constraint = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = constraint;
            SubLObject possibly_met_constraint = (SubLObject)cure_api.NIL;
            SubLObject must_be_met_constraint = (SubLObject)cure_api.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list460);
            possibly_met_constraint = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list460);
            must_be_met_constraint = current.first();
            current = current.rest();
            if (cure_api.NIL == current) {
                if (cure_api.NIL != ask_utilities.query_boolean(bindings.apply_bindings(binding_set, possibly_met_constraint), mt, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL == ask_utilities.query_boolean(bindings.apply_bindings(binding_set, must_be_met_constraint), mt, (SubLObject)cure_api.UNPROVIDED)) {
                    return (SubLObject)cure_api.NIL;
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list460);
            }
            cdolist_list_var = cdolist_list_var.rest();
            constraint = cdolist_list_var.first();
        }
        return (SubLObject)cure_api.T;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 118795L)
    public static SubLObject term_learner_known_value_constraints_for_sentence(final SubLObject sentence, final SubLObject mt) {
        final SubLObject pred = cycl_utilities.formula_arg0(sentence);
        final SubLObject raw_constraints = ask_utilities.query_template((SubLObject)cure_api.$list461, (SubLObject)ConsesLow.listS(cure_api.$const462$constrainKnownValuesForPredRelati, pred, (SubLObject)cure_api.$list461), mt, (SubLObject)cure_api.UNPROVIDED);
        SubLObject constraints = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = raw_constraints;
        SubLObject raw_constraint = (SubLObject)cure_api.NIL;
        raw_constraint = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = raw_constraint;
            SubLObject allowed_val = (SubLObject)cure_api.NIL;
            SubLObject allowed_pos = (SubLObject)cure_api.NIL;
            SubLObject known_val = (SubLObject)cure_api.NIL;
            SubLObject known_pos = (SubLObject)cure_api.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list463);
            allowed_val = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list463);
            allowed_pos = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list463);
            known_val = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list463);
            known_pos = current.first();
            current = current.rest();
            if (cure_api.NIL == current) {
                final SubLObject allowed_var = cycl_utilities.formula_arg(sentence, allowed_pos, (SubLObject)cure_api.UNPROVIDED);
                final SubLObject known_var = cycl_utilities.formula_arg(sentence, known_pos, (SubLObject)cure_api.UNPROVIDED);
                constraints = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(cure_api.$const55$isa, known_var, known_val), (SubLObject)ConsesLow.list(cure_api.$const55$isa, allowed_var, allowed_val)), constraints);
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list463);
            }
            cdolist_list_var = cdolist_list_var.rest();
            raw_constraint = cdolist_list_var.first();
        }
        return constraints;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 119538L)
    public static SubLObject term_learner_source_renderers_for_sentence(final SubLObject sentence, final SubLObject domain_mt) {
        final SubLObject asserts = term_learner_find_visible_assertions_cycl(sentence, domain_mt);
        SubLObject result = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = asserts;
        SubLObject v_assert = (SubLObject)cure_api.NIL;
        v_assert = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            final SubLObject mt = assertions_high.assertion_mt(v_assert);
            SubLObject cdolist_list_var_$69;
            final SubLObject v_sources = cdolist_list_var_$69 = sources_of_mt(mt, cure_api.$const64$InferencePSC);
            SubLObject source = (SubLObject)cure_api.NIL;
            source = cdolist_list_var_$69.first();
            while (cure_api.NIL != cdolist_list_var_$69) {
                if (cycl_utilities.formula_arg0(source).equal(cure_api.$const464$SentenceOfCWFn)) {
                    final SubLObject base_source = cycl_utilities.formula_arg_position(source, (SubLObject)cure_api.$list465, (SubLObject)cure_api.UNPROVIDED);
                    SubLObject source_string = (SubLObject)cure_api.NIL;
                    if (cycl_utilities.formula_arg_position(source, (SubLObject)cure_api.$list466, (SubLObject)cure_api.UNPROVIDED).equal(cure_api.$const467$WebPageCWFn)) {
                        source_string = cycl_utilities.formula_arg_position(source, (SubLObject)cure_api.$list468, (SubLObject)cure_api.UNPROVIDED);
                    }
                    else {
                        source_string = pph_main.generate_phrase(base_source, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                    }
                    result = (SubLObject)ConsesLow.cons(new_term_learner_open_select_renderer((SubLObject)cure_api.NIL, (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(source_string, source, (SubLObject)cure_api.T)), source, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), result);
                }
                cdolist_list_var_$69 = cdolist_list_var_$69.rest();
                source = cdolist_list_var_$69.first();
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_assert = cdolist_list_var.first();
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 120483L)
    public static SubLObject clear_sources_of_mt() {
        final SubLObject cs = cure_api.$sources_of_mt_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 120483L)
    public static SubLObject remove_sources_of_mt(final SubLObject source_mt, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$sources_of_mt_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(source_mt, mt), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 120483L)
    public static SubLObject sources_of_mt_internal(final SubLObject source_mt, final SubLObject mt) {
        return ask_utilities.query_variable((SubLObject)cure_api.$sym470$_PCW, (SubLObject)ConsesLow.list(cure_api.$const60$and, (SubLObject)ConsesLow.listS(cure_api.$const471$contextOfPCWInterpretation, (SubLObject)cure_api.$sym470$_PCW, source_mt, (SubLObject)cure_api.$list472)), mt, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 120483L)
    public static SubLObject sources_of_mt(final SubLObject source_mt, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        SubLObject caching_state = cure_api.$sources_of_mt_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym469$SOURCES_OF_MT, (SubLObject)cure_api.$sym473$_SOURCES_OF_MT_CACHING_STATE_, (SubLObject)cure_api.$int318$100, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym474$CLEAR_SOURCES_OF_MT);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(source_mt, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (source_mt.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(sources_of_mt_internal(source_mt, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(source_mt, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 120725L)
    public static SubLObject java_rendering_cycl(final SubLObject obj) {
        return conses_high.second(obj);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 121146L)
    public static SubLObject java_rendering_string(final SubLObject obj) {
        return pph_utilities.pph_javalist_string(obj.first());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 121236L)
    public static SubLObject java_rendering_p(final SubLObject obj) {
        return (SubLObject)SubLObjectFactory.makeBoolean(obj.isList() && cure_api.NIL != cycl_grammar.cycl_represented_term_p(java_rendering_cycl(obj)) && cure_api.NIL != pph_utilities.pph_javalist_p(obj.first()));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 121399L)
    public static SubLObject java_rendering_to_selection_renderer(final SubLObject obj) {
        final SubLObject cycl = java_rendering_cycl(obj);
        final SubLObject string = java_rendering_string(obj);
        final SubLObject cycl_id = document_annotation_widgets.term_learner_id(cycl);
        return (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw67$STRING, string, (SubLObject)cure_api.$kw159$VALID, (SubLObject)cure_api.T, (SubLObject)cure_api.$kw117$CYCL, cycl, (SubLObject)cure_api.$kw161$CYCL_ID, cycl_id);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 121652L)
    public static SubLObject term_learner_candidate_hierarchical_replacements_for_sentence(final SubLObject sentence_id, final SubLObject user, SubLObject task) {
        if (task == cure_api.UNPROVIDED) {
            task = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym475$TERM_LEARNER_CANDIDATE_HIERARCHICAL_REPLACEMENTS_FOR_SENTENCE, sentence_id, user, task));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym475$TERM_LEARNER_CANDIDATE_HIERARCHICAL_REPLACEMENTS_FOR_SENTENCE, sentence_id, user, task));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject this_task = (cure_api.NIL != task) ? task : default_task_for_user(user);
        final SubLObject mt = followup_query_mt_for_userXtask(user, this_task);
        final SubLObject sentence = kb_utilities.maybe_find_object_by_compact_hl_external_id_string(sentence_id);
        return term_learner_candidate_hierarchical_replacements_for_sentence_int((SubLObject)cure_api.NIL, sentence, mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 122245L)
    public static SubLObject term_learner_candidate_hierarchical_replacements_for_sentence_int(final SubLObject focal_arg_positions, final SubLObject sentence, final SubLObject mt) {
        final SubLObject raw_suggestions = gke_main.candidate_replacement_renderers_for_sentence(sentence, mt, (SubLObject)cure_api.UNPROVIDED);
        SubLObject good_suggestions = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = raw_suggestions;
        SubLObject cons = (SubLObject)cure_api.NIL;
        cons = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = cons;
            SubLObject arg_pos = (SubLObject)cure_api.NIL;
            SubLObject suggestions = (SubLObject)cure_api.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list476);
            arg_pos = current.first();
            current = (suggestions = current.rest());
            if (cure_api.NIL == subl_promotions.memberP(arg_pos, focal_arg_positions, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED)) {
                SubLObject hierarchical = conses_high.second(suggestions);
                final SubLObject alphabetical = suggestions.first();
                if (hierarchical.equal((SubLObject)cure_api.NIL)) {
                    hierarchical = convert_alphabetical_to_hierarchical_replacements(alphabetical);
                }
                hierarchical = (SubLObject)ConsesLow.list(hierarchical);
                good_suggestions = list_utilities.alist_enter(good_suggestions, arg_pos, transform_list_utilities.transform(hierarchical, (SubLObject)cure_api.$sym477$JAVA_RENDERING_P, (SubLObject)cure_api.$sym478$JAVA_RENDERING_TO_SELECTION_RENDERER, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED);
            }
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        return good_suggestions;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 123403L)
    public static SubLObject convert_alphabetical_to_hierarchical_replacements(final SubLObject alpha_suggestions) {
        SubLObject hier_suggestions = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = alpha_suggestions;
        SubLObject alpha_suggestion = (SubLObject)cure_api.NIL;
        alpha_suggestion = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            hier_suggestions = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(alpha_suggestion), hier_suggestions);
            cdolist_list_var = cdolist_list_var.rest();
            alpha_suggestion = cdolist_list_var.first();
        }
        return Sequences.nreverse(hier_suggestions);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 123665L)
    public static SubLObject term_learner_candidate_replacements_for_sentence(final SubLObject focal_arg_positions, final SubLObject sentence, final SubLObject mt) {
        final SubLObject raw_suggestions = gke_main.candidate_replacements_for_sentence(sentence, mt);
        SubLObject good_suggestions = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = raw_suggestions;
        SubLObject suggestion = (SubLObject)cure_api.NIL;
        suggestion = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            final SubLObject arg_pos = suggestion.first();
            if (cure_api.NIL == subl_promotions.memberP(arg_pos, focal_arg_positions, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL == fort_types_interface.predicate_p(cycl_utilities.formula_arg_position(sentence, arg_pos, (SubLObject)cure_api.UNPROVIDED))) {
                good_suggestions = (SubLObject)ConsesLow.cons(suggestion, good_suggestions);
            }
            cdolist_list_var = cdolist_list_var.rest();
            suggestion = cdolist_list_var.first();
        }
        return good_suggestions;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 124277L)
    public static SubLObject term_learner_candidate_replacements_for_arg_positions_in_sentence(final SubLObject arg_positions, final SubLObject sentence, final SubLObject mt) {
        final SubLObject raw_suggestions = gke_main.candidate_replacements_for_sentence(sentence, mt);
        SubLObject good_suggestions = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = raw_suggestions;
        SubLObject suggestion = (SubLObject)cure_api.NIL;
        suggestion = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            final SubLObject arg_pos = suggestion.first();
            if (cure_api.NIL != subl_promotions.memberP(arg_pos, arg_positions, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED)) {
                good_suggestions = (SubLObject)ConsesLow.cons(suggestion, good_suggestions);
            }
            cdolist_list_var = cdolist_list_var.rest();
            suggestion = cdolist_list_var.first();
        }
        return good_suggestions;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 124825L)
    public static SubLObject clear_get_arg_positions_for_terms() {
        final SubLObject cs = cure_api.$get_arg_positions_for_terms_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 124825L)
    public static SubLObject remove_get_arg_positions_for_terms(final SubLObject sentence, final SubLObject terms) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$get_arg_positions_for_terms_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(sentence, terms), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 124825L)
    public static SubLObject get_arg_positions_for_terms_internal(final SubLObject sentence, final SubLObject terms) {
        SubLObject arg_poses = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = terms;
        SubLObject v_term = (SubLObject)cure_api.NIL;
        v_term = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            final SubLObject items_var = cycl_utilities.arg_positions_dfs(v_term, sentence, (SubLObject)cure_api.UNPROVIDED);
            if (items_var.isVector()) {
                final SubLObject vector_var = items_var;
                final SubLObject backwardP_var = (SubLObject)cure_api.NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject element_num;
                SubLObject item;
                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)cure_api.NIL, v_iteration = (SubLObject)cure_api.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)cure_api.ONE_INTEGER)) {
                    element_num = ((cure_api.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)cure_api.ONE_INTEGER) : v_iteration);
                    item = Vectors.aref(vector_var, element_num);
                    arg_poses = (SubLObject)ConsesLow.cons(item, arg_poses);
                }
            }
            else {
                SubLObject cdolist_list_var_$70 = items_var;
                SubLObject item2 = (SubLObject)cure_api.NIL;
                item2 = cdolist_list_var_$70.first();
                while (cure_api.NIL != cdolist_list_var_$70) {
                    arg_poses = (SubLObject)ConsesLow.cons(item2, arg_poses);
                    cdolist_list_var_$70 = cdolist_list_var_$70.rest();
                    item2 = cdolist_list_var_$70.first();
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_term = cdolist_list_var.first();
        }
        return arg_poses;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 124825L)
    public static SubLObject get_arg_positions_for_terms(final SubLObject sentence, final SubLObject terms) {
        SubLObject caching_state = cure_api.$get_arg_positions_for_terms_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym479$GET_ARG_POSITIONS_FOR_TERMS, (SubLObject)cure_api.$sym480$_GET_ARG_POSITIONS_FOR_TERMS_CACHING_STATE_, (SubLObject)cure_api.$int414$128, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(sentence, terms);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (sentence.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && terms.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_arg_positions_for_terms_internal(sentence, terms)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(sentence, terms));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 125099L)
    public static SubLObject term_learner_consolidate_javalist_for_arg_positions(final SubLObject cycl_sentence, final SubLObject javalist, final SubLObject arg_positions) {
        SubLObject new_javalist_items = (SubLObject)cure_api.NIL;
        SubLObject current_items = (SubLObject)cure_api.NIL;
        SubLObject current_argpos = (SubLObject)cure_api.NIL;
        SubLObject csome_list_var = pph_utilities.pph_njavalist_items(javalist);
        SubLObject item = (SubLObject)cure_api.NIL;
        item = csome_list_var.first();
        while (cure_api.NIL != csome_list_var) {
            final SubLObject item_argpos = pph_utilities.pph_javalist_item_arg_position(item);
            if (cure_api.NIL != current_items && item_argpos.isList() && cure_api.NIL == list_prefixP(current_argpos, item_argpos)) {
                new_javalist_items = consolidate_and_add_new_javalist_items(new_javalist_items, cycl_sentence, current_argpos, current_items);
                current_argpos = (SubLObject)cure_api.NIL;
                current_items = (SubLObject)cure_api.NIL;
            }
            final SubLObject subsuming_argpos = argpos_subsumes(item_argpos, arg_positions);
            if (cure_api.NIL != subsuming_argpos) {
                current_items = (SubLObject)ConsesLow.cons(item, current_items);
                current_argpos = subsuming_argpos;
            }
            else if (!item_argpos.isList() && cure_api.NIL != current_items) {
                current_items = (SubLObject)ConsesLow.cons(item, current_items);
            }
            else {
                new_javalist_items = (SubLObject)ConsesLow.cons(item, new_javalist_items);
            }
            csome_list_var = csome_list_var.rest();
            item = csome_list_var.first();
        }
        new_javalist_items = consolidate_and_add_new_javalist_items(new_javalist_items, cycl_sentence, current_argpos, current_items);
        return pph_utilities.new_pph_javalist(pph_utilities.pph_javalist_string(javalist), Sequences.nreverse(new_javalist_items));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 126894L)
    public static SubLObject consolidate_and_add_new_javalist_items(SubLObject javalist_items, final SubLObject cycl_sentence, final SubLObject argpos, final SubLObject new_items) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject last_item = (SubLObject)((pph_utilities.pph_javalist_item_arg_position(new_items.first()) == cure_api.$kw481$PPH_UNKNOWN_ARG_POSITION) ? new_items.first() : cure_api.NIL);
        final SubLObject items_to_consolidate = (cure_api.NIL != last_item) ? new_items.rest() : new_items;
        final SubLObject string = string_utilities.join_strings(Mapping.mapcar((SubLObject)cure_api.$sym482$PPH_JAVALIST_ITEM_STRING, Sequences.reverse(items_to_consolidate)), (SubLObject)cure_api.$str50$);
        final SubLObject start_char = pph_utilities.pph_javalist_item_start_char(conses_high.last(items_to_consolidate, (SubLObject)cure_api.UNPROVIDED).first());
        final SubLObject v_term = cycl_utilities.formula_arg_position(cycl_sentence, argpos, (SubLObject)cure_api.UNPROVIDED);
        if (cure_api.NIL != string_utilities.non_empty_stringP(string)) {
            thread.resetMultipleValues();
            final SubLObject start_tag = term_learner_anchor_tags_for_term(v_term);
            final SubLObject close_tag = thread.secondMultipleValue();
            thread.resetMultipleValues();
            javalist_items = (SubLObject)ConsesLow.cons(pph_utilities.new_pph_javalist_item(string, v_term, argpos, start_tag, close_tag, start_char), javalist_items);
            if (cure_api.NIL != last_item) {
                javalist_items = (SubLObject)ConsesLow.cons(last_item, javalist_items);
            }
        }
        return javalist_items;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 127753L)
    public static SubLObject term_learner_anchor_tags_for_term(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject open_tag = (SubLObject)cure_api.NIL;
        SubLObject close_tag = (SubLObject)cure_api.NIL;
        if (cure_api.NIL != narts_high.naut_p(v_term)) {
            final SubLObject _prev_bind_0 = pph_vars.$constant_link_function$.currentBinding(thread);
            final SubLObject _prev_bind_2 = pph_vars.$html_generation_target$.currentBinding(thread);
            final SubLObject _prev_bind_3 = pph_vars.$html_generation_term_id_function$.currentBinding(thread);
            try {
                pph_vars.$constant_link_function$.bind((SubLObject)cure_api.$sym483$CB_NAUT_FRAME, thread);
                pph_vars.$html_generation_target$.bind(pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
                pph_vars.$html_generation_term_id_function$.bind((SubLObject)cure_api.$sym484$PPH_NAUT_ID_FN, thread);
                thread.resetMultipleValues();
                final SubLObject open_tag_$71 = pph_html.pph_anchor_tags_for_term(v_term);
                final SubLObject close_tag_$72 = thread.secondMultipleValue();
                thread.resetMultipleValues();
                open_tag = open_tag_$71;
                close_tag = close_tag_$72;
            }
            finally {
                pph_vars.$html_generation_term_id_function$.rebind(_prev_bind_3, thread);
                pph_vars.$html_generation_target$.rebind(_prev_bind_2, thread);
                pph_vars.$constant_link_function$.rebind(_prev_bind_0, thread);
            }
        }
        else {
            thread.resetMultipleValues();
            final SubLObject open_tag_$72 = pph_html.pph_anchor_tags_for_term(v_term);
            final SubLObject close_tag_$73 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            open_tag = open_tag_$72;
            close_tag = close_tag_$73;
        }
        return Values.values(open_tag, close_tag);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 128185L)
    public static SubLObject argpos_subsumes(final SubLObject argpos, final SubLObject argpos_list) {
        if (!argpos.isList()) {
            return (SubLObject)cure_api.NIL;
        }
        SubLObject cdolist_list_var = argpos_list;
        SubLObject possible_subsumer = (SubLObject)cure_api.NIL;
        possible_subsumer = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.NIL != list_prefixP(possible_subsumer, argpos)) {
                return possible_subsumer;
            }
            cdolist_list_var = cdolist_list_var.rest();
            possible_subsumer = cdolist_list_var.first();
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 128490L)
    public static SubLObject list_prefixP(final SubLObject prefix, final SubLObject list) {
        if (!list.isList()) {
            return (SubLObject)cure_api.NIL;
        }
        return Equality.eq((SubLObject)cure_api.ZERO_INTEGER, Sequences.search(prefix, list, (SubLObject)cure_api.EQL, (SubLObject)cure_api.IDENTITY, (SubLObject)cure_api.ZERO_INTEGER, Sequences.length(prefix), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 128647L)
    public static SubLObject term_learner_type_for_fragment_int(final SubLObject sentence, final SubLObject domain_mt, SubLObject original_sentence, SubLObject current_bindings, SubLObject suggestions, SubLObject justifications, SubLObject fragment_justification, SubLObject nl_mt, SubLObject approval_code, SubLObject display_cycl, SubLObject status, SubLObject clarifying_cycl, SubLObject allow_arbitrary_editsP, SubLObject prevent_unassertP) {
        if (original_sentence == cure_api.UNPROVIDED) {
            original_sentence = (SubLObject)cure_api.NIL;
        }
        if (current_bindings == cure_api.UNPROVIDED) {
            current_bindings = (SubLObject)cure_api.NIL;
        }
        if (suggestions == cure_api.UNPROVIDED) {
            suggestions = (SubLObject)cure_api.NIL;
        }
        if (justifications == cure_api.UNPROVIDED) {
            justifications = (SubLObject)ConsesLow.list(new_term_learner_justification((SubLObject)cure_api.$str50$, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$kw97$USER, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
        }
        if (fragment_justification == cure_api.UNPROVIDED) {
            fragment_justification = (SubLObject)cure_api.NIL;
        }
        if (nl_mt == cure_api.UNPROVIDED) {
            nl_mt = cure_default_generation_mt((SubLObject)cure_api.UNPROVIDED);
        }
        if (approval_code == cure_api.UNPROVIDED) {
            approval_code = (SubLObject)cure_api.NIL;
        }
        if (display_cycl == cure_api.UNPROVIDED) {
            display_cycl = (SubLObject)cure_api.NIL;
        }
        if (status == cure_api.UNPROVIDED) {
            status = (SubLObject)cure_api.NIL;
        }
        if (clarifying_cycl == cure_api.UNPROVIDED) {
            clarifying_cycl = (SubLObject)cure_api.NIL;
        }
        if (allow_arbitrary_editsP == cure_api.UNPROVIDED) {
            allow_arbitrary_editsP = (SubLObject)cure_api.NIL;
        }
        if (prevent_unassertP == cure_api.UNPROVIDED) {
            prevent_unassertP = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL == display_cycl) {
            display_cycl = sentence;
        }
        if (cure_api.$kw20$DEFAULT == justifications) {
            justifications = (SubLObject)ConsesLow.list(new_term_learner_justification((SubLObject)cure_api.$str50$, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$kw97$USER, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
        }
        final SubLObject sentence_status = term_learner_fact_status_int(sentence, domain_mt, (SubLObject)cure_api.UNPROVIDED).first();
        final SubLObject status_$75 = (cure_api.NIL != allow_arbitrary_editsP) ? cure_api.$term_learner_unknown_assertible$.getGlobalValue() : sentence_status;
        SubLObject renderers = (SubLObject)cure_api.NIL;
        final SubLObject default_weight = (SubLObject)cure_api.$float98$0_9;
        final SubLObject open_query_variables = el_utilities.sentence_free_variables(original_sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject open_query_var_arg_poses = get_arg_positions_for_terms(original_sentence, open_query_variables);
        final SubLObject unassertible_sentence_ids = (SubLObject)((cure_api.NIL != prevent_unassertP) ? kb_utilities.compact_hl_external_id_string(sentence) : cure_api.$str50$);
        final SubLObject nl_force = (SubLObject)((sentence_status.eql(cure_api.$term_learner_unknown_assertible$.getGlobalValue()) && cure_api.NIL != el_utilities.closedP(display_cycl, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL != cycl_grammar.cycl_sentence_p(display_cycl)) ? cure_api.$kw485$INTERROGATIVE : cure_api.$kw20$DEFAULT);
        SubLObject list_item_arg_poses = (SubLObject)cure_api.NIL;
        SubLObject olist = (SubLObject)cure_api.NIL;
        if (cure_api.NIL != cure_api.$cure_edit_the_list_termsP$.getDynamicValue(thread)) {
            list_item_arg_poses = cure_list_item_arg_poses(sentence);
        }
        final SubLObject _prev_bind_0 = pph_vars.$pph_consolidate_javalistsP$.currentBinding(thread);
        final SubLObject _prev_bind_2 = pph_vars.$pph_consolidate_output_list_for_natP$.currentBinding(thread);
        try {
            pph_vars.$pph_consolidate_javalistsP$.bind((SubLObject)cure_api.T, thread);
            pph_vars.$pph_consolidate_output_list_for_natP$.bind((SubLObject)cure_api.T, thread);
            olist = cae_query_search.get_gloss_olist_for_indexed_query(display_cycl, nl_mt, domain_mt, (SubLObject)cure_api.$kw20$DEFAULT, nl_force, allow_arbitrary_editsP);
            if (cure_api.NIL == olist) {
                return (SubLObject)cure_api.NIL;
            }
            final SubLObject clarifying_olist = (SubLObject)((cure_api.NIL != clarifying_cycl) ? pph_main.generate_pph_output_list(clarifying_cycl, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED) : cure_api.NIL);
            if (cure_api.NIL != clarifying_olist) {
                olist = Sequences.cconcatenate(olist, new SubLObject[] { ConsesLow.list(pph_question.new_pph_phrase_filler_item((SubLObject)cure_api.$str486$__)), clarifying_olist, ConsesLow.list(pph_question.new_pph_phrase_filler_item((SubLObject)cure_api.$str487$_)) });
            }
        }
        finally {
            pph_vars.$pph_consolidate_output_list_for_natP$.rebind(_prev_bind_2, thread);
            pph_vars.$pph_consolidate_javalistsP$.rebind(_prev_bind_0, thread);
        }
        assert cure_api.NIL != pph_phrase.pph_phrase_output_list_p(olist) : olist;
        SubLObject start_char_index = (SubLObject)cure_api.ZERO_INTEGER;
        SubLObject end_char_index = (SubLObject)cure_api.ZERO_INTEGER;
        final SubLObject whole_html_string = pph_phrase.pph_phrase_output_list_string(olist, (SubLObject)cure_api.T);
        final SubLObject whole_string = pph_utilities.pph_remove_html_tags(whole_html_string, (SubLObject)cure_api.NIL);
        final SubLObject iterator = pph_data_structures.new_pph_phrase_output_list_iterator(olist);
        while (cure_api.NIL == pph_data_structures.pph_phrase_output_list_iterator_empty_p(iterator)) {
            final SubLObject item = pph_data_structures.pph_phrase_output_list_iterator_next(iterator);
            final SubLObject raw_item_string = pph_phrase.pph_phrase_output_item_get_string(item, (SubLObject)cure_api.NIL);
            start_char_index = pph_macros.pph_output_list_find_start_char(raw_item_string, whole_string, end_char_index);
            if (start_char_index.numG(end_char_index)) {
                final SubLObject v_pph_string = pph_macros.pph_make_space_string(start_char_index, end_char_index);
                final SubLObject arg_position = pph_utilities.pph_unknown_arg_position();
                final SubLObject html_open_tag = (SubLObject)cure_api.NIL;
                final SubLObject html_close_tag = (SubLObject)cure_api.NIL;
                final SubLObject paranoid_arg = pph_phrase.pph_empty_cycl();
                final SubLObject item_$76 = pph_question.new_pph_phrase_filler_item(v_pph_string);
                final SubLObject start_char_index_$77 = end_char_index;
                final SubLObject string = pph_string.pph_string_to_cycl(v_pph_string);
                final SubLObject item_cycl = pph_data_structures.pph_phrase_output_item_cycl(item_$76);
                final SubLObject arg_pos = pph_data_structures.pph_phrase_output_item_arg_position(item_$76);
                final SubLObject current_value = (cure_api.NIL != cycl_grammar.cycl_variable_p(item_cycl)) ? bindings.variable_lookup(item_cycl, current_bindings) : item_cycl;
                final SubLObject duplicatableP = subl_promotions.memberP(arg_pos, list_item_arg_poses, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED);
                final SubLObject agr_preds = (SubLObject)((cure_api.NIL != pph_data_structures.pph_phrase_output_item_agr_pred(item_$76)) ? ConsesLow.list(pph_data_structures.pph_phrase_output_item_agr_pred(item_$76)) : cure_api.$kw20$DEFAULT);
                if (cure_api.NIL != term_learner_unmodifiable_statusP(status_$75) && item_cycl.isString()) {
                    renderers = (SubLObject)ConsesLow.cons(new_term_learner_string_renderer(string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), renderers);
                }
                else if (cure_api.NIL != term_learner_unmodifiable_statusP(status_$75)) {
                    renderers = (SubLObject)ConsesLow.cons(new_term_learner_string_renderer(string, item_cycl, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), renderers);
                }
                else if (item_cycl.isString() && cure_api.NIL == pph_utilities.pph_unknown_arg_position_p(pph_data_structures.pph_phrase_output_item_arg_position(item_$76))) {
                    renderers = (SubLObject)ConsesLow.cons(new_term_learner_uninterpreted_renderer(string, arg_pos, sentence), renderers);
                }
                else if (cure_api.NIL != subl_promotions.memberP(item_cycl, open_query_variables, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL != constraint_filters.any_spec_ofP(at_var_types.formula_variable_isa_constraints(item_cycl, original_sentence, cure_api.$const64$InferencePSC, (SubLObject)cure_api.UNPROVIDED), cure_api.$const457$CharacterString, cure_api.$const64$InferencePSC)) {
                    renderers = (SubLObject)ConsesLow.cons(new_term_learner_uninterpreted_renderer((SubLObject)cure_api.$str50$, arg_pos, sentence), renderers);
                }
                else if (cure_api.NIL != constraint_filters.any_spec_ofP(at_var_types.formula_variable_isa_constraints(item_cycl, original_sentence, cure_api.$const64$InferencePSC, (SubLObject)cure_api.UNPROVIDED), cure_api.$const457$CharacterString, cure_api.$const64$InferencePSC)) {
                    renderers = (SubLObject)ConsesLow.cons(new_term_learner_uninterpreted_renderer(item_cycl, arg_pos, sentence), renderers);
                }
                else if (cure_api.NIL != get_suggested_cycls_for_arg_pos(suggestions, arg_pos)) {
                    final SubLObject arg_suggestions = get_suggested_cycls_for_arg_pos(suggestions, arg_pos);
                    final SubLObject arg_constraints = html_complete.get_arg_constraints_for_arg(sentence, arg_pos, domain_mt);
                    final SubLObject suggestions_and_current_value = (cure_api.NIL != current_value) ? list_utilities.snoc(current_value, Sequences.remove(current_value, arg_suggestions, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) : list_utilities.snoc((SubLObject)cure_api.$kw489$CHOOSE_A_VALUE, arg_suggestions);
                    final SubLObject selected_suggestion = (SubLObject)((cure_api.NIL != current_value) ? get_initial_suggestion_from_suggestions(arg_suggestions, current_value) : cure_api.$str490$Choose_a_value);
                    final SubLObject triples = (cure_api.NIL != list_utilities.lengthL(arg_suggestions, (SubLObject)cure_api.$int491$40, (SubLObject)cure_api.UNPROVIDED)) ? make_nl_cycl_valid_triples_for_cycls(suggestions_and_current_value, agr_preds) : make_nl_cycl_valid_triples_for_cycls(conses_high.last(suggestions_and_current_value, (SubLObject)cure_api.UNPROVIDED), agr_preds);
                    renderers = (SubLObject)ConsesLow.cons(new_term_learner_open_select_renderer(arg_pos, triples, selected_suggestion, arg_constraints, (SubLObject)cure_api.UNPROVIDED), renderers);
                }
                else if (cure_api.NIL != subl_promotions.memberP(item_cycl, open_query_variables, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                    final SubLObject arg_constraints2 = html_complete.get_arg_constraints_for_arg(sentence, arg_pos, domain_mt);
                    renderers = (SubLObject)ConsesLow.cons(new_term_learner_open_select_renderer(arg_pos, make_nl_cycl_valid_triples_for_cycls((SubLObject)((cure_api.NIL != current_value) ? ConsesLow.list(current_value) : cure_api.NIL), agr_preds), current_value, arg_constraints2, duplicatableP), renderers);
                }
                else if (cure_api.NIL != subl_promotions.memberP(arg_pos, open_query_var_arg_poses, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                    final SubLObject arg_constraints2 = html_complete.get_arg_constraints_for_arg(sentence, arg_pos, domain_mt);
                    renderers = (SubLObject)ConsesLow.cons(new_term_learner_open_select_renderer(arg_pos, make_nl_cycl_valid_triples_for_cycls((SubLObject)ConsesLow.list(cycl_utilities.formula_arg_position(sentence, arg_pos, (SubLObject)cure_api.UNPROVIDED)), agr_preds), current_value, arg_constraints2, (SubLObject)cure_api.T), renderers);
                }
                else if (cure_api.NIL != duplicatableP) {
                    final SubLObject arg_suggestions = get_suggested_cycls_for_arg_pos(suggestions, arg_pos);
                    final SubLObject arg_constraints = html_complete.get_arg_constraints_for_arg(sentence, arg_pos, domain_mt);
                    final SubLObject suggestions_and_current_value = (cure_api.NIL != current_value) ? list_utilities.snoc(current_value, Sequences.remove(current_value, arg_suggestions, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) : list_utilities.snoc((SubLObject)cure_api.$kw489$CHOOSE_A_VALUE, arg_suggestions);
                    final SubLObject selected_suggestion = (SubLObject)((cure_api.NIL != current_value) ? get_initial_suggestion_from_suggestions(arg_suggestions, current_value) : cure_api.$str490$Choose_a_value);
                    final SubLObject triples = (cure_api.NIL != list_utilities.lengthL(arg_suggestions, (SubLObject)cure_api.$int491$40, (SubLObject)cure_api.UNPROVIDED)) ? make_nl_cycl_valid_triples_for_cycls(suggestions_and_current_value, agr_preds) : make_nl_cycl_valid_triples_for_cycls(conses_high.last(suggestions_and_current_value, (SubLObject)cure_api.UNPROVIDED), agr_preds);
                    renderers = (SubLObject)ConsesLow.cons(new_term_learner_open_select_renderer(arg_pos, triples, selected_suggestion, arg_constraints, (SubLObject)cure_api.T), renderers);
                }
                else if ((cure_api.NIL == cure_api.$cure_allow_some_predicates_to_be_edited$.getDynamicValue(thread) || !arg_pos.equalp((SubLObject)cure_api.$list492)) && cure_api.NIL != cure_editable_itemP(item_cycl, allow_arbitrary_editsP)) {
                    final SubLObject arg_constraints2 = html_complete.get_arg_constraints_for_arg(sentence, arg_pos, domain_mt);
                    renderers = (SubLObject)ConsesLow.cons(new_term_learner_open_select_renderer(arg_pos, make_nl_cycl_valid_triples_for_cycls((SubLObject)((cure_api.NIL != current_value) ? ConsesLow.list(item_cycl) : cure_api.NIL), agr_preds), item_cycl, arg_constraints2, (SubLObject)cure_api.UNPROVIDED), renderers);
                }
                else if (cure_api.NIL != forts.fort_p(item_cycl)) {
                    renderers = (SubLObject)ConsesLow.cons(new_term_learner_string_renderer(string, item_cycl, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), renderers);
                }
                else {
                    renderers = (SubLObject)ConsesLow.cons(new_term_learner_string_renderer(string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), renderers);
                }
            }
            end_char_index = pph_macros.pph_update_end_char_index(start_char_index, raw_item_string);
            final SubLObject v_pph_string = pph_phrase.pph_phrase_output_item_get_string(item, (SubLObject)cure_api.NIL);
            final SubLObject arg_position = pph_data_structures.pph_phrase_output_item_arg_position(item);
            final SubLObject html_open_tag = pph_data_structures.pph_phrase_output_item_html_open_tag(item);
            final SubLObject html_close_tag = pph_data_structures.pph_phrase_output_item_html_close_tag(item);
            final SubLObject paranoid_arg = pph_data_structures.pph_phrase_output_item_cycl(item);
            final SubLObject item_$77 = item;
            final SubLObject string2 = pph_string.pph_string_to_cycl(v_pph_string);
            final SubLObject item_cycl2 = pph_data_structures.pph_phrase_output_item_cycl(item_$77);
            final SubLObject arg_pos2 = pph_data_structures.pph_phrase_output_item_arg_position(item_$77);
            final SubLObject current_value2 = (cure_api.NIL != cycl_grammar.cycl_variable_p(item_cycl2)) ? bindings.variable_lookup(item_cycl2, current_bindings) : item_cycl2;
            final SubLObject duplicatableP2 = subl_promotions.memberP(arg_pos2, list_item_arg_poses, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED);
            final SubLObject agr_preds2 = (SubLObject)((cure_api.NIL != pph_data_structures.pph_phrase_output_item_agr_pred(item_$77)) ? ConsesLow.list(pph_data_structures.pph_phrase_output_item_agr_pred(item_$77)) : cure_api.$kw20$DEFAULT);
            if (cure_api.NIL != term_learner_unmodifiable_statusP(status_$75) && item_cycl2.isString()) {
                renderers = (SubLObject)ConsesLow.cons(new_term_learner_string_renderer(string2, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), renderers);
            }
            else if (cure_api.NIL != term_learner_unmodifiable_statusP(status_$75)) {
                renderers = (SubLObject)ConsesLow.cons(new_term_learner_string_renderer(string2, item_cycl2, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), renderers);
            }
            else if (item_cycl2.isString() && cure_api.NIL == pph_utilities.pph_unknown_arg_position_p(pph_data_structures.pph_phrase_output_item_arg_position(item_$77))) {
                renderers = (SubLObject)ConsesLow.cons(new_term_learner_uninterpreted_renderer(string2, arg_pos2, sentence), renderers);
            }
            else if (cure_api.NIL != subl_promotions.memberP(item_cycl2, open_query_variables, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL != constraint_filters.any_spec_ofP(at_var_types.formula_variable_isa_constraints(item_cycl2, original_sentence, cure_api.$const64$InferencePSC, (SubLObject)cure_api.UNPROVIDED), cure_api.$const457$CharacterString, cure_api.$const64$InferencePSC)) {
                renderers = (SubLObject)ConsesLow.cons(new_term_learner_uninterpreted_renderer((SubLObject)cure_api.$str50$, arg_pos2, sentence), renderers);
            }
            else if (cure_api.NIL != constraint_filters.any_spec_ofP(at_var_types.formula_variable_isa_constraints(item_cycl2, original_sentence, cure_api.$const64$InferencePSC, (SubLObject)cure_api.UNPROVIDED), cure_api.$const457$CharacterString, cure_api.$const64$InferencePSC)) {
                renderers = (SubLObject)ConsesLow.cons(new_term_learner_uninterpreted_renderer(item_cycl2, arg_pos2, sentence), renderers);
            }
            else if (cure_api.NIL != get_suggested_cycls_for_arg_pos(suggestions, arg_pos2)) {
                final SubLObject arg_suggestions2 = get_suggested_cycls_for_arg_pos(suggestions, arg_pos2);
                final SubLObject arg_constraints2 = html_complete.get_arg_constraints_for_arg(sentence, arg_pos2, domain_mt);
                final SubLObject suggestions_and_current_value2 = (cure_api.NIL != current_value2) ? list_utilities.snoc(current_value2, Sequences.remove(current_value2, arg_suggestions2, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) : list_utilities.snoc((SubLObject)cure_api.$kw489$CHOOSE_A_VALUE, arg_suggestions2);
                final SubLObject selected_suggestion2 = (SubLObject)((cure_api.NIL != current_value2) ? get_initial_suggestion_from_suggestions(arg_suggestions2, current_value2) : cure_api.$str490$Choose_a_value);
                final SubLObject triples2 = (cure_api.NIL != list_utilities.lengthL(arg_suggestions2, (SubLObject)cure_api.$int491$40, (SubLObject)cure_api.UNPROVIDED)) ? make_nl_cycl_valid_triples_for_cycls(suggestions_and_current_value2, agr_preds2) : make_nl_cycl_valid_triples_for_cycls(conses_high.last(suggestions_and_current_value2, (SubLObject)cure_api.UNPROVIDED), agr_preds2);
                renderers = (SubLObject)ConsesLow.cons(new_term_learner_open_select_renderer(arg_pos2, triples2, selected_suggestion2, arg_constraints2, (SubLObject)cure_api.UNPROVIDED), renderers);
            }
            else if (cure_api.NIL != subl_promotions.memberP(item_cycl2, open_query_variables, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                final SubLObject arg_constraints3 = html_complete.get_arg_constraints_for_arg(sentence, arg_pos2, domain_mt);
                renderers = (SubLObject)ConsesLow.cons(new_term_learner_open_select_renderer(arg_pos2, make_nl_cycl_valid_triples_for_cycls((SubLObject)((cure_api.NIL != current_value2) ? ConsesLow.list(current_value2) : cure_api.NIL), agr_preds2), current_value2, arg_constraints3, duplicatableP2), renderers);
            }
            else if (cure_api.NIL != subl_promotions.memberP(arg_pos2, open_query_var_arg_poses, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                final SubLObject arg_constraints3 = html_complete.get_arg_constraints_for_arg(sentence, arg_pos2, domain_mt);
                renderers = (SubLObject)ConsesLow.cons(new_term_learner_open_select_renderer(arg_pos2, make_nl_cycl_valid_triples_for_cycls((SubLObject)ConsesLow.list(cycl_utilities.formula_arg_position(sentence, arg_pos2, (SubLObject)cure_api.UNPROVIDED)), agr_preds2), current_value2, arg_constraints3, (SubLObject)cure_api.T), renderers);
            }
            else if (cure_api.NIL != duplicatableP2) {
                final SubLObject arg_suggestions2 = get_suggested_cycls_for_arg_pos(suggestions, arg_pos2);
                final SubLObject arg_constraints2 = html_complete.get_arg_constraints_for_arg(sentence, arg_pos2, domain_mt);
                final SubLObject suggestions_and_current_value2 = (cure_api.NIL != current_value2) ? list_utilities.snoc(current_value2, Sequences.remove(current_value2, arg_suggestions2, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) : list_utilities.snoc((SubLObject)cure_api.$kw489$CHOOSE_A_VALUE, arg_suggestions2);
                final SubLObject selected_suggestion2 = (SubLObject)((cure_api.NIL != current_value2) ? get_initial_suggestion_from_suggestions(arg_suggestions2, current_value2) : cure_api.$str490$Choose_a_value);
                final SubLObject triples2 = (cure_api.NIL != list_utilities.lengthL(arg_suggestions2, (SubLObject)cure_api.$int491$40, (SubLObject)cure_api.UNPROVIDED)) ? make_nl_cycl_valid_triples_for_cycls(suggestions_and_current_value2, agr_preds2) : make_nl_cycl_valid_triples_for_cycls(conses_high.last(suggestions_and_current_value2, (SubLObject)cure_api.UNPROVIDED), agr_preds2);
                renderers = (SubLObject)ConsesLow.cons(new_term_learner_open_select_renderer(arg_pos2, triples2, selected_suggestion2, arg_constraints2, (SubLObject)cure_api.T), renderers);
            }
            else if ((cure_api.NIL == cure_api.$cure_allow_some_predicates_to_be_edited$.getDynamicValue(thread) || !arg_pos2.equalp((SubLObject)cure_api.$list492)) && cure_api.NIL != cure_editable_itemP(item_cycl2, allow_arbitrary_editsP)) {
                final SubLObject arg_constraints3 = html_complete.get_arg_constraints_for_arg(sentence, arg_pos2, domain_mt);
                renderers = (SubLObject)ConsesLow.cons(new_term_learner_open_select_renderer(arg_pos2, make_nl_cycl_valid_triples_for_cycls((SubLObject)((cure_api.NIL != current_value2) ? ConsesLow.list(item_cycl2) : cure_api.NIL), agr_preds2), item_cycl2, arg_constraints3, (SubLObject)cure_api.UNPROVIDED), renderers);
            }
            else if (cure_api.NIL != forts.fort_p(item_cycl2)) {
                renderers = (SubLObject)ConsesLow.cons(new_term_learner_string_renderer(string2, item_cycl2, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), renderers);
            }
            else {
                renderers = (SubLObject)ConsesLow.cons(new_term_learner_string_renderer(string2, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), renderers);
            }
        }
        return new_term_learner_type_int(sentence, default_weight, justifications, fragment_justification, (SubLObject)cure_api.$str50$, sentence, status_$75, Sequences.nreverse(renderers), original_sentence, (SubLObject)cure_api.T, (SubLObject)cure_api.T, approval_code, unassertible_sentence_ids);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 137406L)
    public static SubLObject cure_list_item_arg_poses(final SubLObject sentence) {
        SubLObject unmergeable = (SubLObject)cure_api.NIL;
        SubLObject list_arg_poses = (SubLObject)cure_api.NIL;
        final SubLObject arg_stack = stacks.create_stack();
        final SubLObject pos_stack = stacks.create_stack();
        SubLObject arg = (SubLObject)cure_api.NIL;
        SubLObject argpos = (SubLObject)cure_api.NIL;
        stacks.stack_push(sentence, arg_stack);
        stacks.stack_push(argpos, pos_stack);
        while (cure_api.NIL == stacks.stack_empty_p(arg_stack)) {
            final SubLObject entry = stacks.stack_pop(arg_stack);
            final SubLObject pos_entry = stacks.stack_pop(pos_stack);
            arg = entry;
            argpos = pos_entry;
            if (cycl_utilities.formula_arg0(arg).eql(cure_api.$const459$TheList)) {
                SubLObject arg_num = (SubLObject)cure_api.ZERO_INTEGER;
                SubLObject cdolist_list_var;
                final SubLObject args = cdolist_list_var = cycl_utilities.formula_args(arg, (SubLObject)cure_api.$kw493$IGNORE);
                SubLObject list_arg = (SubLObject)cure_api.NIL;
                list_arg = cdolist_list_var.first();
                while (cure_api.NIL != cdolist_list_var) {
                    arg_num = Numbers.add(arg_num, (SubLObject)cure_api.ONE_INTEGER);
                    final SubLObject item_var = argpos;
                    if (cure_api.NIL == conses_high.member(item_var, list_arg_poses, Symbols.symbol_function((SubLObject)cure_api.EQUAL), Symbols.symbol_function((SubLObject)cure_api.IDENTITY))) {
                        list_arg_poses = (SubLObject)ConsesLow.cons(item_var, list_arg_poses);
                    }
                    unmergeable = (SubLObject)ConsesLow.cons(list_utilities.snoc(arg_num, argpos), unmergeable);
                    cdolist_list_var = cdolist_list_var.rest();
                    list_arg = cdolist_list_var.first();
                }
            }
            final SubLObject terms = cycl_utilities.formula_terms(entry, (SubLObject)cure_api.$kw493$IGNORE);
            SubLObject list_var = (SubLObject)cure_api.NIL;
            SubLObject arg_$79 = (SubLObject)cure_api.NIL;
            SubLObject arg_num2 = (SubLObject)cure_api.NIL;
            list_var = terms;
            arg_$79 = list_var.first();
            for (arg_num2 = (SubLObject)cure_api.ZERO_INTEGER; cure_api.NIL != list_var; list_var = list_var.rest(), arg_$79 = list_var.first(), arg_num2 = number_utilities.f_1X(arg_num2)) {
                stacks.stack_push(arg_$79, arg_stack);
                stacks.stack_push(list_utilities.snoc(arg_num2, argpos), pos_stack);
            }
        }
        return Values.values(unmergeable, list_arg_poses);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 138504L)
    public static SubLObject cure_editable_itemP(final SubLObject cycl, SubLObject allow_arbitrary_editsP) {
        if (allow_arbitrary_editsP == cure_api.UNPROVIDED) {
            allow_arbitrary_editsP = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL == allow_arbitrary_editsP) {
            return (SubLObject)cure_api.NIL;
        }
        if (cure_api.NIL != cure_api.$cure_allow_some_predicates_to_be_edited$.getDynamicValue(thread) && cure_api.NIL != fort_types_interface.predicate_p(cycl)) {
            return (SubLObject)cure_api.T;
        }
        if (cure_api.NIL != fort_types_interface.relation_p(cycl)) {
            return (SubLObject)cure_api.NIL;
        }
        if (cure_api.NIL != cycl_utilities.fort_or_naut_p(cycl)) {
            return (SubLObject)cure_api.T;
        }
        if (cycl.isNumber()) {
            return (SubLObject)cure_api.T;
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 138846L)
    public static SubLObject cyc_terms_to_term_learner_terms(final SubLObject terms) {
        SubLObject result = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = terms;
        SubLObject v_term = (SubLObject)cure_api.NIL;
        v_term = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list((SubLObject)cure_api.$kw117$CYCL, v_term, (SubLObject)cure_api.$kw119$CONCEPT_ID, document_annotation_widgets.term_learner_id(v_term)), result);
            cdolist_list_var = cdolist_list_var.rest();
            v_term = cdolist_list_var.first();
        }
        return Sequences.nreverse(result);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 139053L)
    public static SubLObject new_term_learner_uninterpreted_renderer(final SubLObject string, final SubLObject arg_pos, SubLObject current_sentence) {
        if (current_sentence == cure_api.UNPROVIDED) {
            current_sentence = (SubLObject)cure_api.NIL;
        }
        if (cure_api.NIL != term_learner_documentation_sentenceP(current_sentence)) {
            return new_term_learner_modifiable_text_renderer(cycl_string.cycl_string_trim((SubLObject)cure_api.$list494, string), arg_pos);
        }
        return new_term_learner_modifiable_string_renderer(cycl_string.cycl_string_trim((SubLObject)cure_api.$list494, string), arg_pos);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 139417L)
    public static SubLObject term_learner_types_for_sentence(final SubLObject sentence, final SubLObject user, SubLObject allow_arbitrary_editsP) {
        if (allow_arbitrary_editsP == cure_api.UNPROVIDED) {
            allow_arbitrary_editsP = (SubLObject)cure_api.NIL;
        }
        return term_learner_types_for_sentence_id(kb_utilities.compact_hl_external_id_string(sentence), user, allow_arbitrary_editsP, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 139631L)
    public static SubLObject term_learner_types_for_sentence_id(final SubLObject sentence_id, final SubLObject user, SubLObject allow_arbitrary_editsP, SubLObject arg_pos_to_modify, SubLObject modify_command, SubLObject prevent_unassertP) {
        if (allow_arbitrary_editsP == cure_api.UNPROVIDED) {
            allow_arbitrary_editsP = (SubLObject)cure_api.NIL;
        }
        if (arg_pos_to_modify == cure_api.UNPROVIDED) {
            arg_pos_to_modify = (SubLObject)cure_api.NIL;
        }
        if (modify_command == cure_api.UNPROVIDED) {
            modify_command = (SubLObject)cure_api.NIL;
        }
        if (prevent_unassertP == cure_api.UNPROVIDED) {
            prevent_unassertP = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym496$TERM_LEARNER_TYPES_FOR_SENTENCE_ID, sentence_id, user, allow_arbitrary_editsP, arg_pos_to_modify, modify_command, prevent_unassertP));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym496$TERM_LEARNER_TYPES_FOR_SENTENCE_ID, sentence_id, user, allow_arbitrary_editsP, arg_pos_to_modify, modify_command, prevent_unassertP));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject task = default_task_for_user(user);
        final SubLObject pph_mt = cure_default_generation_mt(task);
        final SubLObject orig_sentence = document_annotation_widgets.term_learner_object_from_id(sentence_id);
        final SubLObject new_sentence = cure_possibly_duplicate_arg(orig_sentence, arg_pos_to_modify, modify_command);
        final SubLObject justifications = (SubLObject)ConsesLow.list(new_term_learner_justification((SubLObject)cure_api.$str50$, (SubLObject)cure_api.$str50$, (SubLObject)cure_api.$kw97$USER, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
        final SubLObject vars = el_utilities.sentence_free_variables(new_sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject arg_positions = get_arg_positions_for_terms_in_sentence(new_sentence, vars);
        final SubLObject domain_mt = query_mt_for_user_and_task(user, task);
        final SubLObject suggestions = term_learner_candidate_replacements_for_arg_positions_in_sentence(arg_positions, new_sentence, cure_api.$const64$InferencePSC);
        return (SubLObject)ConsesLow.list(term_learner_type_for_fragment_int(new_sentence, domain_mt, new_sentence, (SubLObject)cure_api.NIL, suggestions, (SubLObject)cure_api.NIL, justifications, pph_mt, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, allow_arbitrary_editsP, prevent_unassertP));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 140941L)
    public static SubLObject cure_possibly_duplicate_arg(SubLObject sentence, final SubLObject arg_pos_string, final SubLObject command_string) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL == cure_api.$cure_edit_the_list_termsP$.getDynamicValue(thread)) {
            return sentence;
        }
        if (!arg_pos_string.isString()) {
            return sentence;
        }
        final SubLObject arg_pos = reader.read_from_string_ignoring_errors(arg_pos_string, (SubLObject)cure_api.NIL, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        if (cure_api.NIL != subl_promotions.memberP(command_string, (SubLObject)cure_api.$list497, Symbols.symbol_function((SubLObject)cure_api.EQUALP), (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL != cycl_utilities.arg_position_p(arg_pos)) {
            final SubLObject original_arg = cycl_utilities.formula_arg_position(sentence, conses_high.butlast(arg_pos, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED);
            final SubLObject new_arg_pos = command_string.equal((SubLObject)cure_api.$str498$add_before) ? Numbers.subtract(conses_high.last(arg_pos, (SubLObject)cure_api.UNPROVIDED).first(), (SubLObject)cure_api.ONE_INTEGER) : conses_high.last(arg_pos, (SubLObject)cure_api.UNPROVIDED).first();
            SubLObject new_arg = (SubLObject)cure_api.NIL;
            final SubLObject terms = cycl_utilities.formula_terms(original_arg, (SubLObject)cure_api.$kw493$IGNORE);
            SubLObject list_var = (SubLObject)cure_api.NIL;
            SubLObject v_term = (SubLObject)cure_api.NIL;
            SubLObject num = (SubLObject)cure_api.NIL;
            list_var = terms;
            v_term = list_var.first();
            for (num = (SubLObject)cure_api.ZERO_INTEGER; cure_api.NIL != list_var; list_var = list_var.rest(), v_term = list_var.first(), num = number_utilities.f_1X(num)) {
                new_arg = (SubLObject)ConsesLow.cons(v_term, new_arg);
                if (num.eql(new_arg_pos)) {
                    new_arg = (SubLObject)ConsesLow.cons((SubLObject)cure_api.$sym499$_NEW_VAR, new_arg);
                }
            }
            sentence = el_utilities.replace_formula_arg_position(conses_high.butlast(arg_pos, (SubLObject)cure_api.UNPROVIDED), Sequences.nreverse(new_arg), sentence);
        }
        else if (command_string.equal((SubLObject)cure_api.$str500$remove) && cure_api.NIL != cycl_utilities.arg_position_p(arg_pos)) {
            sentence = cycl_utilities.formula_arg_position_subst(cure_api.$delete_me_token$.getGlobalValue(), arg_pos, sentence);
            sentence = list_utilities.tree_delete(cure_api.$delete_me_token$.getGlobalValue(), sentence, Symbols.symbol_function((SubLObject)cure_api.EQ), (SubLObject)cure_api.UNPROVIDED);
        }
        else {
            Errors.warn((SubLObject)cure_api.$str501$can_t_duplicate_with_uninterpreta, command_string);
        }
        return sentence;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 142558L)
    public static SubLObject get_arg_positions_for_terms_in_sentence(final SubLObject sentence, final SubLObject vars) {
        SubLObject arg_positions = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = vars;
        SubLObject var = (SubLObject)cure_api.NIL;
        var = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            final SubLObject items_var = cycl_utilities.arg_positions_dfs(var, sentence, (SubLObject)cure_api.UNPROVIDED);
            if (items_var.isVector()) {
                final SubLObject vector_var = items_var;
                final SubLObject backwardP_var = (SubLObject)cure_api.NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject element_num;
                SubLObject item;
                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)cure_api.NIL, v_iteration = (SubLObject)cure_api.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)cure_api.ONE_INTEGER)) {
                    element_num = ((cure_api.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)cure_api.ONE_INTEGER) : v_iteration);
                    item = Vectors.aref(vector_var, element_num);
                    arg_positions = (SubLObject)ConsesLow.cons(item, arg_positions);
                }
            }
            else {
                SubLObject cdolist_list_var_$80 = items_var;
                SubLObject item2 = (SubLObject)cure_api.NIL;
                item2 = cdolist_list_var_$80.first();
                while (cure_api.NIL != cdolist_list_var_$80) {
                    arg_positions = (SubLObject)ConsesLow.cons(item2, arg_positions);
                    cdolist_list_var_$80 = cdolist_list_var_$80.rest();
                    item2 = cdolist_list_var_$80.first();
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            var = cdolist_list_var.first();
        }
        return arg_positions;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 142773L)
    public static SubLObject term_learner_documentation_sentenceP(final SubLObject cycl_sentence) {
        return isa.isaP(cycl_utilities.formula_arg0(cycl_sentence), cure_api.$const510$DocumentationPredicate, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 142913L)
    public static SubLObject get_initial_suggestion_from_suggestions(final SubLObject suggestions, SubLObject current_value) {
        if (current_value == cure_api.UNPROVIDED) {
            current_value = (SubLObject)cure_api.NIL;
        }
        if (cure_api.NIL != current_value) {
            return current_value;
        }
        if (cure_api.NIL != list_utilities.lengthE(suggestions, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.UNPROVIDED)) {
            return suggestions.first();
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 143340L)
    public static SubLObject get_suggested_cycls_for_arg_pos(final SubLObject suggestions, final SubLObject arg_pos) {
        final SubLObject suggestion_list = Sequences.find(arg_pos, suggestions, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.$sym405$FIRST, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        return suggestion_list.rest();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 143519L)
    public static SubLObject make_nl_cycl_valid_triples_for_cycls(final SubLObject cycls, SubLObject agr_preds) {
        if (agr_preds == cure_api.UNPROVIDED) {
            agr_preds = (SubLObject)cure_api.$kw20$DEFAULT;
        }
        final SubLObject generations = term_learner_cycl_terms_to_nl_strings(cycls, cure_default_generation_mt((SubLObject)cure_api.UNPROVIDED), agr_preds);
        SubLObject triples = (SubLObject)cure_api.NIL;
        SubLObject cycl = (SubLObject)cure_api.NIL;
        SubLObject cycl_$81 = (SubLObject)cure_api.NIL;
        SubLObject generation_list = (SubLObject)cure_api.NIL;
        SubLObject generation_list_$82 = (SubLObject)cure_api.NIL;
        cycl = cycls;
        cycl_$81 = cycl.first();
        generation_list = generations;
        generation_list_$82 = generation_list.first();
        while (cure_api.NIL != generation_list || cure_api.NIL != cycl) {
            if (cycl_$81.equal((SubLObject)cure_api.$kw489$CHOOSE_A_VALUE)) {
                triples = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list((SubLObject)cure_api.$str490$Choose_a_value, (SubLObject)cure_api.$str490$Choose_a_value, (SubLObject)cure_api.NIL), triples);
            }
            else if (cure_api.NIL == cycl_grammar.cycl_variable_p(cycl_$81)) {
                triples = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(generation_list_$82, cycl_$81, (SubLObject)cure_api.T), triples);
            }
            cycl = cycl.rest();
            cycl_$81 = cycl.first();
            generation_list = generation_list.rest();
            generation_list_$82 = generation_list.first();
        }
        return triples;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 144034L)
    public static SubLObject term_learner_terms_mergeableP(final SubLObject t1, final SubLObject t2, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)cure_api.NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            if (cure_api.NIL != kb_accessors.individualP(t1) && cure_api.NIL != kb_accessors.individualP(t2)) {
                result = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == disjoint_with.instances_of_disjoint_collectionsP(t1, t2, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
            }
            else if (cure_api.NIL != fort_types_interface.collectionP(t1) && cure_api.NIL != fort_types_interface.collectionP(t2)) {
                result = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == disjoint_with.collections_disjointP(t1, t2, (SubLObject)cure_api.UNPROVIDED));
            }
            else if ((cure_api.NIL != fort_types_interface.collectionP(t1) && genls.min_genls(t1, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED).equal((SubLObject)ConsesLow.list(cure_api.$const49$Collection))) || (cure_api.NIL != fort_types_interface.collectionP(t2) && genls.min_genls(t2, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED).equal((SubLObject)ConsesLow.list(cure_api.$const49$Collection))) || (cure_api.NIL != kb_accessors.individualP(t2) && isa.min_isa(t2, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED).equal((SubLObject)ConsesLow.list(cure_api.$const48$Individual))) || (cure_api.NIL != kb_accessors.individualP(t1) && isa.min_isa(t1, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED).equal((SubLObject)ConsesLow.list(cure_api.$const48$Individual)))) {
                result = (SubLObject)cure_api.T;
            }
            else if ((cure_api.NIL != fort_types_interface.collectionP(t1) && cure_api.NIL != kb_accessors.individualP(t2)) || (cure_api.NIL != kb_accessors.individualP(t1) && cure_api.NIL != fort_types_interface.collectionP(t2))) {
                result = (SubLObject)cure_api.NIL;
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 145074L)
    public static SubLObject term_learner_string_denots(final SubLObject string) {
        final SubLObject lex_entries = methods.funcall_instance_method_with_1_args(document_annotation_widgets.get_default_document_ingester_annotation_lexicon((SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.$sym34$GET, string);
        final SubLObject cycls = term_lexicon.denots_for_term_lexicon_entries(lex_entries);
        return cycls;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 145431L)
    public static SubLObject term_learner_sentence_assertibleP(final SubLObject sentence, final SubLObject mt) {
        if (cure_api.NIL != el_utilities.el_formula_with_operator_p(sentence, cure_api.$const511$equals)) {
            return term_learner_terms_mergeableP(cycl_utilities.formula_arg1(sentence, (SubLObject)cure_api.UNPROVIDED), cycl_utilities.formula_arg2(sentence, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED);
        }
        return term_learner_sentence_assertible_intP(sentence, mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 145706L)
    public static SubLObject term_learner_sentence_assertible_intP(final SubLObject sentence, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)cure_api.NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        final SubLObject _prev_bind_4 = control_vars.$within_assert$.currentBinding(thread);
        final SubLObject _prev_bind_5 = wff_vars.$validate_expansionsP$.currentBinding(thread);
        final SubLObject _prev_bind_6 = wff_vars.$wff_mode$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            control_vars.$within_assert$.bind((SubLObject)cure_api.T, thread);
            wff_vars.$validate_expansionsP$.bind((SubLObject)cure_api.T, thread);
            wff_vars.$wff_mode$.bind((SubLObject)cure_api.$kw512$LENIENT, thread);
            result = wff.el_wffP(sentence, mt, (SubLObject)cure_api.UNPROVIDED);
        }
        finally {
            wff_vars.$wff_mode$.rebind(_prev_bind_6, thread);
            wff_vars.$validate_expansionsP$.rebind(_prev_bind_5, thread);
            control_vars.$within_assert$.rebind(_prev_bind_4, thread);
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 146073L)
    public static SubLObject get_sentence_from_template(final SubLObject term_string, final SubLObject term_id, final SubLObject sentence_template) {
        final SubLObject focal_term = document_annotation_widgets.term_learner_object_from_id(term_id);
        final SubLObject sentence = cycl_utilities.expression_subst(focal_term, (SubLObject)cure_api.$kw324$TERM, sentence_template, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED);
        return sentence;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 146337L)
    public static SubLObject term_learner_relevant_sentences_from_document(final SubLObject doc, final SubLObject v_term) {
        SubLObject relevant_sentences = (SubLObject)cure_api.NIL;
        final SubLObject vector_var = document.document_paragraphs(doc);
        final SubLObject backwardP_var = (SubLObject)cure_api.NIL;
        SubLObject length;
        SubLObject v_iteration;
        SubLObject element_num;
        SubLObject paragraph;
        SubLObject vector_var_$83;
        SubLObject backwardP_var_$84;
        SubLObject length_$85;
        SubLObject v_iteration_$86;
        SubLObject element_num_$87;
        SubLObject sentence;
        for (length = Sequences.length(vector_var), v_iteration = (SubLObject)cure_api.NIL, v_iteration = (SubLObject)cure_api.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)cure_api.ONE_INTEGER)) {
            element_num = ((cure_api.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)cure_api.ONE_INTEGER) : v_iteration);
            paragraph = Vectors.aref(vector_var, element_num);
            vector_var_$83 = document.paragraph_sentences(paragraph);
            backwardP_var_$84 = (SubLObject)cure_api.NIL;
            for (length_$85 = Sequences.length(vector_var_$83), v_iteration_$86 = (SubLObject)cure_api.NIL, v_iteration_$86 = (SubLObject)cure_api.ZERO_INTEGER; v_iteration_$86.numL(length_$85); v_iteration_$86 = Numbers.add(v_iteration_$86, (SubLObject)cure_api.ONE_INTEGER)) {
                element_num_$87 = ((cure_api.NIL != backwardP_var_$84) ? Numbers.subtract(length_$85, v_iteration_$86, (SubLObject)cure_api.ONE_INTEGER) : v_iteration_$86);
                sentence = Vectors.aref(vector_var_$83, element_num_$87);
                if (cure_api.NIL != string_utilities.substringP(v_term, document.sentence_string(sentence), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                    relevant_sentences = (SubLObject)ConsesLow.cons(sentence, relevant_sentences);
                }
            }
        }
        return relevant_sentences;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 146843L)
    public static SubLObject term_learner_relevant_sentences(final SubLObject sentences, final SubLObject v_term) {
        assert cure_api.NIL != Types.listp(sentences) : sentences;
        assert cure_api.NIL != Types.stringp(v_term) : v_term;
        SubLObject relevant_sentences = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = sentences;
        SubLObject sentence = (SubLObject)cure_api.NIL;
        sentence = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.NIL == string_utilities.empty_string_p(sentence) && cure_api.NIL != string_utilities.substringP(v_term, sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                final SubLObject item_var = sentence;
                if (cure_api.NIL == conses_high.member(item_var, relevant_sentences, Symbols.symbol_function((SubLObject)cure_api.EQL), Symbols.symbol_function((SubLObject)cure_api.IDENTITY))) {
                    relevant_sentences = (SubLObject)ConsesLow.cons(item_var, relevant_sentences);
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            sentence = cdolist_list_var.first();
        }
        return relevant_sentences;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 147332L)
    public static SubLObject term_learner_source_documentation_mt() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.$term_learner_source_documentation_mt$.getDynamicValue(thread) == cure_api.$kw177$UNINITIALIZED) {
            final SubLObject init_value = (cure_api.NIL != constants_high.find_constant((SubLObject)cure_api.$str514$WebDocumentsMt)) ? cure_api.$const515$WebDocumentsMt : cure_api.$const516$MassMediaDataMt;
            if (init_value == cure_api.$kw177$UNINITIALIZED) {
                Errors.error((SubLObject)cure_api.$str517$Unable_to_initialize__A__, cure_api.$term_learner_source_documentation_mt$.getDynamicValue(thread));
            }
            cure_api.$term_learner_source_documentation_mt$.setDynamicValue(init_value, thread);
        }
        return cure_api.$term_learner_source_documentation_mt$.getDynamicValue(thread);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 147864L)
    public static SubLObject cure_default_generation_mt(SubLObject task) {
        if (task == cure_api.UNPROVIDED) {
            task = cure_api.$current_tl_task$.getDynamicValue();
        }
        if (cure_api.NIL != task) {
            return query_library_utils.cae_default_paraphrase_mt(task);
        }
        return term_learner_default_generation_mt();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 148114L)
    public static SubLObject term_learner_default_generation_mt() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL == cure_api.$term_learner_default_generation_mt$.getDynamicValue(thread)) {
            cure_api.$term_learner_default_generation_mt$.setDynamicValue(pph_vars.default_pph_language_mt((SubLObject)ConsesLow.list(cure_api.$const520$TechnicalEnglishLexicalMt, cure_api.$const521$MedicalLexicalMt)), thread);
        }
        return cure_api.$term_learner_default_generation_mt$.getDynamicValue(thread);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 148401L)
    public static SubLObject term_learner_cycl_terms_to_nl_strings(final SubLObject terms, SubLObject mt, SubLObject preds) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_default_generation_mt((SubLObject)cure_api.UNPROVIDED);
        }
        if (preds == cure_api.UNPROVIDED) {
            preds = (SubLObject)cure_api.NIL;
        }
        SubLObject params = (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw522$PPH_LEXICAL_CONTEXT, mt);
        if (cure_api.NIL != preds) {
            params = conses_high.putf(params, (SubLObject)cure_api.$kw523$PPH_AGREEMENT, preds);
        }
        if (cure_api.NIL == terms) {
            return (SubLObject)cure_api.NIL;
        }
        return nl_generation_api.cycl_terms_to_nl_strings_internal(terms, nl_generation_api.new_pph_parameters(params));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 148771L)
    public static SubLObject term_learner_cycl_term_to_nl_string(final SubLObject v_term, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_default_generation_mt((SubLObject)cure_api.UNPROVIDED);
        }
        return nl_generation_api.cycl_term_to_nl_string_internal(v_term, nl_generation_api.new_pph_parameters((SubLObject)ConsesLow.list((SubLObject)cure_api.$kw522$PPH_LEXICAL_CONTEXT, mt)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 149007L)
    public static SubLObject merge_justifications_for_ordered_types(final SubLObject initial_results) {
        SubLObject final_result = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = initial_results;
        SubLObject initial_result = (SubLObject)cure_api.NIL;
        initial_result = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            final SubLObject initial_cyc_term = get_cycl(initial_result);
            final SubLObject known_results_for_term = Sequences.find(initial_cyc_term, final_result, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.$sym524$GET_CYCL, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            if (cure_api.NIL != known_results_for_term) {
                final SubLObject new_justification = conses_high.getf(initial_result, (SubLObject)cure_api.$kw162$JUSTIFICATION, (SubLObject)cure_api.UNPROVIDED);
                final SubLObject old_justification = conses_high.getf(known_results_for_term, (SubLObject)cure_api.$kw19$JUSTIFICATIONS, (SubLObject)cure_api.UNPROVIDED);
                conses_high.nsubst(Sequences.cconcatenate((SubLObject)ConsesLow.list(new_justification), old_justification), old_justification, known_results_for_term, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            }
            else {
                final SubLObject new_just_list = (SubLObject)ConsesLow.list(conses_high.getf(initial_result, (SubLObject)cure_api.$kw162$JUSTIFICATION, (SubLObject)cure_api.UNPROVIDED));
                SubLObject new_result = initial_result;
                new_result = list_utilities.plist_except(new_result, (SubLObject)cure_api.$list525);
                new_result = conses_high.putf(new_result, (SubLObject)cure_api.$kw19$JUSTIFICATIONS, new_just_list);
                final_result = (SubLObject)ConsesLow.cons(new_result, final_result);
            }
            cdolist_list_var = cdolist_list_var.rest();
            initial_result = cdolist_list_var.first();
        }
        return final_result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 149898L)
    public static SubLObject term_learner_handle_user_choice(final SubLObject choice_id, final SubLObject term_string, final SubLObject term_id, final SubLObject sentence_template, final SubLObject justifications, final SubLObject url, final SubLObject doc_title, final SubLObject user, final SubLObject accept_rejectP, SubLObject no_substitutions) {
        if (no_substitutions == cure_api.UNPROVIDED) {
            no_substitutions = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$sym526$TERM_LEARNER_HANDLE_USER_CHOICE, choice_id, term_string, term_id, sentence_template, justifications, url, doc_title, user, accept_rejectP, no_substitutions }));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$sym526$TERM_LEARNER_HANDLE_USER_CHOICE, choice_id, term_string, term_id, sentence_template, justifications, url, doc_title, user, accept_rejectP, no_substitutions }));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        SubLObject result = (SubLObject)cure_api.NIL;
        final SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
        final SubLObject _prev_bind_3 = rkf_macros.$rkf_asserting_tool$.currentBinding(thread);
        try {
            api_control_vars.$the_cyclist$.bind(user, thread);
            rkf_macros.$rkf_asserting_tool$.bind(cure_api.$const39$CycAssistedDocumentReader, thread);
            final SubLObject focal_term = (SubLObject)((cure_api.NIL != cycl_grammar.cycl_represented_term_p(document_annotation_widgets.maybe_term_learner_object_from_id(term_id))) ? document_annotation_widgets.term_learner_object_from_id(term_id) : cure_api.NIL);
            final SubLObject sentence = (cure_api.NIL == focal_term || cure_api.NIL != no_substitutions) ? sentence_template : cycl_utilities.expression_subst(focal_term, (SubLObject)cure_api.$kw324$TERM, sentence_template, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED);
            final SubLObject sentence_id = document_annotation_widgets.term_learner_id(sentence_template);
            final SubLObject _prev_bind_0_$88 = czer_vars.$simplify_using_semanticsP$.currentBinding(thread);
            try {
                czer_vars.$simplify_using_semanticsP$.bind((SubLObject)cure_api.NIL, thread);
                final SubLObject visible_sentence = simplifier.simplify_cycl_sentence(transform_list_utilities.transform(sentence, (SubLObject)cure_api.$sym527$TERM_EXPANSION_EXPECTED_SENTENCE_, (SubLObject)cure_api.$sym528$TRANSFORM_TO_TRUE, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED);
                SubLObject errors = (SubLObject)cure_api.NIL;
                if (accept_rejectP.eql((SubLObject)cure_api.$kw199$ACCEPT)) {
                    SubLObject cdolist_list_var;
                    final SubLObject mts = cdolist_list_var = get_mts_for_user_choice(url, doc_title, justifications, user, (SubLObject)cure_api.UNPROVIDED);
                    SubLObject mt = (SubLObject)cure_api.NIL;
                    mt = cdolist_list_var.first();
                    while (cure_api.NIL != cdolist_list_var) {
                        errors = (SubLObject)ConsesLow.cons(rkf_assertion_utilities.rkf_assert_with_implicature(sentence, mt, (SubLObject)cure_api.T), errors);
                        if (cure_api.NIL != focal_term && cure_api.NIL != string_utilities.non_empty_stringP(term_string)) {
                            term_learner_assert_lexical_info(focal_term, term_string, mt, cure_api.$term_learner_default_lexical_assertion_mt$.getDynamicValue(thread), (SubLObject)cure_api.UNPROVIDED);
                        }
                        if (cure_api.NIL != czer_meta.find_assertions_cycl((SubLObject)ConsesLow.list(cure_api.$const53$inProgressTerm, focal_term), (SubLObject)cure_api.UNPROVIDED)) {
                            rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const210$termDependsOn, focal_term, mts.first()), cure_api.$const211$UniversalVocabularyMt, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                            term_learner_lexify_from_termstrings(focal_term, cure_api.$term_learner_default_lexical_assertion_mt$.getDynamicValue(thread), mt);
                            rkf_assertion_utilities.rkf_unassert((SubLObject)ConsesLow.list(cure_api.$const53$inProgressTerm, focal_term), cure_api.$const211$UniversalVocabularyMt);
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        mt = cdolist_list_var.first();
                    }
                    note_accepted_choice(term_string, focal_term, sentence, justifications, user);
                }
                else if (accept_rejectP.eql((SubLObject)cure_api.$kw196$REJECT)) {
                    final SubLObject query_mt = find_query_mt_from_justifications(justifications, user);
                    SubLObject cdolist_list_var2;
                    final SubLObject asserted_mts = cdolist_list_var2 = Mapping.mapcar((SubLObject)cure_api.$sym529$ASSERTION_MT, czer_meta.find_visible_assertions_cycl(sentence, query_mt));
                    SubLObject mt2 = (SubLObject)cure_api.NIL;
                    mt2 = cdolist_list_var2.first();
                    while (cure_api.NIL != cdolist_list_var2) {
                        errors = (SubLObject)ConsesLow.cons(rkf_assertion_utilities.rkf_unassert(sentence, mt2), errors);
                        cdolist_list_var2 = cdolist_list_var2.rest();
                        mt2 = cdolist_list_var2.first();
                    }
                }
                errors = Sequences.remove((SubLObject)cure_api.T, errors, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                if (cure_api.NIL != errors) {
                    result = (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw123$STATUS_CODE, (SubLObject)cure_api.FIVE_INTEGER, (SubLObject)cure_api.$kw530$CHOICE_ID, choice_id, (SubLObject)cure_api.$kw162$JUSTIFICATION, Sequences.cconcatenate((SubLObject)cure_api.$str531$Error_while_trying_to_handle_, new SubLObject[] { format_nil.format_nil_a_no_copy(sentence), format_nil.$format_nil_percent$.getGlobalValue() }));
                }
                else if (accept_rejectP == cure_api.$kw199$ACCEPT) {
                    final SubLObject nl_string = get_nl_generation_for_user_added_sentence(visible_sentence);
                    final SubLObject new_sentence_id = document_annotation_widgets.term_learner_id(sentence);
                    final SubLObject utf8_sentence = unicode_nauts.convert_unicode_nauts_to_utf8_strings(sentence);
                    result = (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$kw123$STATUS_CODE, cure_api.ONE_INTEGER, cure_api.$kw530$CHOICE_ID, choice_id, cure_api.$kw173$SENTENCE_ID, sentence_id, cure_api.$kw532$NEW_SENTENCE_CYCL, utf8_sentence, cure_api.$kw174$NEW_SENTENCE_ID, new_sentence_id, cure_api.$kw120$NL_STRING, nl_string });
                    SubLObject ignore_errors_tag = (SubLObject)cure_api.NIL;
                    try {
                        thread.throwStack.push(cure_api.$kw40$IGNORE_ERRORS_TARGET);
                        final SubLObject _prev_bind_0_$89 = Errors.$error_handler$.currentBinding(thread);
                        try {
                            Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cure_api.$sym41$IGNORE_ERRORS_HANDLER), thread);
                            try {
                                fact_sheets.update_fact_sheet_data_for_term_and_user_added_sentence(focal_term, visible_sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                            }
                            catch (Throwable catch_var) {
                                Errors.handleThrowable(catch_var, (SubLObject)cure_api.NIL);
                            }
                        }
                        finally {
                            Errors.$error_handler$.rebind(_prev_bind_0_$89, thread);
                        }
                    }
                    catch (Throwable ccatch_env_var) {
                        ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, (SubLObject)cure_api.$kw40$IGNORE_ERRORS_TARGET);
                    }
                    finally {
                        thread.throwStack.pop();
                    }
                }
                else {
                    result = (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw123$STATUS_CODE, (SubLObject)cure_api.THREE_INTEGER, (SubLObject)cure_api.$kw530$CHOICE_ID, choice_id, (SubLObject)cure_api.$kw173$SENTENCE_ID, sentence_id);
                    SubLObject ignore_errors_tag2 = (SubLObject)cure_api.NIL;
                    try {
                        thread.throwStack.push(cure_api.$kw40$IGNORE_ERRORS_TARGET);
                        final SubLObject _prev_bind_0_$90 = Errors.$error_handler$.currentBinding(thread);
                        try {
                            Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cure_api.$sym41$IGNORE_ERRORS_HANDLER), thread);
                            try {
                                fact_sheets.update_fact_sheet_data_for_term_and_removed_sentence(focal_term, visible_sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                            }
                            catch (Throwable catch_var2) {
                                Errors.handleThrowable(catch_var2, (SubLObject)cure_api.NIL);
                            }
                        }
                        finally {
                            Errors.$error_handler$.rebind(_prev_bind_0_$90, thread);
                        }
                    }
                    catch (Throwable ccatch_env_var2) {
                        ignore_errors_tag2 = Errors.handleThrowable(ccatch_env_var2, (SubLObject)cure_api.$kw40$IGNORE_ERRORS_TARGET);
                    }
                    finally {
                        thread.throwStack.pop();
                    }
                }
            }
            finally {
                czer_vars.$simplify_using_semanticsP$.rebind(_prev_bind_0_$88, thread);
            }
        }
        finally {
            rkf_macros.$rkf_asserting_tool$.rebind(_prev_bind_3, thread);
            api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 153298L)
    public static SubLObject note_accepted_choice(final SubLObject term_string, final SubLObject focal_term, final SubLObject sentence, final SubLObject justifications, final SubLObject user) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ignore_errors_tag = (SubLObject)cure_api.NIL;
        try {
            thread.throwStack.push(cure_api.$kw40$IGNORE_ERRORS_TARGET);
            final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cure_api.$sym41$IGNORE_ERRORS_HANDLER), thread);
                try {
                    SubLObject stream = (SubLObject)cure_api.NIL;
                    try {
                        final SubLObject _prev_bind_0_$91 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                            stream = compatibility.open_text(cure_api.$term_learner_accepted_meanings_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                        }
                        finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$91, thread);
                        }
                        if (!stream.isStream()) {
                            Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, cure_api.$term_learner_accepted_meanings_log_file$.getDynamicValue(thread));
                        }
                        final SubLObject s = stream;
                        PrintLow.format(s, (SubLObject)cure_api.$str533$_accepted_meaning_date___A__user_, new SubLObject[] { numeric_date_utilities.timestamp((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), kb_utilities.compact_hl_external_id_string(user), term_string, kb_utilities.compact_hl_external_id_string(focal_term), string_utilities.to_string(focal_term), kb_utilities.compact_hl_external_id_string(sentence), string_utilities.to_string(sentence), justifications });
                    }
                    finally {
                        final SubLObject _prev_bind_0_$92 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            if (stream.isStream()) {
                                streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                            }
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$92, thread);
                        }
                    }
                }
                catch (Throwable catch_var) {
                    Errors.handleThrowable(catch_var, (SubLObject)cure_api.NIL);
                }
            }
            finally {
                Errors.$error_handler$.rebind(_prev_bind_0, thread);
            }
        }
        catch (Throwable ccatch_env_var) {
            ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, (SubLObject)cure_api.$kw40$IGNORE_ERRORS_TARGET);
        }
        finally {
            thread.throwStack.pop();
        }
        return (SubLObject)cure_api.T;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 153936L)
    public static SubLObject get_nl_generation_for_user_added_sentence(final SubLObject sentence) {
        return term_learner_cycl_term_to_nl_string(sentence, (SubLObject)cure_api.UNPROVIDED).first();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 154070L)
    public static SubLObject transform_to_true(final SubLObject obj) {
        return cure_api.$const534$True;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 154150L)
    public static SubLObject term_expansion_expected_sentenceP(final SubLObject obj) {
        return (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL != cycl_grammar.cycl_sentence_p(obj) && cure_api.NIL != list_utilities.proper_list_p(obj) && cycl_utilities.formula_arg0(obj).eql(cure_api.$const535$termExpansionExpected));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 154333L)
    public static SubLObject get_mts_for_user_choice(final SubLObject url, final SubLObject doc_title, final SubLObject justifications, SubLObject user, SubLObject task) {
        if (task == cure_api.UNPROVIDED) {
            task = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL == task) {
            task = default_task_for_user(user);
        }
        user = normalize_cure_user(user);
        SubLObject result_mts = (SubLObject)cure_api.NIL;
        final SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
        final SubLObject _prev_bind_2 = cure_api.$current_tl_task$.currentBinding(thread);
        try {
            api_control_vars.$the_cyclist$.bind(user, thread);
            cure_api.$current_tl_task$.bind(task, thread);
            if (cure_api.NIL != cure_sort_work_by_docP(user, task) && cure_api.NIL != user_added_term_typeP(justifications)) {
                final SubLObject base_source = find_or_create_base_source_for_url(url, doc_title, user, (SubLObject)cure_api.UNPROVIDED);
                final SubLObject assert_mt = find_or_create_user_addition_mt_for_url(url, doc_title, user);
                result_mts = (SubLObject)ConsesLow.list(assert_mt);
            }
            else if (cure_api.NIL != cure_sort_work_by_docP(user, task)) {
                final SubLObject base_source = find_or_create_base_source_for_url(url, doc_title, user, (SubLObject)cure_api.UNPROVIDED);
                final SubLObject context_sentence = get_context_sentences_from_justifications(justifications).first();
                final SubLObject base_source_mt = ensure_source_contextualized_in_spindle(base_source, get_task_source_spindle(task, user), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                thread.resetMultipleValues();
                final SubLObject sentence_source = find_or_create_subwork_source(base_source, context_sentence, user);
                final SubLObject sentence_mt = thread.secondMultipleValue();
                thread.resetMultipleValues();
                result_mts = (SubLObject)((cure_api.NIL != sentence_mt) ? ConsesLow.list(sentence_mt) : ConsesLow.list(base_source_mt));
            }
            else if (cure_api.NIL != default_assert_mt_for_user_and_task(user, task)) {
                result_mts = (SubLObject)ConsesLow.list(default_assert_mt_for_user_and_task(user, task));
            }
            else if (cure_api.NIL != kb_utilities.compact_hl_external_id_stringP(url)) {
                final SubLObject base_source = document_annotation_widgets.term_learner_object_from_id(url);
                final SubLObject context_sentence = get_context_sentences_from_justifications(justifications).first();
                final SubLObject base_source_mt = ensure_source_contextualized_in_spindle(base_source, get_task_source_spindle(task, user), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                thread.resetMultipleValues();
                final SubLObject sentence_source = find_or_create_subwork_source(base_source, context_sentence, user);
                final SubLObject sentence_mt = thread.secondMultipleValue();
                thread.resetMultipleValues();
                result_mts = (SubLObject)((cure_api.NIL != sentence_mt) ? ConsesLow.list(sentence_mt) : ConsesLow.list(base_source_mt));
            }
            else if (cure_api.NIL != all_justifications_have_specified_mtsP(justifications)) {
                SubLObject mts = (SubLObject)cure_api.NIL;
                SubLObject cdolist_list_var = justifications;
                SubLObject justification = (SubLObject)cure_api.NIL;
                justification = cdolist_list_var.first();
                while (cure_api.NIL != cdolist_list_var) {
                    mts = (SubLObject)ConsesLow.cons(document_annotation_widgets.term_learner_object_from_id(conses_high.getf(justification, (SubLObject)cure_api.$kw95$ASSERT_MT, (SubLObject)cure_api.UNPROVIDED)), mts);
                    cdolist_list_var = cdolist_list_var.rest();
                    justification = cdolist_list_var.first();
                }
                result_mts = mts;
            }
            else {
                result_mts = (SubLObject)ConsesLow.list(get_cure_user_addition_to_spindle_mt(user, task));
            }
        }
        finally {
            cure_api.$current_tl_task$.rebind(_prev_bind_2, thread);
            api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
        }
        return result_mts;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 157080L)
    public static SubLObject get_cure_user_addition_to_spindle_mt(final SubLObject user, final SubLObject task) {
        final SubLObject user_addition_mt = (SubLObject)ConsesLow.list(cure_api.$const536$UnsourcedDataForUserByTaskMtFn, user, task);
        return user_addition_mt;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 157252L)
    public static SubLObject cure_sort_work_by_docP(final SubLObject user, final SubLObject task) {
        return ask_utilities.query_boolean((SubLObject)ConsesLow.list(cure_api.$const537$userTaskSortsWorkBySourceDocument, user, task), cure_api.$const291$AnalystDatabaseMt, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 157403L)
    public static SubLObject clear_normalize_cure_user() {
        final SubLObject cs = cure_api.$normalize_cure_user_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 157403L)
    public static SubLObject remove_normalize_cure_user(final SubLObject user) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$normalize_cure_user_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(user), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 157403L)
    public static SubLObject normalize_cure_user_internal(final SubLObject user) {
        final SubLObject base_user = ask_utilities.query_variable((SubLObject)cure_api.$sym539$_BASE_USER, (SubLObject)ConsesLow.list(cure_api.$const288$cureUserModel, (SubLObject)cure_api.$sym539$_BASE_USER, (SubLObject)cure_api.$sym540$_TASK, user), cure_api.$const64$InferencePSC, (SubLObject)cure_api.UNPROVIDED).first();
        return (cure_api.NIL != base_user) ? base_user : user;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 157403L)
    public static SubLObject normalize_cure_user(final SubLObject user) {
        SubLObject caching_state = cure_api.$normalize_cure_user_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym538$NORMALIZE_CURE_USER, (SubLObject)cure_api.$sym541$_NORMALIZE_CURE_USER_CACHING_STATE_, (SubLObject)cure_api.$int542$32, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, user, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(normalize_cure_user_internal(user)));
            memoization_state.caching_state_put(caching_state, user, results, (SubLObject)cure_api.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 157655L)
    public static SubLObject all_justifications_have_specified_mtsP(final SubLObject justs) {
        if (cure_api.NIL == justs) {
            return (SubLObject)cure_api.NIL;
        }
        SubLObject cdolist_list_var = justs;
        SubLObject just = (SubLObject)cure_api.NIL;
        just = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (conses_high.getf(just, (SubLObject)cure_api.$kw95$ASSERT_MT, (SubLObject)cure_api.$kw543$NOTHING) == cure_api.$kw543$NOTHING) {
                return (SubLObject)cure_api.NIL;
            }
            cdolist_list_var = cdolist_list_var.rest();
            just = cdolist_list_var.first();
        }
        return (SubLObject)cure_api.T;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 157977L)
    public static SubLObject user_added_term_typeP(final SubLObject justifications) {
        SubLObject cdolist_list_var = justifications;
        SubLObject just = (SubLObject)cure_api.NIL;
        just = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.NIL != conses_high.getf(just, (SubLObject)cure_api.$kw162$JUSTIFICATION, (SubLObject)cure_api.UNPROVIDED) && conses_high.getf(conses_high.getf(just, (SubLObject)cure_api.$kw162$JUSTIFICATION, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.$kw544$TOOL, (SubLObject)cure_api.UNPROVIDED) == cure_api.$kw97$USER) {
                return (SubLObject)cure_api.T;
            }
            cdolist_list_var = cdolist_list_var.rest();
            just = cdolist_list_var.first();
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 158643L)
    public static SubLObject get_task_source_spindle(final SubLObject task, final SubLObject user) {
        return (SubLObject)ConsesLow.list(cure_api.$const546$AssistedReaderSourceSpindleForTas, task, user);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 158766L)
    public static SubLObject clear_default_assert_mt_for_user_and_task() {
        final SubLObject cs = cure_api.$default_assert_mt_for_user_and_task_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 158766L)
    public static SubLObject remove_default_assert_mt_for_user_and_task(final SubLObject user, SubLObject task) {
        if (task == cure_api.UNPROVIDED) {
            task = default_task_for_user(user);
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$default_assert_mt_for_user_and_task_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(user, task), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 158766L)
    public static SubLObject default_assert_mt_for_user_and_task_internal(final SubLObject user, final SubLObject task) {
        return ask_utilities.query_variable((SubLObject)cure_api.$sym429$_MT, (SubLObject)ConsesLow.listS(cure_api.$const548$assistedReaderAssertionMtForTaskA, task, user, (SubLObject)cure_api.$list434), cure_api.$const64$InferencePSC, (SubLObject)cure_api.UNPROVIDED).first();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 158766L)
    public static SubLObject default_assert_mt_for_user_and_task(final SubLObject user, SubLObject task) {
        if (task == cure_api.UNPROVIDED) {
            task = default_task_for_user(user);
        }
        SubLObject caching_state = cure_api.$default_assert_mt_for_user_and_task_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym547$DEFAULT_ASSERT_MT_FOR_USER_AND_TASK, (SubLObject)cure_api.$sym549$_DEFAULT_ASSERT_MT_FOR_USER_AND_TASK_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym550$CLEAR_DEFAULT_ASSERT_MT_FOR_USER_AND_TASK);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(user, task);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (user.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && task.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(default_assert_mt_for_user_and_task_internal(user, task)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(user, task));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 159040L)
    public static SubLObject find_or_create_base_source_for_url(final SubLObject url, final SubLObject title, SubLObject user, SubLObject task) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (task == cure_api.UNPROVIDED) {
            task = cure_api.$current_tl_task$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject source = (SubLObject)cure_api.NIL;
        final SubLObject date = date_utilities.indexical_today();
        final SubLObject source_spindle = get_task_source_spindle(task, user);
        SubLObject release = (SubLObject)cure_api.NIL;
        try {
            release = Locks.seize_lock(cure_api.$term_learner_base_source_creation_lock$.getGlobalValue());
            final SubLObject existing_sources = ask_utilities.query_variable((SubLObject)cure_api.$sym551$_CW, (SubLObject)ConsesLow.list(cure_api.$const552$urlOfCW, (SubLObject)cure_api.$sym551$_CW, (SubLObject)ConsesLow.list(cure_api.$const553$URLFn, url)), cure_api.$const64$InferencePSC, (SubLObject)cure_api.$list554);
            if (cure_api.NIL != existing_sources) {
                source = existing_sources.first();
            }
            if (cure_api.NIL == source) {
                source = narts_high.nart_substitute((SubLObject)ConsesLow.list(cure_api.$const467$WebPageCWFn, url));
            }
            if (cure_api.NIL != cure_api.$term_learner_assert_redundant_mt_info$.getDynamicValue(thread) || cure_api.NIL == ask_utilities.query_boolean((SubLObject)ConsesLow.list(cure_api.$const555$mtSpindleMember, source_spindle, (SubLObject)ConsesLow.list(cure_api.$const556$ContextOfPCWFn, source)), term_learner_source_documentation_mt(), (SubLObject)cure_api.UNPROVIDED)) {
                rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.listS(cure_api.$const55$isa, source, (SubLObject)cure_api.$list557), term_learner_source_documentation_mt(), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
                rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const558$titleOfWork, source, title), cure_api.$term_learner_default_lexical_assertion_mt$.getDynamicValue(thread), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
                rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const552$urlOfCW, source, (SubLObject)ConsesLow.list(cure_api.$const553$URLFn, url)), term_learner_source_documentation_mt(), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
                ensure_source_contextualized_in_spindle(source, source_spindle, date, user);
            }
        }
        finally {
            if (cure_api.NIL != release) {
                Locks.release_lock(cure_api.$term_learner_base_source_creation_lock$.getGlobalValue());
            }
        }
        return source;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 160417L)
    public static SubLObject ensure_source_contextualized_in_spindle(SubLObject source, final SubLObject spindle, SubLObject date, SubLObject user) {
        if (date == cure_api.UNPROVIDED) {
            date = date_utilities.indexical_today();
        }
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
        try {
            api_control_vars.$the_cyclist$.bind(user, thread);
            final SubLObject contextualized_source = (SubLObject)ConsesLow.list(cure_api.$const556$ContextOfPCWFn, source);
            final SubLObject interpreted_source = (SubLObject)ConsesLow.list(cure_api.$const559$ContextOfPCWInterpretationFn, source, user, date);
            rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const560$contextOfPCW, source, contextualized_source), term_learner_source_documentation_mt(), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
            rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const471$contextOfPCWInterpretation, source, interpreted_source, user, date), term_learner_source_documentation_mt(), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
            rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const555$mtSpindleMember, spindle, contextualized_source), term_learner_source_documentation_mt(), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
            rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const555$mtSpindleMember, spindle, interpreted_source), term_learner_source_documentation_mt(), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
        }
        finally {
            api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)ConsesLow.list(cure_api.$const559$ContextOfPCWInterpretationFn, source, user, date);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 161343L)
    public static SubLObject find_or_create_subwork_source(SubLObject source, final SubLObject sentence_string, final SubLObject user) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject date = date_utilities.indexical_today();
        SubLObject sub_source = (SubLObject)cure_api.NIL;
        SubLObject interpretation_mt = (SubLObject)cure_api.NIL;
        if (cure_api.NIL == sentence_string) {
            return Values.values((SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL);
        }
        SubLObject release = (SubLObject)cure_api.NIL;
        try {
            release = Locks.seize_lock(cure_api.$term_learner_sub_source_creation_lock$.getGlobalValue());
            final SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
            try {
                api_control_vars.$the_cyclist$.bind(user, thread);
                final SubLObject existing_sources = ask_utilities.query_variable((SubLObject)cure_api.$sym551$_CW, (SubLObject)ConsesLow.list(cure_api.$const60$and, (SubLObject)ConsesLow.list(cure_api.$const562$asHtmlSourceString, (SubLObject)cure_api.$list563, sentence_string), (SubLObject)ConsesLow.listS(cure_api.$const564$subWorks, source, (SubLObject)cure_api.$list565)), cure_api.$const64$InferencePSC, (SubLObject)cure_api.UNPROVIDED);
                if (cure_api.NIL == sub_source) {
                    SubLObject csome_list_var = existing_sources;
                    SubLObject existing_source = (SubLObject)cure_api.NIL;
                    existing_source = csome_list_var.first();
                    while (cure_api.NIL == sub_source && cure_api.NIL != csome_list_var) {
                        final SubLObject interp_mts = ask_utilities.query_variable((SubLObject)cure_api.$sym429$_MT, (SubLObject)ConsesLow.list(cure_api.$const471$contextOfPCWInterpretation, existing_source, (SubLObject)cure_api.$sym429$_MT, api_control_vars.$the_cyclist$.getDynamicValue(thread), date), cure_api.$const64$InferencePSC, (SubLObject)cure_api.$list554);
                        if (cure_api.NIL != interp_mts) {
                            sub_source = existing_source;
                            interpretation_mt = interp_mts.first();
                        }
                        csome_list_var = csome_list_var.rest();
                        existing_source = csome_list_var.first();
                    }
                }
                if (cure_api.NIL != sentence_string && (cure_api.NIL != cure_api.$term_learner_assert_redundant_mt_info$.getDynamicValue(thread) || cure_api.NIL == interpretation_mt)) {
                    final SubLObject doc_name_length = (SubLObject)(cure_api.$int566$30.numG(Sequences.length(sentence_string)) ? Sequences.length(sentence_string) : cure_api.$int566$30);
                    sub_source = (SubLObject)ConsesLow.list(cure_api.$const464$SentenceOfCWFn, source, string_utilities.substring(sentence_string, (SubLObject)cure_api.ZERO_INTEGER, doc_name_length));
                    interpretation_mt = narts_high.nart_substitute((SubLObject)ConsesLow.list(cure_api.$const559$ContextOfPCWInterpretationFn, sub_source, user, date));
                    rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.listS(cure_api.$const55$isa, sub_source, (SubLObject)cure_api.$list567), term_learner_source_documentation_mt(), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
                    rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const562$asHtmlSourceString, (SubLObject)ConsesLow.list(cure_api.$const568$AISForFn, sub_source), sentence_string), term_learner_source_documentation_mt(), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
                    rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const471$contextOfPCWInterpretation, sub_source, interpretation_mt, user, date), term_learner_source_documentation_mt(), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
                    rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const564$subWorks, source, sub_source), term_learner_source_documentation_mt(), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
                    rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const569$genlMt, (SubLObject)ConsesLow.list(cure_api.$const556$ContextOfPCWFn, source), interpretation_mt), term_learner_source_documentation_mt(), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
                }
            }
            finally {
                api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
            }
        }
        finally {
            if (cure_api.NIL != release) {
                Locks.release_lock(cure_api.$term_learner_sub_source_creation_lock$.getGlobalValue());
            }
        }
        interpretation_mt = ensure_is_hlmt_p_nart(interpretation_mt);
        return Values.values(sub_source, interpretation_mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 163437L)
    public static SubLObject ensure_is_hlmt_p_nart(final SubLObject nat) {
        if (cure_api.NIL == hlmt.hlmt_p(nat)) {
            isa.isaP(nat, cure_api.$const570$Microtheory, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        }
        return narts_high.nart_substitute(nat);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 163659L)
    public static SubLObject find_or_create_user_addition_mt_for_url(SubLObject source, final SubLObject sentence_string, final SubLObject user) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject date = date_utilities.indexical_today();
        SubLObject interpretation_mt = (SubLObject)cure_api.NIL;
        SubLObject release = (SubLObject)cure_api.NIL;
        try {
            release = Locks.seize_lock(cure_api.$term_learner_sub_source_creation_lock$.getGlobalValue());
            final SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
            try {
                api_control_vars.$the_cyclist$.bind(user, thread);
                final SubLObject interp_mts = ask_utilities.query_variable((SubLObject)cure_api.$sym429$_MT, (SubLObject)ConsesLow.list(cure_api.$const471$contextOfPCWInterpretation, source, (SubLObject)cure_api.$sym429$_MT, api_control_vars.$the_cyclist$.getDynamicValue(thread), date), cure_api.$const64$InferencePSC, (SubLObject)cure_api.$list554);
                if (cure_api.NIL != interp_mts) {
                    interpretation_mt = interp_mts.first();
                }
            }
            finally {
                api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
            }
            if (cure_api.NIL == interpretation_mt || cure_api.NIL != cure_api.$term_learner_assert_redundant_mt_info$.getDynamicValue(thread)) {
                interpretation_mt = (SubLObject)ConsesLow.list(cure_api.$const559$ContextOfPCWInterpretationFn, source, user, date);
                rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const471$contextOfPCWInterpretation, source, interpretation_mt, user, date), term_learner_source_documentation_mt(), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
                rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const569$genlMt, interpretation_mt, (SubLObject)ConsesLow.list(cure_api.$const556$ContextOfPCWFn, source)), term_learner_source_documentation_mt(), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
                rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const555$mtSpindleMember, cure_api.$source_spindle$.getDynamicValue(thread), interpretation_mt), term_learner_source_documentation_mt(), (SubLObject)cure_api.T, (SubLObject)cure_api.T);
            }
        }
        finally {
            if (cure_api.NIL != release) {
                Locks.release_lock(cure_api.$term_learner_sub_source_creation_lock$.getGlobalValue());
            }
        }
        return interpretation_mt;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 164850L)
    public static SubLObject get_mts_for_urlXuser(final SubLObject url, final SubLObject title, final SubLObject user) {
        final SubLObject document_pcw = find_or_create_base_source_for_url(url, title, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject subworks = ask_utilities.query_variable((SubLObject)cure_api.$sym571$_SUBWORK, (SubLObject)ConsesLow.listS(cure_api.$const564$subWorks, document_pcw, (SubLObject)cure_api.$list572), cure_api.$const64$InferencePSC, (SubLObject)cure_api.$list554);
        SubLObject mts = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = (SubLObject)ConsesLow.cons(document_pcw, subworks);
        SubLObject subwork = (SubLObject)cure_api.NIL;
        subwork = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            mts = Sequences.cconcatenate(mts, ask_utilities.query_variable((SubLObject)cure_api.$sym429$_MT, (SubLObject)ConsesLow.listS(cure_api.$const471$contextOfPCWInterpretation, subwork, (SubLObject)cure_api.$sym429$_MT, user, (SubLObject)cure_api.$list573), cure_api.$const64$InferencePSC, (SubLObject)cure_api.$list554));
            cdolist_list_var = cdolist_list_var.rest();
            subwork = cdolist_list_var.first();
        }
        return mts;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 165525L)
    public static SubLObject get_mts_for_user(final SubLObject user, SubLObject date) {
        if (date == cure_api.UNPROVIDED) {
            date = date_utilities.universal_date_to_cycl_date(numeric_date_utilities.today());
        }
        return ask_utilities.query_variable((SubLObject)cure_api.$sym429$_MT, (SubLObject)ConsesLow.list(cure_api.$const471$contextOfPCWInterpretation, (SubLObject)cure_api.$sym574$_WORK, (SubLObject)cure_api.$sym429$_MT, user, date), cure_api.$const64$InferencePSC, (SubLObject)cure_api.$list554);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 165746L)
    public static SubLObject clear_mts_for_user(final SubLObject user, SubLObject date) {
        if (date == cure_api.UNPROVIDED) {
            date = date_utilities.universal_date_to_cycl_date(numeric_date_utilities.today());
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym575$CLEAR_MTS_FOR_USER, user, date));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym575$CLEAR_MTS_FOR_USER, user, date));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        return clear_contents_from_mts(get_mts_for_user(user, date));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 166144L)
    public static SubLObject clear_mts_for_urlXuser(final SubLObject url, final SubLObject title, final SubLObject user) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym576$CLEAR_MTS_FOR_URL_USER, url, title, user));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym576$CLEAR_MTS_FOR_URL_USER, url, title, user));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject mts = get_mts_for_urlXuser(url, title, user);
        return clear_contents_from_mts(mts);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 166741L)
    public static SubLObject clear_contents_from_mts(final SubLObject mts) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject cdolist_list_var = mts;
        SubLObject mt = (SubLObject)cure_api.NIL;
        mt = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject cdolist_list_var_$93 = ask_utilities.query_variable((SubLObject)cure_api.$kw324$TERM, (SubLObject)ConsesLow.list(cure_api.$const210$termDependsOn, (SubLObject)cure_api.$kw324$TERM, mt), cure_api.$const64$InferencePSC, (SubLObject)cure_api.UNPROVIDED);
            SubLObject v_term = (SubLObject)cure_api.NIL;
            v_term = cdolist_list_var_$93.first();
            while (cure_api.NIL != cdolist_list_var_$93) {
                if (cure_api.NIL != forts.fort_p(v_term)) {
                    ke.ke_kill_now(v_term);
                }
                cdolist_list_var_$93 = cdolist_list_var_$93.rest();
                v_term = cdolist_list_var_$93.first();
            }
            final SubLObject pcase_var = kb_mapping_macros.do_mt_contents_method(mt);
            if (pcase_var.eql((SubLObject)cure_api.$kw577$MT)) {
                if (cure_api.NIL != kb_mapping_macros.do_mt_index_key_validator(mt, (SubLObject)cure_api.NIL)) {
                    final SubLObject final_index_spec = kb_mapping_macros.mt_final_index_spec(mt);
                    SubLObject final_index_iterator = (SubLObject)cure_api.NIL;
                    try {
                        final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL);
                        SubLObject done_var = (SubLObject)cure_api.NIL;
                        final SubLObject token_var = (SubLObject)cure_api.NIL;
                        while (cure_api.NIL == done_var) {
                            final SubLObject v_assert = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var);
                            final SubLObject valid = (SubLObject)SubLObjectFactory.makeBoolean(!token_var.eql(v_assert));
                            if (cure_api.NIL != valid) {
                                final SubLObject sentence = assertions_high.assertion_formula(v_assert);
                                final SubLObject stack = stacks.create_stack();
                                SubLObject sentence_term = (SubLObject)cure_api.NIL;
                                stacks.stack_push(sentence, stack);
                                while (cure_api.NIL == stacks.stack_empty_p(stack)) {
                                    final SubLObject entry = sentence_term = stacks.stack_pop(stack);
                                    if (cure_api.NIL != forts.fort_p(narts_high.nart_substitute(sentence_term))) {
                                        SubLObject ignore_errors_tag = (SubLObject)cure_api.NIL;
                                        try {
                                            thread.throwStack.push(cure_api.$kw40$IGNORE_ERRORS_TARGET);
                                            final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                                            try {
                                                Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cure_api.$sym41$IGNORE_ERRORS_HANDLER), thread);
                                                try {
                                                    fact_sheets.update_fact_sheet_data_for_term_and_removed_sentence(sentence_term, sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                                                }
                                                catch (Throwable catch_var) {
                                                    Errors.handleThrowable(catch_var, (SubLObject)cure_api.NIL);
                                                }
                                            }
                                            finally {
                                                Errors.$error_handler$.rebind(_prev_bind_0, thread);
                                            }
                                        }
                                        catch (Throwable ccatch_env_var) {
                                            ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, (SubLObject)cure_api.$kw40$IGNORE_ERRORS_TARGET);
                                        }
                                        finally {
                                            thread.throwStack.pop();
                                        }
                                    }
                                    SubLObject cdolist_list_var_$94 = cycl_utilities.formula_args(entry, (SubLObject)cure_api.UNPROVIDED);
                                    SubLObject arg = (SubLObject)cure_api.NIL;
                                    arg = cdolist_list_var_$94.first();
                                    while (cure_api.NIL != cdolist_list_var_$94) {
                                        stacks.stack_push(arg, stack);
                                        cdolist_list_var_$94 = cdolist_list_var_$94.rest();
                                        arg = cdolist_list_var_$94.first();
                                    }
                                }
                                ke.ke_unassert_assertion_now(v_assert);
                            }
                            done_var = (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == valid);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            if (cure_api.NIL != final_index_iterator) {
                                kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                            }
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                        }
                    }
                }
            }
            else if (pcase_var.eql((SubLObject)cure_api.$kw578$BROAD_MT) && cure_api.NIL != kb_mapping_macros.do_broad_mt_index_key_validator(mt, (SubLObject)cure_api.NIL)) {
                final SubLObject idx = assertion_handles.do_assertions_table();
                final SubLObject mess = (SubLObject)cure_api.$str579$do_broad_mt_index;
                final SubLObject total = id_index.id_index_count(idx);
                SubLObject sofar = (SubLObject)cure_api.ZERO_INTEGER;
                assert cure_api.NIL != Types.stringp(mess) : mess;
                final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                try {
                    utilities_macros.$last_percent_progress_index$.bind((SubLObject)cure_api.ZERO_INTEGER, thread);
                    utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)cure_api.NIL, thread);
                    utilities_macros.$within_noting_percent_progress$.bind((SubLObject)cure_api.T, thread);
                    utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                    try {
                        utilities_macros.noting_percent_progress_preamble(mess);
                        final SubLObject idx_$95 = idx;
                        if (cure_api.NIL == id_index.id_index_objects_empty_p(idx_$95, (SubLObject)cure_api.$kw580$SKIP)) {
                            final SubLObject idx_$96 = idx_$95;
                            if (cure_api.NIL == id_index.id_index_dense_objects_empty_p(idx_$96, (SubLObject)cure_api.$kw580$SKIP)) {
                                final SubLObject vector_var = id_index.id_index_dense_objects(idx_$96);
                                final SubLObject backwardP_var = (SubLObject)cure_api.NIL;
                                SubLObject length;
                                SubLObject v_iteration;
                                SubLObject a_id;
                                SubLObject a_handle;
                                SubLObject v_assert2;
                                SubLObject sentence2;
                                SubLObject stack2;
                                SubLObject sentence_term2;
                                SubLObject entry2;
                                SubLObject ignore_errors_tag2;
                                SubLObject _prev_bind_0_$97;
                                SubLObject cdolist_list_var_$95;
                                SubLObject arg2;
                                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)cure_api.NIL, v_iteration = (SubLObject)cure_api.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)cure_api.ONE_INTEGER)) {
                                    a_id = ((cure_api.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)cure_api.ONE_INTEGER) : v_iteration);
                                    a_handle = Vectors.aref(vector_var, a_id);
                                    if (cure_api.NIL == id_index.id_index_tombstone_p(a_handle) || cure_api.NIL == id_index.id_index_skip_tombstones_p((SubLObject)cure_api.$kw580$SKIP)) {
                                        if (cure_api.NIL != id_index.id_index_tombstone_p(a_handle)) {
                                            a_handle = (SubLObject)cure_api.$kw580$SKIP;
                                        }
                                        v_assert2 = assertion_handles.resolve_assertion_id_value_pair(a_id, a_handle);
                                        if (cure_api.NIL != kb_mapping_macros.do_broad_mt_index_match_p(v_assert2, mt, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL)) {
                                            sentence2 = assertions_high.assertion_formula(v_assert2);
                                            stack2 = stacks.create_stack();
                                            sentence_term2 = (SubLObject)cure_api.NIL;
                                            stacks.stack_push(sentence2, stack2);
                                            while (cure_api.NIL == stacks.stack_empty_p(stack2)) {
                                                entry2 = (sentence_term2 = stacks.stack_pop(stack2));
                                                if (cure_api.NIL != forts.fort_p(narts_high.nart_substitute(sentence_term2))) {
                                                    ignore_errors_tag2 = (SubLObject)cure_api.NIL;
                                                    try {
                                                        thread.throwStack.push(cure_api.$kw40$IGNORE_ERRORS_TARGET);
                                                        _prev_bind_0_$97 = Errors.$error_handler$.currentBinding(thread);
                                                        try {
                                                            Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cure_api.$sym41$IGNORE_ERRORS_HANDLER), thread);
                                                            try {
                                                                fact_sheets.update_fact_sheet_data_for_term_and_removed_sentence(sentence_term2, sentence2, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                                                            }
                                                            catch (Throwable catch_var2) {
                                                                Errors.handleThrowable(catch_var2, (SubLObject)cure_api.NIL);
                                                            }
                                                        }
                                                        finally {
                                                            Errors.$error_handler$.rebind(_prev_bind_0_$97, thread);
                                                        }
                                                    }
                                                    catch (Throwable ccatch_env_var2) {
                                                        ignore_errors_tag2 = Errors.handleThrowable(ccatch_env_var2, (SubLObject)cure_api.$kw40$IGNORE_ERRORS_TARGET);
                                                    }
                                                    finally {
                                                        thread.throwStack.pop();
                                                    }
                                                }
                                                cdolist_list_var_$95 = cycl_utilities.formula_args(entry2, (SubLObject)cure_api.UNPROVIDED);
                                                arg2 = (SubLObject)cure_api.NIL;
                                                arg2 = cdolist_list_var_$95.first();
                                                while (cure_api.NIL != cdolist_list_var_$95) {
                                                    stacks.stack_push(arg2, stack2);
                                                    cdolist_list_var_$95 = cdolist_list_var_$95.rest();
                                                    arg2 = cdolist_list_var_$95.first();
                                                }
                                            }
                                            ke.ke_unassert_assertion_now(v_assert2);
                                        }
                                        sofar = Numbers.add(sofar, (SubLObject)cure_api.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                    }
                                }
                            }
                            final SubLObject idx_$97 = idx_$95;
                            if (cure_api.NIL == id_index.id_index_sparse_objects_empty_p(idx_$97) || cure_api.NIL == id_index.id_index_skip_tombstones_p((SubLObject)cure_api.$kw580$SKIP)) {
                                final SubLObject sparse = id_index.id_index_sparse_objects(idx_$97);
                                SubLObject a_id2 = id_index.id_index_sparse_id_threshold(idx_$97);
                                final SubLObject end_id = id_index.id_index_next_id(idx_$97);
                                final SubLObject v_default = (SubLObject)((cure_api.NIL != id_index.id_index_skip_tombstones_p((SubLObject)cure_api.$kw580$SKIP)) ? cure_api.NIL : cure_api.$kw580$SKIP);
                                while (a_id2.numL(end_id)) {
                                    final SubLObject a_handle2 = Hashtables.gethash_without_values(a_id2, sparse, v_default);
                                    if (cure_api.NIL == id_index.id_index_skip_tombstones_p((SubLObject)cure_api.$kw580$SKIP) || cure_api.NIL == id_index.id_index_tombstone_p(a_handle2)) {
                                        final SubLObject v_assert3 = assertion_handles.resolve_assertion_id_value_pair(a_id2, a_handle2);
                                        if (cure_api.NIL != kb_mapping_macros.do_broad_mt_index_match_p(v_assert3, mt, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL)) {
                                            final SubLObject sentence3 = assertions_high.assertion_formula(v_assert3);
                                            final SubLObject stack3 = stacks.create_stack();
                                            SubLObject sentence_term3 = (SubLObject)cure_api.NIL;
                                            stacks.stack_push(sentence3, stack3);
                                            while (cure_api.NIL == stacks.stack_empty_p(stack3)) {
                                                final SubLObject entry3 = sentence_term3 = stacks.stack_pop(stack3);
                                                if (cure_api.NIL != forts.fort_p(narts_high.nart_substitute(sentence_term3))) {
                                                    SubLObject ignore_errors_tag3 = (SubLObject)cure_api.NIL;
                                                    try {
                                                        thread.throwStack.push(cure_api.$kw40$IGNORE_ERRORS_TARGET);
                                                        final SubLObject _prev_bind_0_$98 = Errors.$error_handler$.currentBinding(thread);
                                                        try {
                                                            Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cure_api.$sym41$IGNORE_ERRORS_HANDLER), thread);
                                                            try {
                                                                fact_sheets.update_fact_sheet_data_for_term_and_removed_sentence(sentence_term3, sentence3, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                                                            }
                                                            catch (Throwable catch_var3) {
                                                                Errors.handleThrowable(catch_var3, (SubLObject)cure_api.NIL);
                                                            }
                                                        }
                                                        finally {
                                                            Errors.$error_handler$.rebind(_prev_bind_0_$98, thread);
                                                        }
                                                    }
                                                    catch (Throwable ccatch_env_var3) {
                                                        ignore_errors_tag3 = Errors.handleThrowable(ccatch_env_var3, (SubLObject)cure_api.$kw40$IGNORE_ERRORS_TARGET);
                                                    }
                                                    finally {
                                                        thread.throwStack.pop();
                                                    }
                                                }
                                                SubLObject cdolist_list_var_$96 = cycl_utilities.formula_args(entry3, (SubLObject)cure_api.UNPROVIDED);
                                                SubLObject arg3 = (SubLObject)cure_api.NIL;
                                                arg3 = cdolist_list_var_$96.first();
                                                while (cure_api.NIL != cdolist_list_var_$96) {
                                                    stacks.stack_push(arg3, stack3);
                                                    cdolist_list_var_$96 = cdolist_list_var_$96.rest();
                                                    arg3 = cdolist_list_var_$96.first();
                                                }
                                            }
                                            ke.ke_unassert_assertion_now(v_assert3);
                                        }
                                        sofar = Numbers.add(sofar, (SubLObject)cure_api.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                    }
                                    a_id2 = Numbers.add(a_id2, (SubLObject)cure_api.ONE_INTEGER);
                                }
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$99 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            utilities_macros.noting_percent_progress_postamble();
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$99, thread);
                        }
                    }
                }
                finally {
                    utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_6, thread);
                    utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_5, thread);
                    utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_4, thread);
                    utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_3, thread);
                }
            }
            final SubLObject assertiondependson = constants_high.find_constant((SubLObject)cure_api.$str581$assertionDependsOn);
            if (cure_api.NIL != constant_handles.valid_constant(assertiondependson, (SubLObject)cure_api.UNPROVIDED)) {
                SubLObject cdolist_list_var_$97 = ask_utilities.query_variable((SubLObject)cure_api.$kw190$ASSERT, (SubLObject)ConsesLow.list(assertiondependson, (SubLObject)cure_api.$kw190$ASSERT, mt), cure_api.$const64$InferencePSC, (SubLObject)cure_api.$list554);
                SubLObject v_assert4 = (SubLObject)cure_api.NIL;
                v_assert4 = cdolist_list_var_$97.first();
                while (cure_api.NIL != cdolist_list_var_$97) {
                    final SubLObject sentence4 = assertions_high.assertion_formula(v_assert4);
                    final SubLObject stack4 = stacks.create_stack();
                    SubLObject sentence_term4 = (SubLObject)cure_api.NIL;
                    stacks.stack_push(sentence4, stack4);
                    while (cure_api.NIL == stacks.stack_empty_p(stack4)) {
                        final SubLObject entry4 = sentence_term4 = stacks.stack_pop(stack4);
                        if (cure_api.NIL != forts.fort_p(narts_high.nart_substitute(sentence_term4))) {
                            SubLObject ignore_errors_tag4 = (SubLObject)cure_api.NIL;
                            try {
                                thread.throwStack.push(cure_api.$kw40$IGNORE_ERRORS_TARGET);
                                final SubLObject _prev_bind_7 = Errors.$error_handler$.currentBinding(thread);
                                try {
                                    Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cure_api.$sym41$IGNORE_ERRORS_HANDLER), thread);
                                    try {
                                        fact_sheets.update_fact_sheet_data_for_term_and_removed_sentence(sentence_term4, sentence4, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                                    }
                                    catch (Throwable catch_var4) {
                                        Errors.handleThrowable(catch_var4, (SubLObject)cure_api.NIL);
                                    }
                                }
                                finally {
                                    Errors.$error_handler$.rebind(_prev_bind_7, thread);
                                }
                            }
                            catch (Throwable ccatch_env_var4) {
                                ignore_errors_tag4 = Errors.handleThrowable(ccatch_env_var4, (SubLObject)cure_api.$kw40$IGNORE_ERRORS_TARGET);
                            }
                            finally {
                                thread.throwStack.pop();
                            }
                        }
                        SubLObject cdolist_list_var_$98 = cycl_utilities.formula_args(entry4, (SubLObject)cure_api.UNPROVIDED);
                        SubLObject arg4 = (SubLObject)cure_api.NIL;
                        arg4 = cdolist_list_var_$98.first();
                        while (cure_api.NIL != cdolist_list_var_$98) {
                            stacks.stack_push(arg4, stack4);
                            cdolist_list_var_$98 = cdolist_list_var_$98.rest();
                            arg4 = cdolist_list_var_$98.first();
                        }
                    }
                    ke.ke_unassert_assertion_now(v_assert4);
                    cdolist_list_var_$97 = cdolist_list_var_$97.rest();
                    v_assert4 = cdolist_list_var_$97.first();
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            mt = cdolist_list_var.first();
        }
        cdolist_list_var = ask_utilities.query_variable((SubLObject)cure_api.$kw324$TERM, (SubLObject)cure_api.$list582, cure_api.$const64$InferencePSC, (SubLObject)cure_api.UNPROVIDED);
        SubLObject v_term2 = (SubLObject)cure_api.NIL;
        v_term2 = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.NIL != forts.fort_p(v_term2)) {
                ke.ke_kill_now(v_term2);
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_term2 = cdolist_list_var.first();
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 168087L)
    public static SubLObject cyclist_fort(final SubLObject string) {
        final SubLObject v_forts = cb_frames.terms_for_browsing(string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject cyclists = list_utilities.remove_if_not((SubLObject)cure_api.$sym584$HUMAN_CYCLIST_, v_forts, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        return cyclists.first();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 168259L)
    public static SubLObject term_learner_ordered_types_for_term_in_document_string(final SubLObject doc_string, final SubLObject v_term, final SubLObject placeholderP, SubLObject lookup_onlyP, SubLObject lexicon) {
        if (lookup_onlyP == cure_api.UNPROVIDED) {
            lookup_onlyP = cure_api.$term_learner_use_lexical_lookup_only$.getGlobalValue();
        }
        if (lexicon == cure_api.UNPROVIDED) {
            lexicon = document_annotation_widgets.get_default_document_ingester_annotation_lexicon((SubLObject)cure_api.UNPROVIDED);
        }
        return term_learner_ordered_types_for_term_in_document(document.new_document(doc_string, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), v_term, placeholderP, lookup_onlyP, lexicon);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 168714L)
    public static SubLObject term_learner_ordered_types_for_term_in_document(final SubLObject doc, final SubLObject v_term, final SubLObject placeholderP, final SubLObject lookup_onlyP, final SubLObject lexicon) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)cure_api.NIL;
        SubLObject timed_outP = (SubLObject)cure_api.NIL;
        final SubLObject _prev_bind_0 = parsing_macros.$parsing_timeout_time_check_count$.currentBinding(thread);
        final SubLObject _prev_bind_2 = parsing_macros.$parsing_timeout_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = parsing_macros.$parsing_timeout_reachedP$.currentBinding(thread);
        try {
            parsing_macros.$parsing_timeout_time_check_count$.bind((SubLObject)cure_api.ZERO_INTEGER, thread);
            parsing_macros.$parsing_timeout_time$.bind(parsing_macros.parsing_compute_timeout_time((SubLObject)cure_api.TEN_INTEGER), thread);
            parsing_macros.$parsing_timeout_reachedP$.bind(parsing_macros.$parsing_timeout_reachedP$.getDynamicValue(thread), thread);
            parsing_macros.$parsing_timeout_reachedP$.setDynamicValue(parsing_macros.parsing_timeout_time_reachedP(), thread);
            if (cure_api.NIL == parsing_macros.$parsing_timeout_reachedP$.getDynamicValue(thread)) {
                thread.resetMultipleValues();
                final SubLObject types = term_learner_types_for_term_in_document(doc, v_term, placeholderP, lookup_onlyP, lexicon);
                final SubLObject justifications = thread.secondMultipleValue();
                thread.resetMultipleValues();
                result = Sequences.cconcatenate(result, term_learner_types_from_types_and_justifications(v_term, doc, types, justifications));
            }
            timed_outP = parsing_macros.parsing_timeout_time_reachedP();
        }
        finally {
            parsing_macros.$parsing_timeout_reachedP$.rebind(_prev_bind_3, thread);
            parsing_macros.$parsing_timeout_time$.rebind(_prev_bind_2, thread);
            parsing_macros.$parsing_timeout_time_check_count$.rebind(_prev_bind_0, thread);
        }
        if (cure_api.NIL != timed_outP && cure_api.NIL == lookup_onlyP) {
            thread.resetMultipleValues();
            final SubLObject types2 = term_learner_types_for_term_in_document(doc, v_term, placeholderP, (SubLObject)cure_api.T, lexicon);
            final SubLObject justifications2 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            result = Sequences.cconcatenate(result, term_learner_types_from_types_and_justifications(v_term, doc, types2, justifications2));
        }
        return Sort.sort(result, (SubLObject)cure_api.$sym77$_, (SubLObject)cure_api.$sym78$GET_WEIGHT);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 169880L)
    public static SubLObject term_learner_types_from_types_and_justifications(final SubLObject v_term, final SubLObject doc, final SubLObject types, final SubLObject justifications) {
        SubLObject term_learner_types = (SubLObject)cure_api.NIL;
        final SubLObject nl_strings = term_learner_cycl_terms_to_nl_strings(types, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        SubLObject type = (SubLObject)cure_api.NIL;
        SubLObject type_$105 = (SubLObject)cure_api.NIL;
        SubLObject justification = (SubLObject)cure_api.NIL;
        SubLObject justification_$106 = (SubLObject)cure_api.NIL;
        SubLObject nl_string = (SubLObject)cure_api.NIL;
        SubLObject nl_string_$107 = (SubLObject)cure_api.NIL;
        type = types;
        type_$105 = type.first();
        justification = justifications;
        justification_$106 = justification.first();
        nl_string = nl_strings;
        nl_string_$107 = nl_string.first();
        while (cure_api.NIL != nl_string || cure_api.NIL != justification || cure_api.NIL != type) {
            final SubLObject isa_genls = (SubLObject)((cure_api.NIL != ner_justificationP(justification_$106) || cure_api.NIL != term_learner_create_as_individualP(v_term, doc, (SubLObject)cure_api.UNPROVIDED)) ? cure_api.$kw143$ISA : cure_api.$kw141$GENLS);
            final SubLObject weight = data_parser.term_log_idf_from_kb(type_$105);
            final SubLObject basic_sentence = (SubLObject)ConsesLow.list((isa_genls == cure_api.$kw143$ISA) ? cure_api.$const55$isa : cure_api.$const76$genls, (SubLObject)cure_api.$kw324$TERM, type_$105);
            final SubLObject assert_sentence = (SubLObject)((cure_api.NIL != constant_handles.valid_constantP(cure_api.$const535$termExpansionExpected, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL != cycl_grammar.cycl_nat_p(type_$105)) ? ConsesLow.list(cure_api.$const60$and, (SubLObject)ConsesLow.list(cure_api.$const535$termExpansionExpected, type_$105), basic_sentence) : basic_sentence);
            term_learner_types = (SubLObject)ConsesLow.cons(new_term_learner_single_justification_type(type_$105, weight, justification_$106, nl_string_$107, assert_sentence, (SubLObject)cure_api.ZERO_INTEGER, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), term_learner_types);
            type = type.rest();
            type_$105 = type.first();
            justification = justification.rest();
            justification_$106 = justification.first();
            nl_string = nl_string.rest();
            nl_string_$107 = nl_string.first();
        }
        return term_learner_types;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 171178L)
    public static SubLObject get_weight(final SubLObject list) {
        return conses_high.getf(list, (SubLObject)cure_api.$kw118$WEIGHT, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 171283L)
    public static SubLObject get_cycls(final SubLObject list) {
        SubLObject cycls = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = conses_high.getf(list, (SubLObject)cure_api.$kw344$TYPES, (SubLObject)cure_api.UNPROVIDED);
        SubLObject type = (SubLObject)cure_api.NIL;
        type = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.NIL != conses_high.getf(type, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED)) {
                cycls = (SubLObject)ConsesLow.cons(conses_high.getf(type, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED), cycls);
            }
            cdolist_list_var = cdolist_list_var.rest();
            type = cdolist_list_var.first();
        }
        return cycls;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 171458L)
    public static SubLObject get_cycl(final SubLObject list) {
        SubLObject cdolist_list_var = conses_high.getf(list, (SubLObject)cure_api.$kw344$TYPES, (SubLObject)cure_api.UNPROVIDED);
        SubLObject type = (SubLObject)cure_api.NIL;
        type = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.NIL != conses_high.getf(type, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED)) {
                return conses_high.getf(type, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED);
            }
            cdolist_list_var = cdolist_list_var.rest();
            type = cdolist_list_var.first();
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 171603L)
    public static SubLObject ner_justificationP(final SubLObject justification) {
        return (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL != term_learner_justification_p(justification) && cure_api.NIL != conses_high.member(term_learner_justification_tool(justification), (SubLObject)cure_api.$list588, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 171816L)
    public static SubLObject term_learner_types_for_term_in_document(final SubLObject doc, final SubLObject v_term, final SubLObject placeholderP, SubLObject lookup_onlyP, SubLObject lexicon) {
        if (lookup_onlyP == cure_api.UNPROVIDED) {
            lookup_onlyP = (SubLObject)cure_api.NIL;
        }
        if (lexicon == cure_api.UNPROVIDED) {
            lexicon = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject types = (SubLObject)cure_api.NIL;
        SubLObject def_strings = (SubLObject)cure_api.NIL;
        final SubLObject current_state = memoization_state.current_memoization_state();
        final SubLObject _prev_bind_0 = lexicon_macros.$lexicon_memoization_state$.currentBinding(thread);
        try {
            lexicon_macros.$lexicon_memoization_state$.bind((cure_api.NIL != current_state) ? current_state : lexicon_macros.find_or_create_lexicon_memoization_state(), thread);
            final SubLObject local_state = lexicon_macros.$lexicon_memoization_state$.getDynamicValue(thread);
            final SubLObject _prev_bind_0_$108 = memoization_state.$memoization_state$.currentBinding(thread);
            try {
                memoization_state.$memoization_state$.bind(local_state, thread);
                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                try {
                    SubLObject cdolist_list_var = term_learner_relevant_sentences_from_document(doc, v_term);
                    SubLObject sentence = (SubLObject)cure_api.NIL;
                    sentence = cdolist_list_var.first();
                    while (cure_api.NIL != cdolist_list_var) {
                        thread.resetMultipleValues();
                        final SubLObject sentence_types = term_learner_collections_for_term_in_sentence(document.sentence_string(sentence), v_term, placeholderP, lookup_onlyP, lexicon);
                        final SubLObject strings = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        SubLObject sentence_type = (SubLObject)cure_api.NIL;
                        SubLObject sentence_type_$109 = (SubLObject)cure_api.NIL;
                        SubLObject string = (SubLObject)cure_api.NIL;
                        SubLObject string_$110 = (SubLObject)cure_api.NIL;
                        sentence_type = sentence_types;
                        sentence_type_$109 = sentence_type.first();
                        string = strings;
                        string_$110 = string.first();
                        while (cure_api.NIL != string || cure_api.NIL != sentence_type) {
                            if (cure_api.NIL == subl_promotions.memberP(sentence_type_$109, types, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED)) {
                                types = (SubLObject)ConsesLow.cons(sentence_type_$109, types);
                                def_strings = (SubLObject)ConsesLow.cons(string_$110, def_strings);
                            }
                            sentence_type = sentence_type.rest();
                            sentence_type_$109 = sentence_type.first();
                            string = string.rest();
                            string_$110 = string.first();
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        sentence = cdolist_list_var.first();
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$109 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$109, thread);
                    }
                }
            }
            finally {
                memoization_state.$memoization_state$.rebind(_prev_bind_0_$108, thread);
            }
        }
        finally {
            lexicon_macros.$lexicon_memoization_state$.rebind(_prev_bind_0, thread);
        }
        return Values.values(types, def_strings);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 172483L)
    public static SubLObject term_learner_collections_for_term_in_sentence(final SubLObject sentence, final SubLObject v_term, SubLObject placeholderP, SubLObject lookup_onlyP, SubLObject lexicon) {
        if (placeholderP == cure_api.UNPROVIDED) {
            placeholderP = (SubLObject)cure_api.T;
        }
        if (lookup_onlyP == cure_api.UNPROVIDED) {
            lookup_onlyP = (SubLObject)cure_api.NIL;
        }
        if (lexicon == cure_api.UNPROVIDED) {
            lexicon = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject ner = object.new_class_instance((SubLObject)cure_api.$sym589$STANFORD_NER);
        final SubLObject entity_clusters = methods.funcall_instance_method_with_1_args(ner, (SubLObject)cure_api.$sym590$RUN, sentence);
        SubLObject collections = (SubLObject)cure_api.NIL;
        SubLObject definitions = (SubLObject)cure_api.NIL;
        final SubLObject local_state;
        final SubLObject state = local_state = memoization_state.possibly_new_memoization_state();
        final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject cdolist_list_var = matching_named_entities(entity_clusters, v_term, sentence, (SubLObject)cure_api.NIL, lexicon);
                SubLObject named_entity = (SubLObject)cure_api.NIL;
                named_entity = cdolist_list_var.first();
                while (cure_api.NIL != cdolist_list_var) {
                    final SubLObject type = methods.funcall_instance_method_with_0_args(named_entity, (SubLObject)cure_api.$sym591$GET_CYC);
                    final SubLObject string = methods.funcall_instance_method_with_0_args(named_entity, (SubLObject)cure_api.$sym592$GET_STRING);
                    final SubLObject _prev_bind_0_$112 = parsing_vars.$psp_concept_filters$.currentBinding(thread);
                    try {
                        parsing_vars.$psp_concept_filters$.bind((SubLObject)ConsesLow.list((SubLObject)cure_api.$list593, (SubLObject)((cure_api.NIL != constant_handles.valid_constant(cure_api.$const594$PredicateTaxonomy, (SubLObject)cure_api.UNPROVIDED)) ? cure_api.$list595 : cure_api.NIL)), thread);
                        if (cure_api.NIL != placeholderP || !type.eql(cure_api.$const38$Thing)) {
                            collections = (SubLObject)ConsesLow.cons(type, collections);
                            definitions = (SubLObject)ConsesLow.cons(new_term_learner_justification(string, sentence, (SubLObject)cure_api.$kw596$STANFORD_NER, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), definitions);
                        }
                        SubLObject cdolist_list_var_$113;
                        final SubLObject tighter_types_n_strings = cdolist_list_var_$113 = list_utilities.cartesian_product(methods.funcall_instance_method_with_2_args(named_entity, (SubLObject)cure_api.$sym597$TIGHTEN_TYPE, (SubLObject)cure_api.NIL, lookup_onlyP), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                        SubLObject type_and_string = (SubLObject)cure_api.NIL;
                        type_and_string = cdolist_list_var_$113.first();
                        while (cure_api.NIL != cdolist_list_var_$113) {
                            collections = (SubLObject)ConsesLow.cons(type_and_string.first(), collections);
                            definitions = (SubLObject)ConsesLow.cons(new_term_learner_justification(conses_high.second(type_and_string), sentence, (SubLObject)cure_api.$kw598$STANFORD_NER_PSP, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), definitions);
                            cdolist_list_var_$113 = cdolist_list_var_$113.rest();
                            type_and_string = cdolist_list_var_$113.first();
                        }
                    }
                    finally {
                        parsing_vars.$psp_concept_filters$.rebind(_prev_bind_0_$112, thread);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    named_entity = cdolist_list_var.first();
                }
                if (cure_api.NIL == collections) {
                    cdolist_list_var = matching_named_entities(entity_clusters, v_term, sentence, (SubLObject)cure_api.T, (SubLObject)cure_api.UNPROVIDED);
                    named_entity = (SubLObject)cure_api.NIL;
                    named_entity = cdolist_list_var.first();
                    while (cure_api.NIL != cdolist_list_var) {
                        final SubLObject type = methods.funcall_instance_method_with_0_args(named_entity, (SubLObject)cure_api.$sym591$GET_CYC);
                        final SubLObject string = methods.funcall_instance_method_with_0_args(named_entity, (SubLObject)cure_api.$sym592$GET_STRING);
                        final SubLObject _prev_bind_0_$113 = parsing_vars.$psp_concept_filters$.currentBinding(thread);
                        try {
                            parsing_vars.$psp_concept_filters$.bind((SubLObject)cure_api.$list599, thread);
                            if (cure_api.NIL != placeholderP || !type.eql(cure_api.$const38$Thing)) {
                                collections = (SubLObject)ConsesLow.cons(type, collections);
                                definitions = (SubLObject)ConsesLow.cons(new_term_learner_justification(string, sentence, (SubLObject)cure_api.$kw97$USER, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), definitions);
                            }
                            SubLObject cdolist_list_var_$114;
                            final SubLObject tighter_types_n_strings = cdolist_list_var_$114 = list_utilities.cartesian_product(methods.funcall_instance_method_with_2_args(named_entity, (SubLObject)cure_api.$sym597$TIGHTEN_TYPE, (SubLObject)cure_api.NIL, lookup_onlyP), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                            SubLObject type_and_string = (SubLObject)cure_api.NIL;
                            type_and_string = cdolist_list_var_$114.first();
                            while (cure_api.NIL != cdolist_list_var_$114) {
                                collections = (SubLObject)ConsesLow.cons(type_and_string.first(), collections);
                                definitions = (SubLObject)ConsesLow.cons(new_term_learner_justification(conses_high.second(type_and_string), sentence, (SubLObject)cure_api.$kw97$USER, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), definitions);
                                cdolist_list_var_$114 = cdolist_list_var_$114.rest();
                                type_and_string = cdolist_list_var_$114.first();
                            }
                        }
                        finally {
                            parsing_vars.$psp_concept_filters$.rebind(_prev_bind_0_$113, thread);
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        named_entity = cdolist_list_var.first();
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$114 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$114, thread);
                }
            }
        }
        finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return Values.values(collections, definitions);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 175321L)
    public static SubLObject matching_named_entities(final SubLObject entity_clusters, final SubLObject term_string, final SubLObject context_string, SubLObject create_if_noneP, SubLObject lexicon) {
        if (create_if_noneP == cure_api.UNPROVIDED) {
            create_if_noneP = (SubLObject)cure_api.NIL;
        }
        if (lexicon == cure_api.UNPROVIDED) {
            lexicon = (SubLObject)cure_api.NIL;
        }
        SubLObject matches = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = entity_clusters;
        SubLObject entity_cluster = (SubLObject)cure_api.NIL;
        entity_cluster = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject cdolist_list_var_$117 = entity_cluster;
            SubLObject named_entity = (SubLObject)cure_api.NIL;
            named_entity = cdolist_list_var_$117.first();
            while (cure_api.NIL != cdolist_list_var_$117) {
                if (!cure_api.$sym600$O.eql(methods.funcall_instance_method_with_0_args(named_entity, (SubLObject)cure_api.$sym601$GET_TYPE)) && term_string.equal(methods.funcall_instance_method_with_0_args(named_entity, (SubLObject)cure_api.$sym592$GET_STRING))) {
                    matches = (SubLObject)ConsesLow.cons(named_entity, matches);
                }
                cdolist_list_var_$117 = cdolist_list_var_$117.rest();
                named_entity = cdolist_list_var_$117.first();
            }
            cdolist_list_var = cdolist_list_var.rest();
            entity_cluster = cdolist_list_var.first();
        }
        if (cure_api.NIL != create_if_noneP && cure_api.NIL == matches) {
            final SubLObject contextualized_ne = named_entity_recognizer.new_contextualized_named_entity(term_string, (SubLObject)cure_api.$kw602$THING, (SubLObject)cure_api.$kw97$USER, context_string, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, cure_api.$const38$Thing);
            matches = (SubLObject)ConsesLow.cons(contextualized_ne, matches);
        }
        return matches;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 176161L)
    public static SubLObject clear_term_learner_type_prompt() {
        final SubLObject cs = cure_api.$term_learner_type_prompt_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 176161L)
    public static SubLObject remove_term_learner_type_prompt(final SubLObject concept) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$term_learner_type_prompt_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(concept), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 176161L)
    public static SubLObject term_learner_type_prompt_internal(SubLObject concept) {
        concept = narts_high.nart_substitute(concept);
        if (cure_api.NIL != lexification_utilities.unlexifiedP(concept, (SubLObject)cure_api.NIL)) {
            return (SubLObject)cure_api.NIL;
        }
        final SubLObject pred = (cure_api.NIL != kb_accessors.individualP(concept)) ? cure_api.$const55$isa : cure_api.$const76$genls;
        final SubLObject cycl_sentence = (SubLObject)ConsesLow.listS(pred, concept, (SubLObject)cure_api.$list604);
        final SubLObject raw_sentence = term_learner_cycl_term_to_nl_string(cycl_sentence, (SubLObject)cure_api.UNPROVIDED).first();
        final SubLObject final_cat = conses_high.last(string_utilities.search_all((SubLObject)cure_api.$str605$cat, raw_sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED).first();
        final SubLObject prompt = Sequences.cconcatenate(Sequences.subseq(raw_sentence, (SubLObject)cure_api.ZERO_INTEGER, Numbers.subtract(final_cat, (SubLObject)cure_api.ONE_INTEGER)), (SubLObject)cure_api.$str606$_);
        return prompt;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 176161L)
    public static SubLObject term_learner_type_prompt(final SubLObject concept) {
        SubLObject caching_state = cure_api.$term_learner_type_prompt_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym603$TERM_LEARNER_TYPE_PROMPT, (SubLObject)cure_api.$sym607$_TERM_LEARNER_TYPE_PROMPT_CACHING_STATE_, (SubLObject)cure_api.$int318$100, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, concept, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(term_learner_type_prompt_internal(concept)));
            memoization_state.caching_state_put(caching_state, concept, results, (SubLObject)cure_api.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 176670L)
    public static SubLObject clear_term_learner_term_header_string() {
        final SubLObject cs = cure_api.$term_learner_term_header_string_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 176670L)
    public static SubLObject remove_term_learner_term_header_string(final SubLObject concept, SubLObject max_alts) {
        if (max_alts == cure_api.UNPROVIDED) {
            max_alts = (SubLObject)cure_api.THREE_INTEGER;
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$term_learner_term_header_string_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(concept, max_alts), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 176670L)
    public static SubLObject term_learner_term_header_string_internal(SubLObject concept, final SubLObject max_alts) {
        concept = narts_high.nart_substitute(concept);
        if (cure_api.NIL != forts.fort_p(lexification_utilities.unlexifiedP(concept, (SubLObject)cure_api.UNPROVIDED))) {
            return (SubLObject)cure_api.NIL;
        }
        final SubLObject phrases = term_learner_alternative_phrases(concept, Numbers.add((SubLObject)cure_api.TWO_INTEGER, max_alts));
        final SubLObject first_phrase = phrases.first();
        final SubLObject aka = list_utilities.first_n(max_alts, phrases.rest());
        final SubLObject moreP = list_utilities.lengthG(phrases, Numbers.add((SubLObject)cure_api.ONE_INTEGER, max_alts), (SubLObject)cure_api.UNPROVIDED);
        final SubLObject result = first_phrase;
        SubLObject sub_header = (SubLObject)cure_api.NIL;
        if (cure_api.NIL != aka) {
            sub_header = aka;
            if (cure_api.NIL != moreP) {
                sub_header = list_utilities.snoc((SubLObject)cure_api.$str65$___, sub_header);
            }
        }
        return (SubLObject)ConsesLow.list(result, sub_header);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 176670L)
    public static SubLObject term_learner_term_header_string(final SubLObject concept, SubLObject max_alts) {
        if (max_alts == cure_api.UNPROVIDED) {
            max_alts = (SubLObject)cure_api.THREE_INTEGER;
        }
        SubLObject caching_state = cure_api.$term_learner_term_header_string_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym608$TERM_LEARNER_TERM_HEADER_STRING, (SubLObject)cure_api.$sym609$_TERM_LEARNER_TERM_HEADER_STRING_CACHING_STATE_, (SubLObject)cure_api.$int610$5000, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym611$CLEAR_TERM_LEARNER_TERM_HEADER_STRING);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(concept, max_alts);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (concept.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && max_alts.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(term_learner_term_header_string_internal(concept, max_alts)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(concept, max_alts));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 177325L)
    public static SubLObject term_learner_alternative_phrases(final SubLObject v_term, SubLObject max_count) {
        if (max_count == cure_api.UNPROVIDED) {
            max_count = number_utilities.positive_infinity();
        }
        final SubLObject params_$118;
        final SubLObject params = params_$118 = nl_generation_api.new_pph_parameters((SubLObject)cure_api.UNPROVIDED);
        pph_parameter_declarations.set_pph_generation_count_internal(params_$118, max_count);
        final SubLObject params_$119 = params;
        pph_parameter_declarations.set_pph_lexical_context_internal(params_$119, cure_default_generation_mt((SubLObject)cure_api.UNPROVIDED));
        final SubLObject params_$120 = params;
        pph_parameter_declarations.set_demerit_cutoff_internal(params_$120, pph_vars.$pph_suggested_demerit_cutoff$.getGlobalValue());
        return nl_generation_api.cycl_term_to_nl_string_internal(v_term, params);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 177703L)
    public static SubLObject clear_term_learner_lexical_caches() {
        clear_term_learner_term_header_string();
        clear_term_learner_type_prompt();
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 177847L)
    public static SubLObject term_learner_lexify_from_termstrings(final SubLObject focal_term, final SubLObject lexical_mt, final SubLObject mt) {
        SubLObject cdolist_list_var;
        final SubLObject term_strings_strings = cdolist_list_var = ask_utilities.query_variable((SubLObject)cure_api.$sym72$_STRING, (SubLObject)ConsesLow.list(cure_api.$const61$ist_Asserted, lexical_mt, (SubLObject)ConsesLow.listS(cure_api.$const59$termStrings, focal_term, (SubLObject)cure_api.$list74)), lexical_mt, (SubLObject)cure_api.UNPROVIDED);
        SubLObject term_string = (SubLObject)cure_api.NIL;
        term_string = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            ke.ke_unassert((SubLObject)ConsesLow.list(cure_api.$const59$termStrings, focal_term, term_string), lexical_mt);
            term_learner_assert_lexical_info(focal_term, term_string, mt, lexical_mt, (SubLObject)cure_api.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            term_string = cdolist_list_var.first();
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 178280L)
    public static SubLObject term_learner_assert_lexical_info(final SubLObject cycl_term, final SubLObject string, SubLObject mt, final SubLObject lexical_mt, SubLObject lexical_sentence) {
        if (lexical_sentence == cure_api.UNPROVIDED) {
            lexical_sentence = (SubLObject)cure_api.NIL;
        }
        clear_term_learner_lexical_caches();
        cure_remove_from_default_lexicon(cycl_term, string);
        methods.funcall_instance_method_with_1_args(document_annotation_widgets.get_default_document_ingester_annotation_learning_lexicon((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.$sym613$DELETE, string);
        mt = ensure_is_hlmt_p_nart(mt);
        if (cure_api.NIL != string_utilities.non_empty_cycl_stringP(string) && cure_api.NIL == subl_promotions.memberP(cycl_term, term_lexicon.denots_for_term_lexicon_entries(methods.funcall_instance_method_with_1_args(document_annotation_widgets.get_default_document_ingester_annotation_learning_lexicon((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.$sym34$GET, string)), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
            if (cure_api.NIL == lexical_sentence) {
                lexical_sentence = auto_lexifier.auto_lexify(string, cycl_term, lexical_mt, mt).first();
            }
            final SubLObject ret_value = rkf_assertion_utilities.rkf_assert_with_implicature(lexical_sentence, lexical_mt, (SubLObject)cure_api.$kw614$NOW);
            final SubLObject lexical_assert = (SubLObject)ConsesLow.list(cure_api.$const615$ist, lexical_mt, lexical_sentence);
            rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(cure_api.$const616$assertionDependsOn, lexical_assert, mt), cure_api.$const54$BaseKB, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            return ret_value;
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179175L)
    public static SubLObject default_task_for_user(final SubLObject user) {
        return default_task_for_user_int(user);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179296L)
    public static SubLObject clear_default_task_for_user_int() {
        final SubLObject cs = cure_api.$default_task_for_user_int_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179296L)
    public static SubLObject remove_default_task_for_user_int(final SubLObject user) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$default_task_for_user_int_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(user), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179296L)
    public static SubLObject default_task_for_user_int_internal(final SubLObject user) {
        final SubLObject kb_value = ask_utilities.query_variable((SubLObject)cure_api.$sym540$_TASK, (SubLObject)ConsesLow.list(cure_api.$const619$defaultTask, (SubLObject)cure_api.$sym540$_TASK, user), cure_api.$const64$InferencePSC, (SubLObject)cure_api.$list115).first();
        final SubLObject v_default = cure_api.$const620$GeneralCycKETask_Allotment;
        return (cure_api.NIL != kb_value) ? kb_value : v_default;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179296L)
    public static SubLObject default_task_for_user_int(final SubLObject user) {
        SubLObject caching_state = cure_api.$default_task_for_user_int_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym618$DEFAULT_TASK_FOR_USER_INT, (SubLObject)cure_api.$sym621$_DEFAULT_TASK_FOR_USER_INT_CACHING_STATE_, (SubLObject)cure_api.SIXTEEN_INTEGER, (SubLObject)cure_api.EQL, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym622$CLEAR_DEFAULT_TASK_FOR_USER_INT);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, user, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(default_task_for_user_int_internal(user)));
            memoization_state.caching_state_put(caching_state, user, results, (SubLObject)cure_api.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179639L)
    public static SubLObject clear_query_mt_for_task() {
        final SubLObject cs = cure_api.$query_mt_for_task_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179639L)
    public static SubLObject remove_query_mt_for_task(final SubLObject task) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$query_mt_for_task_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(task), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179639L)
    public static SubLObject query_mt_for_task_internal(final SubLObject task) {
        return cae_query_search.cae_default_query_mt(task);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179639L)
    public static SubLObject query_mt_for_task(final SubLObject task) {
        SubLObject caching_state = cure_api.$query_mt_for_task_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym623$QUERY_MT_FOR_TASK, (SubLObject)cure_api.$sym624$_QUERY_MT_FOR_TASK_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQL, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym625$CLEAR_QUERY_MT_FOR_TASK);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, task, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(query_mt_for_task_internal(task)));
            memoization_state.caching_state_put(caching_state, task, results, (SubLObject)cure_api.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179757L)
    public static SubLObject clear_wff_checking_mt_for_task() {
        final SubLObject cs = cure_api.$wff_checking_mt_for_task_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179757L)
    public static SubLObject remove_wff_checking_mt_for_task(final SubLObject task) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$wff_checking_mt_for_task_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(task), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179757L)
    public static SubLObject wff_checking_mt_for_task_internal(final SubLObject task) {
        return cae_query_search.cae_default_wff_checking_mt(task);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179757L)
    public static SubLObject wff_checking_mt_for_task(final SubLObject task) {
        SubLObject caching_state = cure_api.$wff_checking_mt_for_task_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym626$WFF_CHECKING_MT_FOR_TASK, (SubLObject)cure_api.$sym627$_WFF_CHECKING_MT_FOR_TASK_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQL, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym628$CLEAR_WFF_CHECKING_MT_FOR_TASK);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, task, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(wff_checking_mt_for_task_internal(task)));
            memoization_state.caching_state_put(caching_state, task, results, (SubLObject)cure_api.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179889L)
    public static SubLObject clear_query_mt_for_user_and_task() {
        final SubLObject cs = cure_api.$query_mt_for_user_and_task_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179889L)
    public static SubLObject remove_query_mt_for_user_and_task(final SubLObject user, final SubLObject task) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$query_mt_for_user_and_task_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(user, task), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179889L)
    public static SubLObject query_mt_for_user_and_task_internal(final SubLObject user, SubLObject task) {
        if (cure_api.NIL == task) {
            task = default_task_for_user(user);
        }
        return query_mt_for_task(task);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 179889L)
    public static SubLObject query_mt_for_user_and_task(final SubLObject user, final SubLObject task) {
        SubLObject caching_state = cure_api.$query_mt_for_user_and_task_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym629$QUERY_MT_FOR_USER_AND_TASK, (SubLObject)cure_api.$sym630$_QUERY_MT_FOR_USER_AND_TASK_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym631$CLEAR_QUERY_MT_FOR_USER_AND_TASK);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(user, task);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (user.eql(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && task.eql(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(query_mt_for_user_and_task_internal(user, task)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(user, task));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 180078L)
    public static SubLObject clear_wff_checking_mt_for_user_and_task() {
        final SubLObject cs = cure_api.$wff_checking_mt_for_user_and_task_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 180078L)
    public static SubLObject remove_wff_checking_mt_for_user_and_task(final SubLObject user, final SubLObject task) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$wff_checking_mt_for_user_and_task_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(user, task), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 180078L)
    public static SubLObject wff_checking_mt_for_user_and_task_internal(final SubLObject user, SubLObject task) {
        if (cure_api.NIL == task) {
            task = default_task_for_user(user);
        }
        return wff_checking_mt_for_task(task);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 180078L)
    public static SubLObject wff_checking_mt_for_user_and_task(final SubLObject user, final SubLObject task) {
        SubLObject caching_state = cure_api.$wff_checking_mt_for_user_and_task_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym632$WFF_CHECKING_MT_FOR_USER_AND_TASK, (SubLObject)cure_api.$sym633$_WFF_CHECKING_MT_FOR_USER_AND_TASK_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym634$CLEAR_WFF_CHECKING_MT_FOR_USER_AND_TASK);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(user, task);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (user.eql(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && task.eql(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(wff_checking_mt_for_user_and_task_internal(user, task)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(user, task));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 180280L)
    public static SubLObject parsing_mt_for_task(final SubLObject task) {
        return query_library_utils.cae_default_parsing_mt(task);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 180365L)
    public static SubLObject xml_output_term_types(final SubLObject types) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        try {
            final SubLObject _prev_bind_0 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
            final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
            try {
                xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str635$types, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                final SubLObject _prev_bind_0_$121 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                try {
                    xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                    SubLObject cdolist_list_var = types;
                    SubLObject type = (SubLObject)cure_api.NIL;
                    type = cdolist_list_var.first();
                    while (cure_api.NIL != cdolist_list_var) {
                        if (conses_high.getf(type, (SubLObject)cure_api.$kw350$CATEGORY, (SubLObject)cure_api.$kw636$NOT_FOUND) == cure_api.$kw636$NOT_FOUND) {
                            xml_output_term_type(type);
                        }
                        else {
                            final SubLObject category_label = conses_high.getf(type, (SubLObject)cure_api.$kw351$CATEGORY_NL, (SubLObject)cure_api.$str50$);
                            final SubLObject attrs = (SubLObject)ConsesLow.list((SubLObject)cure_api.$str637$category, string_utilities.to_string(conses_high.getf(type, (SubLObject)cure_api.$kw350$CATEGORY, (SubLObject)cure_api.UNPROVIDED)), (SubLObject)cure_api.$str638$categoryNL, category_label);
                            try {
                                final SubLObject _prev_bind_0_$122 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$123 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                                try {
                                    xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                    xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str639$typeSet, attrs, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                                    final SubLObject _prev_bind_0_$123 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                    try {
                                        xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                                        SubLObject cdolist_list_var_$125 = conses_high.getf(type, (SubLObject)cure_api.$kw344$TYPES, (SubLObject)cure_api.UNPROVIDED);
                                        SubLObject real_type = (SubLObject)cure_api.NIL;
                                        real_type = cdolist_list_var_$125.first();
                                        while (cure_api.NIL != cdolist_list_var_$125) {
                                            xml_output_term_type(real_type);
                                            cdolist_list_var_$125 = cdolist_list_var_$125.rest();
                                            real_type = cdolist_list_var_$125.first();
                                        }
                                    }
                                    finally {
                                        xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$123, thread);
                                    }
                                }
                                finally {
                                    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$123, thread);
                                    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$122, thread);
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$124 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    xml_utilities.xml_terpri();
                                    xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str639$typeSet);
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$124, thread);
                                }
                            }
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        type = cdolist_list_var.first();
                    }
                }
                finally {
                    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$121, thread);
                }
            }
            finally {
                xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
                xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0, thread);
            }
        }
        finally {
            final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                xml_utilities.xml_terpri();
                xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str635$types);
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 180899L)
    public static SubLObject xml_output_term_type(final SubLObject type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject attrs = (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$str640$id, web_utilities.html_url_encode(kb_utilities.compact_hl_external_id_string(conses_high.getf(type, (SubLObject)cure_api.$kw94$ASSERT_SENTENCE, (SubLObject)cure_api.UNPROVIDED)), (SubLObject)cure_api.UNPROVIDED), cure_api.$str641$required, (cure_api.NIL != conses_high.getf(type, (SubLObject)cure_api.$kw10$REQUIRED, (SubLObject)cure_api.UNPROVIDED)) ? cure_api.$str335$true : cure_api.$str642$false, cure_api.$str643$display, (cure_api.NIL != conses_high.getf(type, (SubLObject)cure_api.$kw9$DISPLAY, (SubLObject)cure_api.UNPROVIDED)) ? cure_api.$str335$true : cure_api.$str642$false, cure_api.$str644$cyclTerm, web_utilities.html_url_encode(print_high.prin1_to_string(conses_high.getf(type, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED)), (SubLObject)cure_api.UNPROVIDED), cure_api.$str332$conceptId, kb_utilities.compact_hl_external_id_string(conses_high.getf(type, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED)), cure_api.$str167$justifications, web_utilities.html_url_encode(print_high.prin1_to_string(conses_high.getf(type, (SubLObject)cure_api.$kw19$JUSTIFICATIONS, (SubLObject)cure_api.UNPROVIDED)), (SubLObject)cure_api.UNPROVIDED), cure_api.$str645$nlString, web_utilities.html_url_encode(conses_high.getf(type, (SubLObject)cure_api.$kw120$NL_STRING, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED), cure_api.$str646$legendString, web_utilities.html_url_encode(conses_high.getf(type, (SubLObject)cure_api.$kw121$LEGEND_STRING, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED), cure_api.$str647$replicationSentenceId, conses_high.getf(type, (SubLObject)cure_api.$kw124$REPLICATION_SENTENCE_ID, (SubLObject)cure_api.UNPROVIDED) });
        if (cure_api.NIL != conses_high.getf(type, (SubLObject)cure_api.$kw123$STATUS_CODE, (SubLObject)cure_api.UNPROVIDED)) {
            attrs = Sequences.cconcatenate((SubLObject)ConsesLow.list((SubLObject)cure_api.$str648$statusCode, PrintLow.write_to_string(conses_high.getf(type, (SubLObject)cure_api.$kw123$STATUS_CODE, (SubLObject)cure_api.UNPROVIDED), cure_api.EMPTY_SUBL_OBJECT_ARRAY)), attrs);
        }
        try {
            final SubLObject _prev_bind_0 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
            final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
            try {
                xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str649$type, attrs, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                final SubLObject _prev_bind_0_$127 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                try {
                    xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                    xml_output_renderers(conses_high.getf(type, (SubLObject)cure_api.$kw7$RENDERERS, (SubLObject)cure_api.UNPROVIDED));
                }
                finally {
                    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$127, thread);
                }
            }
            finally {
                xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
                xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0, thread);
            }
        }
        finally {
            final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                xml_utilities.xml_terpri();
                xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str649$type);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 181935L)
    public static SubLObject xml_output_renderers(final SubLObject renderers) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        try {
            final SubLObject _prev_bind_0 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
            final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
            try {
                xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str650$renderers, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                final SubLObject _prev_bind_0_$128 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                try {
                    xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                    SubLObject cdolist_list_var = renderers;
                    SubLObject renderer = (SubLObject)cure_api.NIL;
                    renderer = cdolist_list_var.first();
                    while (cure_api.NIL != cdolist_list_var) {
                        xml_output_renderer(renderer);
                        cdolist_list_var = cdolist_list_var.rest();
                        renderer = cdolist_list_var.first();
                    }
                }
                finally {
                    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$128, thread);
                }
            }
            finally {
                xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
                xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0, thread);
            }
        }
        finally {
            final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                xml_utilities.xml_terpri();
                xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str650$renderers);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        return renderers;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 182102L)
    public static SubLObject xml_output_renderer(final SubLObject renderer) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        try {
            final SubLObject _prev_bind_0 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
            final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
            try {
                xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str651$renderer, (SubLObject)ConsesLow.list((SubLObject)cure_api.$str649$type, print_high.prin1_to_string(conses_high.getf(renderer, (SubLObject)cure_api.$kw134$RENDERER_TYPE, (SubLObject)cure_api.UNPROVIDED))), (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                final SubLObject _prev_bind_0_$129 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                try {
                    xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                    if (cure_api.NIL != conses_high.getf(renderer, (SubLObject)cure_api.$kw146$ARG_POS, (SubLObject)cure_api.UNPROVIDED)) {
                        try {
                            final SubLObject _prev_bind_0_$130 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$131 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                            try {
                                xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str202$argpos, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                                final SubLObject _prev_bind_0_$131 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                try {
                                    xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                                    xml_utilities.xml_print(conses_high.getf(renderer, (SubLObject)cure_api.$kw146$ARG_POS, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED);
                                }
                                finally {
                                    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$131, thread);
                                }
                            }
                            finally {
                                xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$131, thread);
                                xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$130, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$132 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str202$argpos);
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$132, thread);
                            }
                        }
                    }
                    if (cure_api.NIL != conses_high.getf(renderer, (SubLObject)cure_api.$kw67$STRING, (SubLObject)cure_api.UNPROVIDED)) {
                        try {
                            final SubLObject _prev_bind_0_$133 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$132 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                            try {
                                xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str90$string, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                                final SubLObject _prev_bind_0_$134 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                try {
                                    xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                                    xml_utilities.xml_print(conses_high.getf(renderer, (SubLObject)cure_api.$kw67$STRING, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED);
                                }
                                finally {
                                    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$134, thread);
                                }
                            }
                            finally {
                                xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$132, thread);
                                xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$133, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$135 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                final SubLObject _values2 = Values.getValuesAsVector();
                                xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str90$string);
                                Values.restoreValuesFromVector(_values2);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$135, thread);
                            }
                        }
                    }
                    SubLObject cdolist_list_var = conses_high.getf(renderer, (SubLObject)cure_api.$kw137$SELECTION_RENDERERS, (SubLObject)cure_api.UNPROVIDED);
                    SubLObject selection_renderer = (SubLObject)cure_api.NIL;
                    selection_renderer = cdolist_list_var.first();
                    while (cure_api.NIL != cdolist_list_var) {
                        xml_output_selection_renderer(selection_renderer);
                        cdolist_list_var = cdolist_list_var.rest();
                        selection_renderer = cdolist_list_var.first();
                    }
                    cdolist_list_var = conses_high.getf(renderer, (SubLObject)cure_api.$kw144$ISA_CONSTRAINTS, (SubLObject)cure_api.UNPROVIDED);
                    SubLObject v_isa = (SubLObject)cure_api.NIL;
                    v_isa = cdolist_list_var.first();
                    while (cure_api.NIL != cdolist_list_var) {
                        final SubLObject _prev_bind_0_$136 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$133 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                        try {
                            xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                            xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                            xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str652$isaConstraint, (SubLObject)ConsesLow.list((SubLObject)cure_api.$str644$cyclTerm, kb_utilities.pretty_print_cycl_to_string(conses_high.getf(v_isa, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.$str332$conceptId, conses_high.getf(v_isa, (SubLObject)cure_api.$kw119$CONCEPT_ID, (SubLObject)cure_api.UNPROVIDED)), (SubLObject)cure_api.T, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                            final SubLObject _prev_bind_0_$137 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                            try {
                                xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                            }
                            finally {
                                xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$137, thread);
                            }
                        }
                        finally {
                            xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$133, thread);
                            xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$136, thread);
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        v_isa = cdolist_list_var.first();
                    }
                    cdolist_list_var = conses_high.getf(renderer, (SubLObject)cure_api.$kw142$GENLS_CONSTRAINTS, (SubLObject)cure_api.UNPROVIDED);
                    SubLObject genl = (SubLObject)cure_api.NIL;
                    genl = cdolist_list_var.first();
                    while (cure_api.NIL != cdolist_list_var) {
                        final SubLObject _prev_bind_0_$138 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$134 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                        try {
                            xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                            xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                            xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str653$genlsConstraint, (SubLObject)ConsesLow.list((SubLObject)cure_api.$str644$cyclTerm, kb_utilities.pretty_print_cycl_to_string(conses_high.getf(genl, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.$str332$conceptId, conses_high.getf(genl, (SubLObject)cure_api.$kw119$CONCEPT_ID, (SubLObject)cure_api.UNPROVIDED)), (SubLObject)cure_api.T, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                            final SubLObject _prev_bind_0_$139 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                            try {
                                xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                            }
                            finally {
                                xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$139, thread);
                            }
                        }
                        finally {
                            xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$134, thread);
                            xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$138, thread);
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        genl = cdolist_list_var.first();
                    }
                }
                finally {
                    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$129, thread);
                }
            }
            finally {
                xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
                xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0, thread);
            }
        }
        finally {
            final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                final SubLObject _values3 = Values.getValuesAsVector();
                xml_utilities.xml_terpri();
                xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str651$renderer);
                Values.restoreValuesFromVector(_values3);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 183013L)
    public static SubLObject xml_output_selection_renderer(final SubLObject renderer) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (renderer.first() == cure_api.$kw157$TEXT_MATCHES) {
            try {
                final SubLObject _prev_bind_0 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                try {
                    xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                    xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str654$text_matches, (SubLObject)ConsesLow.list((SubLObject)cure_api.$str655$heading, conses_high.second(renderer)), (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                    final SubLObject _prev_bind_0_$144 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                    try {
                        xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                        xml_output_selection_renderer(conses_high.third(renderer));
                    }
                    finally {
                        xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$144, thread);
                    }
                }
                finally {
                    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
                    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    xml_utilities.xml_terpri();
                    xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str654$text_matches);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                }
            }
            return (SubLObject)cure_api.NIL;
        }
        SubLObject attrs = (SubLObject)((conses_high.getf(renderer, (SubLObject)cure_api.$kw159$VALID, (SubLObject)cure_api.UNPROVIDED) == cure_api.NIL) ? cure_api.$list656 : cure_api.NIL);
        if (cure_api.NIL != conses_high.getf(renderer, (SubLObject)cure_api.$kw136$INITIALLY_SELECTED, (SubLObject)cure_api.UNPROVIDED)) {
            attrs = Sequences.cconcatenate(attrs, (SubLObject)ConsesLow.list((SubLObject)cure_api.$str657$initiallySelected, (SubLObject)cure_api.$str335$true));
        }
        try {
            final SubLObject _prev_bind_4 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
            final SubLObject _prev_bind_5 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
            try {
                xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str658$selectionRenderer, attrs, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                final SubLObject _prev_bind_0_$145 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                try {
                    xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                    if (cure_api.NIL != conses_high.getf(renderer, (SubLObject)cure_api.$kw67$STRING, (SubLObject)cure_api.UNPROVIDED)) {
                        try {
                            final SubLObject _prev_bind_0_$146 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$147 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                            try {
                                xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str90$string, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                                final SubLObject _prev_bind_0_$147 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                try {
                                    xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                                    xml_utilities.xml_print(web_utilities.html_url_encode(conses_high.getf(renderer, (SubLObject)cure_api.$kw67$STRING, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED);
                                }
                                finally {
                                    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$147, thread);
                                }
                            }
                            finally {
                                xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$147, thread);
                                xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$146, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$148 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                final SubLObject _values2 = Values.getValuesAsVector();
                                xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str90$string);
                                Values.restoreValuesFromVector(_values2);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$148, thread);
                            }
                        }
                    }
                    if (cure_api.NIL != conses_high.getf(renderer, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED)) {
                        try {
                            final SubLObject _prev_bind_0_$149 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$148 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                            try {
                                xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str644$cyclTerm, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                                final SubLObject _prev_bind_0_$150 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                try {
                                    xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                                    if (conses_high.getf(renderer, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED).equal((SubLObject)cure_api.$str160$newValue)) {
                                        xml_utilities.xml_print((SubLObject)cure_api.$str160$newValue, (SubLObject)cure_api.UNPROVIDED);
                                    }
                                    else {
                                        xml_utilities.xml_print(web_utilities.html_url_encode(kb_utilities.pretty_print_cycl_to_string(conses_high.getf(renderer, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED);
                                    }
                                }
                                finally {
                                    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$150, thread);
                                }
                            }
                            finally {
                                xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$148, thread);
                                xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$149, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$151 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                final SubLObject _values3 = Values.getValuesAsVector();
                                xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str644$cyclTerm);
                                Values.restoreValuesFromVector(_values3);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$151, thread);
                            }
                        }
                    }
                    if (cure_api.NIL != conses_high.getf(renderer, (SubLObject)cure_api.$kw161$CYCL_ID, (SubLObject)cure_api.UNPROVIDED)) {
                        try {
                            final SubLObject _prev_bind_0_$152 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$149 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                            try {
                                xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str659$cyclId, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                                final SubLObject _prev_bind_0_$153 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                try {
                                    xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                                    if (conses_high.getf(renderer, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED).equal((SubLObject)cure_api.$str160$newValue)) {
                                        xml_utilities.xml_print((SubLObject)cure_api.$str160$newValue, (SubLObject)cure_api.UNPROVIDED);
                                    }
                                    else {
                                        xml_utilities.xml_print(kb_utilities.compact_hl_external_id_string(conses_high.getf(renderer, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED)), (SubLObject)cure_api.UNPROVIDED);
                                    }
                                }
                                finally {
                                    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$153, thread);
                                }
                            }
                            finally {
                                xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$149, thread);
                                xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$152, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$154 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                final SubLObject _values4 = Values.getValuesAsVector();
                                xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str659$cyclId);
                                Values.restoreValuesFromVector(_values4);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$154, thread);
                            }
                        }
                    }
                }
                finally {
                    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$145, thread);
                }
            }
            finally {
                xml_utilities.$cycml_indent_level$.rebind(_prev_bind_5, thread);
                xml_utilities.$xml_indentation_level$.rebind(_prev_bind_4, thread);
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                xml_utilities.xml_terpri();
                xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str658$selectionRenderer);
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 184093L)
    public static SubLObject term_learner_concept_clouds(final SubLObject terms, SubLObject user, SubLObject task) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        if (task == cure_api.UNPROVIDED) {
            task = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym660$TERM_LEARNER_CONCEPT_CLOUDS, terms, user));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym660$TERM_LEARNER_CONCEPT_CLOUDS, terms, user));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        SubLObject result = (SubLObject)cure_api.NIL;
        final SubLObject query_mt = query_mt_for_user_and_task(user, task);
        final SubLObject already_resourcing_p = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
        try {
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_resource_limit(already_resourcing_p, (SubLObject)cure_api.SIX_INTEGER), thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(sbhl_marking_vars.possibly_new_marking_resource(already_resourcing_p), thread);
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind((SubLObject)cure_api.T, thread);
            SubLObject cdolist_list_var = terms;
            SubLObject v_term = (SubLObject)cure_api.NIL;
            v_term = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list((SubLObject)cure_api.$kw117$CYCL, v_term, (SubLObject)cure_api.$kw119$CONCEPT_ID, document_annotation_widgets.term_learner_id(v_term), (SubLObject)cure_api.$kw661$TERM_WEIGHT, term_learner_term_weight(v_term), (SubLObject)cure_api.$kw662$CLOUD, term_learner_term_concept_cloud(v_term, query_mt)), result);
                cdolist_list_var = cdolist_list_var.rest();
                v_term = cdolist_list_var.first();
            }
        }
        finally {
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_5, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_4, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
        }
        return Sequences.nreverse(result);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 184652L)
    public static SubLObject term_learner_term_concept_cloud(final SubLObject v_term, SubLObject query_mt) {
        if (query_mt == cure_api.UNPROVIDED) {
            query_mt = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cloud_term_dictionary = dictionary.new_dictionary((SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject _prev_bind_0 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
        try {
            pph_macros.$free_pph_problem_store_pointers$.bind((SubLObject)cure_api.NIL, thread);
            thread.resetMultipleValues();
            final SubLObject _prev_bind_0_$158 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
            try {
                pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                final SubLObject reuseP = thread.secondMultipleValue();
                thread.resetMultipleValues();
                try {
                    thread.resetMultipleValues();
                    final SubLObject _prev_bind_0_$159 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                    try {
                        pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                        final SubLObject new_or_reused = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$160 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                        try {
                            pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                            final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                            final SubLObject _prev_bind_0_$161 = memoization_state.$memoization_state$.currentBinding(thread);
                            try {
                                memoization_state.$memoization_state$.bind(local_state, thread);
                                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                try {
                                    if (cure_api.NIL != fort_types_interface.collection_p(v_term)) {
                                        SubLObject cdolist_list_var = genls.all_genls(v_term, query_mt, (SubLObject)cure_api.UNPROVIDED);
                                        SubLObject genl = (SubLObject)cure_api.NIL;
                                        genl = cdolist_list_var.first();
                                        while (cure_api.NIL != cdolist_list_var) {
                                            if (!v_term.equal(genl)) {
                                                final SubLObject displayP = term_learner_displayable_generalizationP(genl, query_mt);
                                                final SubLObject nl = (SubLObject)((cure_api.NIL != displayP) ? term_learner_cloud_display_nl(genl) : cure_api.$str50$);
                                                final SubLObject term_weight = term_learner_term_weight(genl);
                                                final SubLObject term_info = (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw141$GENLS, displayP, nl, genl, term_weight);
                                                dictionary.dictionary_enter(cloud_term_dictionary, document_annotation_widgets.term_learner_id(genl), term_info);
                                            }
                                            cdolist_list_var = cdolist_list_var.rest();
                                            genl = cdolist_list_var.first();
                                        }
                                    }
                                    else {
                                        SubLObject cdolist_list_var = isa.all_isa(v_term, query_mt, (SubLObject)cure_api.UNPROVIDED);
                                        SubLObject v_isa = (SubLObject)cure_api.NIL;
                                        v_isa = cdolist_list_var.first();
                                        while (cure_api.NIL != cdolist_list_var) {
                                            final SubLObject displayP = term_learner_displayable_generalizationP(v_isa, query_mt);
                                            final SubLObject nl = (SubLObject)((cure_api.NIL != displayP) ? term_learner_cloud_display_nl(v_isa) : cure_api.$str50$);
                                            final SubLObject term_weight = term_learner_term_weight(v_isa);
                                            final SubLObject term_info = (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw143$ISA, displayP, nl, v_isa, term_weight);
                                            dictionary.dictionary_enter(cloud_term_dictionary, document_annotation_widgets.term_learner_id(v_isa), term_info);
                                            cdolist_list_var = cdolist_list_var.rest();
                                            v_isa = cdolist_list_var.first();
                                        }
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$162 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                        final SubLObject _values = Values.getValuesAsVector();
                                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                        Values.restoreValuesFromVector(_values);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$162, thread);
                                    }
                                }
                            }
                            finally {
                                memoization_state.$memoization_state$.rebind(_prev_bind_0_$161, thread);
                            }
                        }
                        finally {
                            pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$160, thread);
                        }
                        if (new_or_reused == cure_api.$kw664$NEW && cure_api.NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread))) {
                            memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                        }
                    }
                    finally {
                        pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$159, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$163 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (cure_api.NIL == reuseP) {
                            pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$163, thread);
                    }
                }
            }
            finally {
                pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$158, thread);
            }
        }
        finally {
            pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0, thread);
        }
        return Sort.sort(dictionary_utilities.dictionary_to_alist(cloud_term_dictionary), (SubLObject)cure_api.$sym153$_, (SubLObject)cure_api.$sym665$SIXTH);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 185884L)
    public static SubLObject term_learner_concept_cloud_as_xml(final SubLObject terms, SubLObject user_id) {
        if (user_id == cure_api.UNPROVIDED) {
            user_id = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cloud_dict = term_learner_concept_cloud_new_int(terms, user_id);
        SubLObject result_string = (SubLObject)cure_api.NIL;
        final SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
        try {
            xml_vars.$xml_stream$.bind((SubLObject)cure_api.NIL, thread);
            try {
                xml_vars.$xml_stream$.setDynamicValue(streams_high.make_private_string_output_stream(), thread);
                try {
                    final SubLObject _prev_bind_0_$164 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                    try {
                        xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                        xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                        xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str667$cloud, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                        final SubLObject _prev_bind_0_$165 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                        try {
                            xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                            SubLObject iteration_state;
                            for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(cloud_dict)); cure_api.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                thread.resetMultipleValues();
                                final SubLObject v_term = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                final SubLObject cloud_elt_plist = thread.secondMultipleValue();
                                thread.resetMultipleValues();
                                xml_utilities.xml_terpri();
                                final SubLObject term_id = conses_high.getf(cloud_elt_plist, (SubLObject)cure_api.$kw161$CYCL_ID, (SubLObject)cure_api.UNPROVIDED);
                                final SubLObject genl_ids = conses_high.getf(cloud_elt_plist, (SubLObject)cure_api.$kw668$GENL_IDS, (SubLObject)cure_api.UNPROVIDED);
                                final SubLObject isa_ids = conses_high.getf(cloud_elt_plist, (SubLObject)cure_api.$kw669$ISA_IDS, (SubLObject)cure_api.UNPROVIDED);
                                final SubLObject display = conses_high.getf(cloud_elt_plist, (SubLObject)cure_api.$kw9$DISPLAY, (SubLObject)cure_api.UNPROVIDED);
                                final SubLObject nl = conses_high.getf(cloud_elt_plist, (SubLObject)cure_api.$kw212$NL, (SubLObject)cure_api.UNPROVIDED);
                                final SubLObject weight = conses_high.getf(cloud_elt_plist, (SubLObject)cure_api.$kw118$WEIGHT, (SubLObject)cure_api.UNPROVIDED);
                                SubLObject attrs = (SubLObject)ConsesLow.list((SubLObject)cure_api.$str670$cycl, PrintLow.write_to_string(v_term, cure_api.EMPTY_SUBL_OBJECT_ARRAY), (SubLObject)cure_api.$str659$cyclId, term_id, (SubLObject)cure_api.$str643$display, (SubLObject)((cure_api.NIL != display) ? cure_api.$str671$t : cure_api.$str672$f), (SubLObject)cure_api.$str673$weight, weight);
                                if (cure_api.NIL != nl) {
                                    attrs = Sequences.cconcatenate((SubLObject)ConsesLow.list((SubLObject)cure_api.$str674$nl, nl), attrs);
                                }
                                try {
                                    final SubLObject _prev_bind_0_$166 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$167 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                                    try {
                                        xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                        xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                        xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str675$concept, attrs, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                                        final SubLObject _prev_bind_0_$167 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                        try {
                                            xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                                            SubLObject cdolist_list_var = genl_ids;
                                            SubLObject genl_id = (SubLObject)cure_api.NIL;
                                            genl_id = cdolist_list_var.first();
                                            while (cure_api.NIL != cdolist_list_var) {
                                                xml_utilities.xml_terpri();
                                                final SubLObject attrs_$169 = (SubLObject)ConsesLow.list((SubLObject)cure_api.$str659$cyclId, genl_id);
                                                final SubLObject _prev_bind_0_$168 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$168 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                                                try {
                                                    xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                                    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                                    xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str676$genl, attrs_$169, (SubLObject)cure_api.T, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                                                    final SubLObject _prev_bind_0_$169 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                                    try {
                                                        xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                                                    }
                                                    finally {
                                                        xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$169, thread);
                                                    }
                                                }
                                                finally {
                                                    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$168, thread);
                                                    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$168, thread);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                genl_id = cdolist_list_var.first();
                                            }
                                            cdolist_list_var = isa_ids;
                                            SubLObject isa_id = (SubLObject)cure_api.NIL;
                                            isa_id = cdolist_list_var.first();
                                            while (cure_api.NIL != cdolist_list_var) {
                                                xml_utilities.xml_terpri();
                                                final SubLObject attrs_$170 = (SubLObject)ConsesLow.list((SubLObject)cure_api.$str332$conceptId, isa_id);
                                                final SubLObject _prev_bind_0_$170 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$169 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                                                try {
                                                    xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                                    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                                    xml_utilities.xml_start_tag_internal((SubLObject)cure_api.$str88$isa, attrs_$170, (SubLObject)cure_api.T, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw177$UNINITIALIZED);
                                                    final SubLObject _prev_bind_0_$171 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                                    try {
                                                        xml_vars.$xml_default_namespace$.bind((SubLObject)cure_api.$kw177$UNINITIALIZED, thread);
                                                    }
                                                    finally {
                                                        xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$171, thread);
                                                    }
                                                }
                                                finally {
                                                    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$169, thread);
                                                    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$170, thread);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                isa_id = cdolist_list_var.first();
                                            }
                                        }
                                        finally {
                                            xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$167, thread);
                                        }
                                    }
                                    finally {
                                        xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$167, thread);
                                        xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$166, thread);
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$172 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                        final SubLObject _values = Values.getValuesAsVector();
                                        xml_utilities.xml_terpri();
                                        xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str675$concept);
                                        Values.restoreValuesFromVector(_values);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$172, thread);
                                    }
                                }
                            }
                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                        }
                        finally {
                            xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$165, thread);
                        }
                    }
                    finally {
                        xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
                        xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$164, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$173 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        xml_utilities.xml_terpri();
                        xml_utilities.xml_end_tag_internal((SubLObject)cure_api.$str667$cloud);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$173, thread);
                    }
                }
                result_string = streams_high.get_output_stream_string(xml_vars.$xml_stream$.getDynamicValue(thread));
            }
            finally {
                final SubLObject _prev_bind_0_$174 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    streams_high.close(xml_vars.$xml_stream$.getDynamicValue(thread), (SubLObject)cure_api.UNPROVIDED);
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$174, thread);
                }
            }
        }
        finally {
            xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
        }
        return result_string;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 187007L)
    public static SubLObject term_learner_concept_cloud_new(final SubLObject terms, SubLObject user_id) {
        if (user_id == cure_api.UNPROVIDED) {
            user_id = (SubLObject)cure_api.NIL;
        }
        final SubLObject cloud_dict = term_learner_concept_cloud_new_int(terms, user_id);
        return dictionary.dictionary_values(cloud_dict);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 187198L)
    public static SubLObject term_learner_concept_cloud_new_int(final SubLObject terms, SubLObject user_id) {
        if (user_id == cure_api.UNPROVIDED) {
            user_id = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym677$TERM_LEARNER_CONCEPT_CLOUD_NEW_INT, terms, user_id));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym677$TERM_LEARNER_CONCEPT_CLOUD_NEW_INT, terms, user_id));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject cloud = dictionary.new_dictionary((SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject mt = cure_api.$const64$InferencePSC;
        SubLObject to_do = (SubLObject)cure_api.NIL;
        SubLObject current_todo = (SubLObject)cure_api.NIL;
        final SubLObject already_resourcing_p = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
        try {
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_resource_limit(already_resourcing_p, (SubLObject)cure_api.SIX_INTEGER), thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(sbhl_marking_vars.possibly_new_marking_resource(already_resourcing_p), thread);
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind((SubLObject)cure_api.T, thread);
            final SubLObject local_state;
            final SubLObject state = local_state = memoization_state.possibly_new_memoization_state();
            final SubLObject _prev_bind_0_$180 = memoization_state.$memoization_state$.currentBinding(thread);
            try {
                memoization_state.$memoization_state$.bind(local_state, thread);
                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                try {
                    final SubLObject _prev_bind_0_$181 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
                    try {
                        pph_macros.$free_pph_problem_store_pointers$.bind((SubLObject)cure_api.NIL, thread);
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$182 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                        try {
                            pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                            final SubLObject reuseP = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            try {
                                thread.resetMultipleValues();
                                final SubLObject _prev_bind_0_$183 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                                try {
                                    pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                                    final SubLObject new_or_reused = thread.secondMultipleValue();
                                    thread.resetMultipleValues();
                                    final SubLObject _prev_bind_0_$184 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                                    try {
                                        pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                        final SubLObject local_state_$185 = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                        final SubLObject _prev_bind_0_$185 = memoization_state.$memoization_state$.currentBinding(thread);
                                        try {
                                            memoization_state.$memoization_state$.bind(local_state_$185, thread);
                                            final SubLObject original_memoization_process_$187 = memoization_state.memoization_state_original_process(local_state_$185);
                                            try {
                                                SubLObject cdolist_list_var = terms;
                                                SubLObject v_term = (SubLObject)cure_api.NIL;
                                                v_term = cdolist_list_var.first();
                                                while (cure_api.NIL != cdolist_list_var) {
                                                    if (cure_api.NIL == dictionary.dictionary_lookup(cloud, v_term, (SubLObject)cure_api.UNPROVIDED)) {
                                                        add_cloud_entry_for_term(cloud, v_term, mt, (SubLObject)cure_api.T);
                                                    }
                                                    if (cure_api.NIL != fort_types_interface.isa_collectionP(v_term, (SubLObject)cure_api.UNPROVIDED)) {
                                                        final SubLObject items_var = genls.genls(v_term, mt, (SubLObject)cure_api.UNPROVIDED);
                                                        if (items_var.isVector()) {
                                                            final SubLObject vector_var = items_var;
                                                            final SubLObject backwardP_var = (SubLObject)cure_api.NIL;
                                                            SubLObject length;
                                                            SubLObject v_iteration;
                                                            SubLObject element_num;
                                                            SubLObject item;
                                                            for (length = Sequences.length(vector_var), v_iteration = (SubLObject)cure_api.NIL, v_iteration = (SubLObject)cure_api.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)cure_api.ONE_INTEGER)) {
                                                                element_num = ((cure_api.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)cure_api.ONE_INTEGER) : v_iteration);
                                                                item = Vectors.aref(vector_var, element_num);
                                                                to_do = (SubLObject)ConsesLow.cons(item, to_do);
                                                            }
                                                        }
                                                        else {
                                                            SubLObject cdolist_list_var_$188 = items_var;
                                                            SubLObject item2 = (SubLObject)cure_api.NIL;
                                                            item2 = cdolist_list_var_$188.first();
                                                            while (cure_api.NIL != cdolist_list_var_$188) {
                                                                to_do = (SubLObject)ConsesLow.cons(item2, to_do);
                                                                cdolist_list_var_$188 = cdolist_list_var_$188.rest();
                                                                item2 = cdolist_list_var_$188.first();
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        final SubLObject items_var = isa.isa(v_term, mt, (SubLObject)cure_api.UNPROVIDED);
                                                        if (items_var.isVector()) {
                                                            final SubLObject vector_var = items_var;
                                                            final SubLObject backwardP_var = (SubLObject)cure_api.NIL;
                                                            SubLObject length;
                                                            SubLObject v_iteration;
                                                            SubLObject element_num;
                                                            SubLObject item;
                                                            for (length = Sequences.length(vector_var), v_iteration = (SubLObject)cure_api.NIL, v_iteration = (SubLObject)cure_api.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)cure_api.ONE_INTEGER)) {
                                                                element_num = ((cure_api.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)cure_api.ONE_INTEGER) : v_iteration);
                                                                item = Vectors.aref(vector_var, element_num);
                                                                to_do = (SubLObject)ConsesLow.cons(item, to_do);
                                                            }
                                                        }
                                                        else {
                                                            SubLObject cdolist_list_var_$189 = items_var;
                                                            SubLObject item2 = (SubLObject)cure_api.NIL;
                                                            item2 = cdolist_list_var_$189.first();
                                                            while (cure_api.NIL != cdolist_list_var_$189) {
                                                                to_do = (SubLObject)ConsesLow.cons(item2, to_do);
                                                                cdolist_list_var_$189 = cdolist_list_var_$189.rest();
                                                                item2 = cdolist_list_var_$189.first();
                                                            }
                                                        }
                                                    }
                                                    while (cure_api.NIL != to_do) {
                                                        current_todo = to_do.first();
                                                        to_do = to_do.rest();
                                                        if (cure_api.NIL == dictionary.dictionary_lookup(cloud, current_todo, (SubLObject)cure_api.UNPROVIDED)) {
                                                            thread.resetMultipleValues();
                                                            final SubLObject updated_cloud = add_cloud_entry_for_term(cloud, current_todo, mt, (SubLObject)cure_api.UNPROVIDED);
                                                            final SubLObject new_todo = thread.secondMultipleValue();
                                                            thread.resetMultipleValues();
                                                            final SubLObject items_var2 = new_todo;
                                                            if (items_var2.isVector()) {
                                                                final SubLObject vector_var2 = items_var2;
                                                                final SubLObject backwardP_var2 = (SubLObject)cure_api.NIL;
                                                                SubLObject length2;
                                                                SubLObject v_iteration2;
                                                                SubLObject element_num2;
                                                                SubLObject item3;
                                                                for (length2 = Sequences.length(vector_var2), v_iteration2 = (SubLObject)cure_api.NIL, v_iteration2 = (SubLObject)cure_api.ZERO_INTEGER; v_iteration2.numL(length2); v_iteration2 = Numbers.add(v_iteration2, (SubLObject)cure_api.ONE_INTEGER)) {
                                                                    element_num2 = ((cure_api.NIL != backwardP_var2) ? Numbers.subtract(length2, v_iteration2, (SubLObject)cure_api.ONE_INTEGER) : v_iteration2);
                                                                    item3 = Vectors.aref(vector_var2, element_num2);
                                                                    to_do = (SubLObject)ConsesLow.cons(item3, to_do);
                                                                }
                                                            }
                                                            else {
                                                                SubLObject cdolist_list_var_$190 = items_var2;
                                                                SubLObject item4 = (SubLObject)cure_api.NIL;
                                                                item4 = cdolist_list_var_$190.first();
                                                                while (cure_api.NIL != cdolist_list_var_$190) {
                                                                    to_do = (SubLObject)ConsesLow.cons(item4, to_do);
                                                                    cdolist_list_var_$190 = cdolist_list_var_$190.rest();
                                                                    item4 = cdolist_list_var_$190.first();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    cdolist_list_var = cdolist_list_var.rest();
                                                    v_term = cdolist_list_var.first();
                                                }
                                            }
                                            finally {
                                                final SubLObject _prev_bind_0_$186 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                                    final SubLObject _values2 = Values.getValuesAsVector();
                                                    memoization_state.memoization_state_possibly_clear_original_process(local_state_$185, original_memoization_process_$187);
                                                    Values.restoreValuesFromVector(_values2);
                                                }
                                                finally {
                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$186, thread);
                                                }
                                            }
                                        }
                                        finally {
                                            memoization_state.$memoization_state$.rebind(_prev_bind_0_$185, thread);
                                        }
                                    }
                                    finally {
                                        pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$184, thread);
                                    }
                                    if (new_or_reused == cure_api.$kw664$NEW && cure_api.NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread))) {
                                        memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                                    }
                                }
                                finally {
                                    pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$183, thread);
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$187 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                    final SubLObject _values3 = Values.getValuesAsVector();
                                    if (cure_api.NIL == reuseP) {
                                        pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                                    }
                                    Values.restoreValuesFromVector(_values3);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$187, thread);
                                }
                            }
                        }
                        finally {
                            pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$182, thread);
                        }
                    }
                    finally {
                        pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0_$181, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$188 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                        final SubLObject _values4 = Values.getValuesAsVector();
                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                        Values.restoreValuesFromVector(_values4);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$188, thread);
                    }
                }
            }
            finally {
                memoization_state.$memoization_state$.rebind(_prev_bind_0_$180, thread);
            }
        }
        finally {
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_4, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_3, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_2, thread);
        }
        return cloud;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 188148L)
    public static SubLObject add_cloud_entry_for_term(final SubLObject cloud, final SubLObject v_term, final SubLObject mt, SubLObject force_displayP) {
        if (force_displayP == cure_api.UNPROVIDED) {
            force_displayP = (SubLObject)cure_api.NIL;
        }
        final SubLObject v_genls = genls.genls(v_term, mt, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject genl_termids = Mapping.mapcar((SubLObject)cure_api.$sym678$TERM_LEARNER_ID, v_genls);
        final SubLObject isas = (SubLObject)((cure_api.NIL != v_genls) ? cure_api.NIL : isa.isa(v_term, mt, (SubLObject)cure_api.UNPROVIDED));
        final SubLObject isa_term_ids = (SubLObject)((cure_api.NIL != isas) ? Mapping.mapcar((SubLObject)cure_api.$sym678$TERM_LEARNER_ID, isas) : cure_api.NIL);
        final SubLObject displayP = (cure_api.NIL != force_displayP) ? force_displayP : term_learner_displayable_generalizationP(v_term, mt);
        final SubLObject nl = (SubLObject)((cure_api.NIL != displayP) ? term_learner_cloud_display_nl(v_term) : cure_api.$str50$);
        final SubLObject term_weight = term_learner_term_weight(v_term);
        final SubLObject id = document_annotation_widgets.term_learner_id(v_term);
        dictionary.dictionary_enter(cloud, v_term, (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$kw117$CYCL, v_term, cure_api.$kw161$CYCL_ID, id, cure_api.$kw669$ISA_IDS, isa_term_ids, cure_api.$kw668$GENL_IDS, genl_termids, cure_api.$kw9$DISPLAY, displayP, cure_api.$kw212$NL, nl, cure_api.$kw118$WEIGHT, term_weight }));
        return Values.values(cloud, v_genls);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 188833L)
    public static SubLObject term_learner_term_weight(final SubLObject v_term) {
        final SubLObject generality = Numbers.log(cardinality_estimates.generality_estimate(v_term), (SubLObject)cure_api.UNPROVIDED);
        final SubLObject weight = (SubLObject)(generality.numG((SubLObject)cure_api.ZERO_INTEGER) ? Numbers.divide((SubLObject)cure_api.ONE_INTEGER, generality) : cure_api.ONE_INTEGER);
        return weight;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 189611L)
    public static SubLObject clear_term_learner_cloud_display_nl() {
        final SubLObject cs = cure_api.$term_learner_cloud_display_nl_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 189611L)
    public static SubLObject remove_term_learner_cloud_display_nl(final SubLObject v_term) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$term_learner_cloud_display_nl_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 189611L)
    public static SubLObject term_learner_cloud_display_nl_internal(final SubLObject v_term) {
        return nl_generation_api.cycl_term_to_nl_string_internal(v_term, nl_generation_api.new_pph_parameters((SubLObject)ConsesLow.list((SubLObject)cure_api.$kw522$PPH_LEXICAL_CONTEXT, cure_default_generation_mt((SubLObject)cure_api.UNPROVIDED)))).first();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 189611L)
    public static SubLObject term_learner_cloud_display_nl(final SubLObject v_term) {
        SubLObject caching_state = cure_api.$term_learner_cloud_display_nl_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym679$TERM_LEARNER_CLOUD_DISPLAY_NL, (SubLObject)cure_api.$sym680$_TERM_LEARNER_CLOUD_DISPLAY_NL_CACHING_STATE_, (SubLObject)cure_api.$int681$4096, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym682$CLEAR_TERM_LEARNER_CLOUD_DISPLAY_NL);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, v_term, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(term_learner_cloud_display_nl_internal(v_term)));
            memoization_state.caching_state_put(caching_state, v_term, results, (SubLObject)cure_api.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 190017L)
    public static SubLObject clear_term_learner_displayable_generalizationP() {
        final SubLObject cs = cure_api.$term_learner_displayable_generalizationP_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 190017L)
    public static SubLObject remove_term_learner_displayable_generalizationP(final SubLObject v_term, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$term_learner_displayable_generalizationP_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term, mt), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 190017L)
    public static SubLObject term_learner_displayable_generalizationP_internal(final SubLObject v_term, final SubLObject mt) {
        return (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == thcl.ke_irrelevant_termP(v_term, mt) && cure_api.NIL != rkf_concept_clarifier.rkf_clarifying_collectionP(v_term, mt));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 190017L)
    public static SubLObject term_learner_displayable_generalizationP(final SubLObject v_term, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        SubLObject caching_state = cure_api.$term_learner_displayable_generalizationP_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym683$TERM_LEARNER_DISPLAYABLE_GENERALIZATION_, (SubLObject)cure_api.$sym684$_TERM_LEARNER_DISPLAYABLE_GENERALIZATION__CACHING_STATE_, (SubLObject)cure_api.$int681$4096, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym685$CLEAR_TERM_LEARNER_DISPLAYABLE_GENERALIZATION_);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(term_learner_displayable_generalizationP_internal(v_term, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 190282L)
    public static SubLObject clear_term_learner_possibly_relevant_generalizationP() {
        final SubLObject cs = cure_api.$term_learner_possibly_relevant_generalizationP_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 190282L)
    public static SubLObject remove_term_learner_possibly_relevant_generalizationP(final SubLObject v_term, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$term_learner_possibly_relevant_generalizationP_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term, mt), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 190282L)
    public static SubLObject term_learner_possibly_relevant_generalizationP_internal(final SubLObject v_term, final SubLObject mt) {
        return (SubLObject)SubLObjectFactory.makeBoolean((cure_api.NIL == kb_accessors.indeterminate_termP(v_term) || v_term.eql(cure_api.$const686$Now)) && (cure_api.NIL == cycl_grammar.cycl_nat_p(v_term) || cure_api.NIL == subl_promotions.memberP(cycl_utilities.formula_arg0(v_term), (SubLObject)cure_api.$list687, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) && cure_api.NIL == thcl.ke_irrelevant_termP(narts_high.nart_substitute(v_term), mt));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 190282L)
    public static SubLObject term_learner_possibly_relevant_generalizationP(final SubLObject v_term, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        SubLObject caching_state = cure_api.$term_learner_possibly_relevant_generalizationP_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym92$TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION_, (SubLObject)cure_api.$sym688$_TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION__CACHING_STATE_, (SubLObject)cure_api.$int681$4096, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym689$CLEAR_TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION_);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(term_learner_possibly_relevant_generalizationP_internal(v_term, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 190967L)
    public static SubLObject clear_term_learner_irrelevancies_for_term(final SubLObject event, SubLObject param) {
        if (param == cure_api.UNPROVIDED) {
            param = (SubLObject)cure_api.NIL;
        }
        final SubLObject modified_term;
        final SubLObject event_info = modified_term = event_model.event_message(event);
        clear_term_learner_possibly_relevant_generalizationP();
        clear_term_learner_displayable_generalizationP();
        clear_term_learner_known_bindings_for_sentence();
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 191349L)
    public static SubLObject cycl_terms_to_nl_strings_quick(final SubLObject term_list, SubLObject pph_params) {
        if (pph_params == cure_api.UNPROVIDED) {
            pph_params = (SubLObject)cure_api.$kw20$DEFAULT;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)cure_api.NIL;
        final SubLObject _prev_bind_0 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
        try {
            pph_macros.$free_pph_problem_store_pointers$.bind((SubLObject)cure_api.NIL, thread);
            thread.resetMultipleValues();
            final SubLObject _prev_bind_0_$194 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
            try {
                pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                final SubLObject reuseP = thread.secondMultipleValue();
                thread.resetMultipleValues();
                try {
                    thread.resetMultipleValues();
                    final SubLObject _prev_bind_0_$195 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                    try {
                        pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                        final SubLObject new_or_reused = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$196 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                        try {
                            pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                            final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                            final SubLObject _prev_bind_0_$197 = memoization_state.$memoization_state$.currentBinding(thread);
                            try {
                                memoization_state.$memoization_state$.bind(local_state, thread);
                                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                try {
                                    SubLObject cdolist_list_var = term_list;
                                    SubLObject v_term = (SubLObject)cure_api.NIL;
                                    v_term = cdolist_list_var.first();
                                    while (cure_api.NIL != cdolist_list_var) {
                                        result = (SubLObject)ConsesLow.cons(nl_generation_api.cycl_term_to_nl_string_internal(v_term, pph_params).first(), result);
                                        cdolist_list_var = cdolist_list_var.rest();
                                        v_term = cdolist_list_var.first();
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$198 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                                        final SubLObject _values = Values.getValuesAsVector();
                                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                        Values.restoreValuesFromVector(_values);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$198, thread);
                                    }
                                }
                            }
                            finally {
                                memoization_state.$memoization_state$.rebind(_prev_bind_0_$197, thread);
                            }
                        }
                        finally {
                            pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$196, thread);
                        }
                        if (new_or_reused == cure_api.$kw664$NEW && cure_api.NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread))) {
                            memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                        }
                    }
                    finally {
                        pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$195, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$199 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (cure_api.NIL == reuseP) {
                            pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$199, thread);
                    }
                }
            }
            finally {
                pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$194, thread);
            }
        }
        finally {
            pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0, thread);
        }
        return Sequences.nreverse(result);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 191765L)
    public static SubLObject cb_show_followup_widget(final SubLObject fort) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject misc_attrs = (SubLObject)ConsesLow.list(reader.bq_cons((SubLObject)cure_api.$str694$_termId_, kb_utilities.compact_hl_external_id_string(fort)), reader.bq_cons((SubLObject)cure_api.$str695$_termString_, pph_main.generate_phrase(fort, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)));
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_class$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cure_api.$str696$cycFollowup);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
        SubLObject cdolist_list_var = misc_attrs;
        SubLObject cons = (SubLObject)cure_api.NIL;
        cons = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = cons;
            SubLObject attribute = (SubLObject)cure_api.NIL;
            SubLObject value = (SubLObject)cure_api.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list697);
            attribute = current.first();
            current = (value = current.rest());
            html_utilities.html_markup(attribute);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
            html_utilities.html_markup(value);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cure_api.T, thread);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        cyc_file_dependencies.javascript((SubLObject)cure_api.$kw698$FOLLOWUP_LOADER);
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 192541L)
    public static SubLObject cb_cure_host() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return (cure_api.NIL != cure_api.$cb_cure_internal_host_override$.getDynamicValue(thread)) ? cure_api.$cb_cure_internal_host_override$.getDynamicValue(thread) : ((cure_api.NIL != web_utilities.local_servlet_container_runningP()) ? misc_utilities.hostname() : cure_api.$cb_cure_external_host$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 192541L)
    public static SubLObject cb_cure_port() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return (cure_api.NIL != cure_api.$cb_cure_internal_port_override$.getDynamicValue(thread)) ? cure_api.$cb_cure_internal_port_override$.getDynamicValue(thread) : ((cure_api.NIL != web_utilities.local_servlet_container_runningP()) ? web_utilities.servlet_container_port() : cure_api.$cb_cure_external_port$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 192541L)
    public static SubLObject cb_cure_context_path() {
        return (cure_api.NIL != web_utilities.local_servlet_container_runningP()) ? cure_api.$cb_cure_internal_context_path$.getGlobalValue() : cure_api.$cb_cure_external_context_path$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 192541L)
    public static SubLObject cb_possibly_add_cure_link(final SubLObject v_term, SubLObject title_string, SubLObject link_string) {
        if (title_string == cure_api.UNPROVIDED) {
            title_string = (SubLObject)cure_api.NIL;
        }
        if (link_string == cure_api.UNPROVIDED) {
            link_string = (SubLObject)cure_api.$str707$CURE;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject err = (SubLObject)cure_api.NIL;
        try {
            thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
            final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind((SubLObject)cure_api.$sym708$CATCH_ERROR_MESSAGE_HANDLER, thread);
                try {
                    if (cure_api.NIL != default_task_for_user(operation_communication.the_cyclist()) && cure_api.NIL != query_mt_for_user_and_task(operation_communication.the_cyclist(), default_task_for_user(operation_communication.the_cyclist()))) {
                        return cb_cure_link(v_term, title_string, link_string);
                    }
                }
                catch (Throwable catch_var) {
                    Errors.handleThrowable(catch_var, (SubLObject)cure_api.NIL);
                }
            }
            finally {
                Errors.$error_handler$.rebind(_prev_bind_0, thread);
            }
        }
        catch (Throwable ccatch_env_var) {
            err = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
        }
        finally {
            thread.throwStack.pop();
        }
        html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cure_api.T, thread);
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cure_api.$str709$CURE_Broken);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
        Errors.warn((SubLObject)cure_api.$str710$CURE_broken___S, err);
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 192541L)
    public static SubLObject cb_cure_link(final SubLObject v_term, SubLObject title_string, SubLObject link_string) {
        if (title_string == cure_api.UNPROVIDED) {
            title_string = (SubLObject)cure_api.NIL;
        }
        if (link_string == cure_api.UNPROVIDED) {
            link_string = (SubLObject)cure_api.$str707$CURE;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_script_utilities.html_popup_script();
        final SubLObject href = Sequences.cconcatenate((SubLObject)cure_api.$str711$http___, new SubLObject[] { format_nil.format_nil_a_no_copy(cb_cure_host()), cure_api.$str606$_, format_nil.format_nil_a_no_copy(cb_cure_port()), format_nil.format_nil_a_no_copy(cb_cure_context_path()), cure_api.$str712$_edit_jsp_conceptid_, format_nil.format_nil_a_no_copy(kb_utilities.compact_hl_external_id_string(v_term)), cure_api.$str713$_cycHost_, format_nil.format_nil_a_no_copy(misc_utilities.hostname()), cure_api.$str714$_cycPort_, format_nil.format_nil_a_no_copy(html_kernel.html_port()), cure_api.$str715$_userName_, format_nil.format_nil_a_no_copy(web_utilities.html_url_encode(kb_paths.fort_name(operation_communication.the_cyclist()), (SubLObject)cure_api.UNPROVIDED)) });
        final SubLObject window_name = Sequences.cconcatenate(kb_utilities.compact_hl_external_id_string(v_term), (SubLObject)cure_api.$str716$_cure);
        final SubLObject onclick = html_script_utilities.html_popup_onclick(window_name, (SubLObject)cure_api.$int717$600, (SubLObject)cure_api.$int718$400, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
        html_utilities.html_markup(href);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
        if (cure_api.NIL != title_string) {
            html_utilities.html_markup(html_macros.$html_anchor_title$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
            html_utilities.html_markup(title_string);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
        }
        html_utilities.html_markup(html_macros.$html_event_attribute_onclick$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
        html_utilities.html_markup(onclick);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cure_api.T, thread);
            html_utilities.html_markup(html_macros.$html_image_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_image_src$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cure_api.$str719$_cycdoc_img_cb_cure_png);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
            if (cure_api.NIL != link_string) {
                html_utilities.html_markup(html_macros.$html_image_alt$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
                html_utilities.html_markup(link_string);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_image_align$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align((SubLObject)cure_api.$str720$bottom));
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_image_border$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cure_api.ZERO_INTEGER);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_image_style$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cure_api.$str721$height_1_2em);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cure_api.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cure_api.UNPROVIDED);
            final SubLObject _prev_bind_0_$200 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cure_api.T, thread);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$200, thread);
            }
            html_utilities.html_markup(html_macros.$html_image_tail$.getGlobalValue());
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 195210L)
    public static SubLObject clear_sentence_score() {
        final SubLObject cs = cure_api.$sentence_score_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 195210L)
    public static SubLObject remove_sentence_score(final SubLObject sentence, final SubLObject focal_term, SubLObject type_limit, SubLObject mt) {
        if (type_limit == cure_api.UNPROVIDED) {
            type_limit = (SubLObject)cure_api.NIL;
        }
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$sentence_score_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(sentence, focal_term, type_limit, mt), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 195210L)
    public static SubLObject sentence_score_internal(final SubLObject sentence, final SubLObject focal_term, final SubLObject type_limit, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject query_sentence = get_sentence_for_scoring(sentence, focal_term, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject known_bindings_set = set_query_variable((SubLObject)cure_api.$sym282$_X, query_sentence, mt, (SubLObject)cure_api.$list723);
        final SubLObject immediate_parents = isa.min_isa(focal_term, mt, (SubLObject)cure_api.UNPROVIDED);
        SubLObject instance_set = (SubLObject)cure_api.NIL;
        SubLObject score = (SubLObject)cure_api.ZERO_INTEGER;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            instance_set = set_utilities.make_set_from_list(Sequences.remove_duplicates(Mapping.mapcan((SubLObject)cure_api.$sym724$ALL_INSTANCES, immediate_parents, cure_api.EMPTY_SUBL_OBJECT_ARRAY), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.EQUAL);
            if (!set.set_size(instance_set).numE((SubLObject)cure_api.ZERO_INTEGER)) {
                score = Numbers.divide(set.set_size(set_utilities.set_intersection((SubLObject)ConsesLow.list(instance_set, known_bindings_set), (SubLObject)cure_api.UNPROVIDED)), set.set_size(instance_set));
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return score;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 195210L)
    public static SubLObject sentence_score(final SubLObject sentence, final SubLObject focal_term, SubLObject type_limit, SubLObject mt) {
        if (type_limit == cure_api.UNPROVIDED) {
            type_limit = (SubLObject)cure_api.NIL;
        }
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        SubLObject caching_state = cure_api.$sentence_score_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym722$SENTENCE_SCORE, (SubLObject)cure_api.$sym725$_SENTENCE_SCORE_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQ, (SubLObject)cure_api.FOUR_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_4(sentence, focal_term, type_limit, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (sentence.eql(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (focal_term.eql(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (type_limit.eql(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && mt.eql(cached_args.first())) {
                                return memoization_state.caching_results(results2);
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(sentence_score_internal(sentence, focal_term, type_limit, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(sentence, focal_term, type_limit, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 196168L)
    public static SubLObject clear_sentence_score_for_type() {
        final SubLObject cs = cure_api.$sentence_score_for_type_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 196168L)
    public static SubLObject remove_sentence_score_for_type(final SubLObject sentence, final SubLObject focal_arg_pos, final SubLObject focal_type, SubLObject type_limit, SubLObject mt) {
        if (type_limit == cure_api.UNPROVIDED) {
            type_limit = (SubLObject)cure_api.NIL;
        }
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$sentence_score_for_type_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(sentence, focal_arg_pos, focal_type, type_limit, mt), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 196168L)
    public static SubLObject sentence_score_for_type_internal(final SubLObject sentence, final SubLObject focal_arg_pos, final SubLObject focal_type, final SubLObject type_limit, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject query_sentence = get_sentence_for_scoring(sentence, (SubLObject)cure_api.NIL, focal_arg_pos, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject known_bindings_set = set_query_variable((SubLObject)cure_api.$sym727$_QUERY_VAR, query_sentence, mt, (SubLObject)cure_api.$list723);
        SubLObject instance_set = (SubLObject)cure_api.NIL;
        SubLObject score = (SubLObject)cure_api.ZERO_INTEGER;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            instance_set = set_utilities.make_set_from_list(isa.all_instances(focal_type, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.EQUAL);
            if (!set.set_size(instance_set).numE((SubLObject)cure_api.ZERO_INTEGER)) {
                score = Numbers.divide(set.set_size(set_utilities.set_intersection((SubLObject)ConsesLow.list(instance_set, known_bindings_set), (SubLObject)cure_api.UNPROVIDED)), set.set_size(instance_set));
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return score;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 196168L)
    public static SubLObject sentence_score_for_type(final SubLObject sentence, final SubLObject focal_arg_pos, final SubLObject focal_type, SubLObject type_limit, SubLObject mt) {
        if (type_limit == cure_api.UNPROVIDED) {
            type_limit = (SubLObject)cure_api.NIL;
        }
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        SubLObject caching_state = cure_api.$sentence_score_for_type_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym726$SENTENCE_SCORE_FOR_TYPE, (SubLObject)cure_api.$sym728$_SENTENCE_SCORE_FOR_TYPE_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.FIVE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_5(sentence, focal_arg_pos, focal_type, type_limit, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (sentence.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (focal_arg_pos.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (focal_type.equal(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (type_limit.equal(cached_args.first())) {
                                cached_args = cached_args.rest();
                                if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && mt.equal(cached_args.first())) {
                                    return memoization_state.caching_results(results2);
                                }
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(sentence_score_for_type_internal(sentence, focal_arg_pos, focal_type, type_limit, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(sentence, focal_arg_pos, focal_type, type_limit, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 196865L)
    public static SubLObject clear_set_query_variable() {
        final SubLObject cs = cure_api.$set_query_variable_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 196865L)
    public static SubLObject remove_set_query_variable(final SubLObject var, final SubLObject sentence, final SubLObject mt, final SubLObject params) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$set_query_variable_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(var, sentence, mt, params), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 196865L)
    public static SubLObject set_query_variable_internal(final SubLObject var, final SubLObject sentence, final SubLObject mt, final SubLObject params) {
        return set_utilities.make_set_from_list(ask_utilities.query_variable(var, sentence, mt, params), (SubLObject)cure_api.EQUAL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 196865L)
    public static SubLObject set_query_variable(final SubLObject var, final SubLObject sentence, final SubLObject mt, final SubLObject params) {
        SubLObject caching_state = cure_api.$set_query_variable_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym729$SET_QUERY_VARIABLE, (SubLObject)cure_api.$sym730$_SET_QUERY_VARIABLE_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.FOUR_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_4(var, sentence, mt, params);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (var.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (sentence.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (mt.equal(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && params.equal(cached_args.first())) {
                                return memoization_state.caching_results(results2);
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(set_query_variable_internal(var, sentence, mt, params)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(var, sentence, mt, params));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 197025L)
    public static SubLObject get_sentence_for_scoring(final SubLObject sentence, final SubLObject focal_term, SubLObject focal_arg_pos, SubLObject asserted_onlyP) {
        if (focal_arg_pos == cure_api.UNPROVIDED) {
            focal_arg_pos = (SubLObject)cure_api.NIL;
        }
        if (asserted_onlyP == cure_api.UNPROVIDED) {
            asserted_onlyP = (SubLObject)cure_api.T;
        }
        final SubLObject focal_var = cycl_utilities.formula_arg_position(sentence, focal_arg_pos, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject result_sentence = (cure_api.NIL != asserted_onlyP) ? el_utilities.make_formula(cure_api.$const73$assertedSentence, (SubLObject)ConsesLow.list(sentence), (SubLObject)cure_api.UNPROVIDED) : sentence;
        if (cure_api.NIL != focal_arg_pos) {
            return cycl_utilities.formula_subst((SubLObject)cure_api.$sym727$_QUERY_VAR, focal_var, result_sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        }
        return cycl_utilities.formula_subst((SubLObject)cure_api.$sym727$_QUERY_VAR, focal_term, result_sentence, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 197468L)
    public static SubLObject preds_w_scores(final SubLObject focal_term, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject sentences = (SubLObject)cure_api.NIL;
        final SubLObject _prev_bind_0 = cure_api.$current_tl_task$.currentBinding(thread);
        final SubLObject _prev_bind_2 = api_control_vars.$the_cyclist$.currentBinding(thread);
        try {
            cure_api.$current_tl_task$.bind(cure_api.$const620$GeneralCycKETask_Allotment, thread);
            api_control_vars.$the_cyclist$.bind(cure_api.$const731$DaveS, thread);
            final SubLObject query_mt = followup_query_mt_for_userXtask(api_control_vars.$the_cyclist$.getDynamicValue(thread), cure_api.$current_tl_task$.getDynamicValue(thread));
            final SubLObject fragment_sentence = Mapping.mapcar((SubLObject)cure_api.$sym405$FIRST, cae_query_search.get_fragments_for_terms((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)cure_api.$str732$something, focal_term)), (SubLObject)cure_api.NIL, query_mt, (SubLObject)cure_api.$kw345$BLANKS, (SubLObject)cure_api.NIL, (SubLObject)cure_api.UNPROVIDED));
            final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
            final SubLObject _prev_bind_0_$201 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$202 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                SubLObject cdolist_list_var = fragment_sentence;
                SubLObject sentence = (SubLObject)cure_api.NIL;
                sentence = cdolist_list_var.first();
                while (cure_api.NIL != cdolist_list_var) {
                    if (cure_api.NIL != cycl_utilities.formula_find(focal_term, sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                        sentences = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(sentence, sentence_score(sentence, focal_term, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)), sentences);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    sentence = cdolist_list_var.first();
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$202, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$201, thread);
            }
        }
        finally {
            api_control_vars.$the_cyclist$.rebind(_prev_bind_2, thread);
            cure_api.$current_tl_task$.rebind(_prev_bind_0, thread);
        }
        return sentences;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 198138L)
    public static SubLObject sentences_with_scores_for_type(final SubLObject type, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject sentences = (SubLObject)cure_api.NIL;
        final SubLObject already_resourcing_p = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
        final SubLObject _prev_bind_4 = cure_api.$current_tl_task$.currentBinding(thread);
        final SubLObject _prev_bind_5 = api_control_vars.$the_cyclist$.currentBinding(thread);
        try {
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_resource_limit(already_resourcing_p, (SubLObject)cure_api.SIX_INTEGER), thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(sbhl_marking_vars.possibly_new_marking_resource(already_resourcing_p), thread);
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind((SubLObject)cure_api.T, thread);
            cure_api.$current_tl_task$.bind(cure_api.$const620$GeneralCycKETask_Allotment, thread);
            api_control_vars.$the_cyclist$.bind(cure_api.$const731$DaveS, thread);
            final SubLObject focal_term = czer_main.canonicalize_term_assert((SubLObject)ConsesLow.list(cure_api.$const733$GenericInstanceFn, type), (SubLObject)cure_api.UNPROVIDED);
            final SubLObject query_mt = followup_query_mt_for_userXtask(api_control_vars.$the_cyclist$.getDynamicValue(thread), cure_api.$current_tl_task$.getDynamicValue(thread));
            final SubLObject substituted_fragments = get_fragments_for_terms_cached((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)cure_api.$str732$something, focal_term)), (SubLObject)cure_api.NIL, query_mt, (SubLObject)cure_api.$kw345$BLANKS);
            final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
            final SubLObject _prev_bind_0_$203 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$204 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$205 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                SubLObject cdolist_list_var = substituted_fragments;
                SubLObject sentence = (SubLObject)cure_api.NIL;
                sentence = cdolist_list_var.first();
                while (cure_api.NIL != cdolist_list_var) {
                    if (cure_api.NIL != cycl_utilities.formula_find(focal_term, sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) {
                        sentences = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(sentence, sentence_score(sentence, focal_term, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)), sentences);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    sentence = cdolist_list_var.first();
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$205, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$204, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$203, thread);
            }
        }
        finally {
            api_control_vars.$the_cyclist$.rebind(_prev_bind_5, thread);
            cure_api.$current_tl_task$.rebind(_prev_bind_4, thread);
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_3, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_2, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_0, thread);
        }
        return Sort.sort(sentences, (SubLObject)cure_api.$sym77$_, (SubLObject)cure_api.$sym734$SECOND);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 198901L)
    public static SubLObject clear_get_fragments_for_terms_cached() {
        final SubLObject cs = cure_api.$get_fragments_for_terms_cached_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 198901L)
    public static SubLObject remove_get_fragments_for_terms_cached(final SubLObject arg1, final SubLObject arg2, final SubLObject arg3, final SubLObject arg4) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$get_fragments_for_terms_cached_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(arg1, arg2, arg3, arg4), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 198901L)
    public static SubLObject get_fragments_for_terms_cached_internal(final SubLObject arg1, final SubLObject arg2, final SubLObject arg3, final SubLObject arg4) {
        return cae_query_search.get_fragments_for_terms(arg1, arg2, arg3, arg4, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 198901L)
    public static SubLObject get_fragments_for_terms_cached(final SubLObject arg1, final SubLObject arg2, final SubLObject arg3, final SubLObject arg4) {
        SubLObject caching_state = cure_api.$get_fragments_for_terms_cached_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym735$GET_FRAGMENTS_FOR_TERMS_CACHED, (SubLObject)cure_api.$sym736$_GET_FRAGMENTS_FOR_TERMS_CACHED_CACHING_STATE_, (SubLObject)cure_api.NIL, (SubLObject)cure_api.EQUALP, (SubLObject)cure_api.FOUR_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym737$CLEAR_GET_FRAGMENTS_FOR_TERMS_CACHED);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_4(arg1, arg2, arg3, arg4);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)cure_api.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)cure_api.NIL;
            collision = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (arg1.equalp(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (arg2.equalp(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (arg3.equalp(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (cure_api.NIL != cached_args && cure_api.NIL == cached_args.rest() && arg4.equalp(cached_args.first())) {
                                return memoization_state.caching_results(results2);
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_fragments_for_terms_cached_internal(arg1, arg2, arg3, arg4)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(arg1, arg2, arg3, arg4));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 199079L)
    public static SubLObject assert_orderings(SubLObject type, SubLObject assert_mt) {
        if (type == cure_api.UNPROVIDED) {
            type = cure_api.$const738$Restaurant_Organization;
        }
        if (assert_mt == cure_api.UNPROVIDED) {
            assert_mt = (SubLObject)cure_api.$list739;
        }
        SubLObject cdolist_list_var = genls.all_specs(type, cure_api.$const64$InferencePSC, (SubLObject)cure_api.UNPROVIDED);
        SubLObject spec = (SubLObject)cure_api.NIL;
        spec = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            assert_ordering_for_type(spec, assert_mt);
            cdolist_list_var = cdolist_list_var.rest();
            spec = cdolist_list_var.first();
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 199359L)
    public static SubLObject assert_ordering_for_type(final SubLObject type, SubLObject assert_mt) {
        if (assert_mt == cure_api.UNPROVIDED) {
            assert_mt = (SubLObject)cure_api.$list739;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject preds = (SubLObject)cure_api.NIL;
        final SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
        try {
            api_control_vars.$the_cyclist$.bind(cure_api.$const731$DaveS, thread);
            SubLObject cdolist_list_var = sentences_with_scores_for_type(type, (SubLObject)cure_api.UNPROVIDED);
            SubLObject sentence_and_score = (SubLObject)cure_api.NIL;
            sentence_and_score = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject current;
                final SubLObject datum = current = sentence_and_score;
                SubLObject sentence = (SubLObject)cure_api.NIL;
                SubLObject score = (SubLObject)cure_api.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list740);
                sentence = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list740);
                score = current.first();
                current = current.rest();
                if (cure_api.NIL == current) {
                    if (score.numG((SubLObject)cure_api.ZERO_INTEGER)) {
                        preds = (SubLObject)ConsesLow.cons(cycl_utilities.formula_arg0(sentence), preds);
                    }
                }
                else {
                    cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list740);
                }
                ke.ke_assert((SubLObject)ConsesLow.list(cure_api.$const368$summaryPredicateWRTSetOrCollectio, type, reader.bq_cons(cure_api.$const459$TheList, preds)), assert_mt, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                cdolist_list_var = cdolist_list_var.rest();
                sentence_and_score = cdolist_list_var.first();
            }
        }
        finally {
            api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 199889L)
    public static SubLObject pred_score(final SubLObject pred, final SubLObject focal_term, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        final SubLObject pred_arity = arity.arity(pred);
        SubLObject sentence = (SubLObject)ConsesLow.list(pred);
        SubLObject el_vars = (SubLObject)cure_api.NIL;
        SubLObject score = (SubLObject)cure_api.ZERO_INTEGER;
        SubLObject n;
        SubLObject el_var;
        for (n = (SubLObject)cure_api.NIL, n = (SubLObject)cure_api.ZERO_INTEGER; n.numL(pred_arity); n = Numbers.add(n, (SubLObject)cure_api.ONE_INTEGER)) {
            el_var = czer_utilities.unique_el_var_wrt_expression(sentence, (SubLObject)cure_api.UNPROVIDED);
            el_vars = (SubLObject)ConsesLow.cons(el_var, el_vars);
            sentence = list_utilities.snoc(el_var, sentence);
        }
        SubLObject this_sentence;
        for (n = (SubLObject)cure_api.NIL, n = (SubLObject)cure_api.ZERO_INTEGER; n.numL(pred_arity); n = Numbers.add(n, (SubLObject)cure_api.ONE_INTEGER)) {
            this_sentence = bindings.apply_bindings(cae_query_search.xyz_varmap_for_formula(sentence), sentence);
            ConsesLow.set_nth(Numbers.add((SubLObject)cure_api.ONE_INTEGER, n), this_sentence, focal_term);
            score = Numbers.add(score, sentence_score(this_sentence, focal_term, mt, (SubLObject)cure_api.UNPROVIDED));
        }
        return score;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 200935L)
    public static SubLObject preds_w_scores_from_rules(final SubLObject focal_term, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject predsXscores = (SubLObject)cure_api.NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            final SubLObject list_var = applicable_relations.applicable_predicates(focal_term, mt, (SubLObject)cure_api.$list741);
            final SubLObject _prev_bind_0_$206 = utilities_macros.$progress_note$.currentBinding(thread);
            final SubLObject _prev_bind_1_$207 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2_$208 = utilities_macros.$progress_total$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
            try {
                utilities_macros.$progress_note$.bind((SubLObject)cure_api.$str742$cdolist, thread);
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_total$.bind(Sequences.length(list_var), thread);
                utilities_macros.$progress_sofar$.bind((SubLObject)cure_api.ZERO_INTEGER, thread);
                utilities_macros.$last_percent_progress_index$.bind((SubLObject)cure_api.ZERO_INTEGER, thread);
                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)cure_api.NIL, thread);
                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)cure_api.T, thread);
                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                try {
                    utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                    SubLObject csome_list_var = list_var;
                    SubLObject pred = (SubLObject)cure_api.NIL;
                    pred = csome_list_var.first();
                    while (cure_api.NIL != csome_list_var) {
                        predsXscores = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(pred, pred_score(pred, focal_term, (SubLObject)cure_api.UNPROVIDED)), predsXscores);
                        utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)cure_api.ONE_INTEGER), thread);
                        utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                        csome_list_var = csome_list_var.rest();
                        pred = csome_list_var.first();
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$207 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        utilities_macros.noting_percent_progress_postamble();
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$207, thread);
                    }
                }
            }
            finally {
                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_total$.rebind(_prev_bind_2_$208, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_1_$207, thread);
                utilities_macros.$progress_note$.rebind(_prev_bind_0_$206, thread);
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return Sort.sort(predsXscores, (SubLObject)cure_api.$sym77$_, (SubLObject)cure_api.$sym734$SECOND);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 201676L)
    public static SubLObject pred_score_for_type(final SubLObject pred, final SubLObject focal_type, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        final SubLObject pred_arity = arity.arity(pred);
        SubLObject sentence = (SubLObject)ConsesLow.list(pred);
        SubLObject el_vars = (SubLObject)cure_api.NIL;
        SubLObject score = (SubLObject)cure_api.ZERO_INTEGER;
        SubLObject n;
        SubLObject el_var;
        for (n = (SubLObject)cure_api.NIL, n = (SubLObject)cure_api.ZERO_INTEGER; n.numL(pred_arity); n = Numbers.add(n, (SubLObject)cure_api.ONE_INTEGER)) {
            el_var = czer_utilities.unique_el_var_wrt_expression(sentence, (SubLObject)cure_api.UNPROVIDED);
            el_vars = (SubLObject)ConsesLow.cons(el_var, el_vars);
            sentence = list_utilities.snoc(el_var, sentence);
        }
        SubLObject this_sentence;
        for (n = (SubLObject)cure_api.NIL, n = (SubLObject)cure_api.ZERO_INTEGER; n.numL(pred_arity); n = Numbers.add(n, (SubLObject)cure_api.ONE_INTEGER)) {
            this_sentence = bindings.apply_bindings(cae_query_search.xyz_varmap_for_formula(sentence), sentence);
            score = Numbers.add(score, sentence_score_for_type(this_sentence, (SubLObject)ConsesLow.list(Numbers.add((SubLObject)cure_api.ONE_INTEGER, n)), focal_type, mt, (SubLObject)cure_api.UNPROVIDED));
        }
        return score;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 202254L)
    public static SubLObject preds_w_scores_for_type_from_rules(final SubLObject focal_type, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject predsXscores = (SubLObject)cure_api.NIL;
        final SubLObject message = Sequences.cconcatenate((SubLObject)cure_api.$str743$gathering_preds_for_, format_nil.format_nil_s_no_copy(focal_type));
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            final SubLObject list_var = applicable_relations.applicable_predicates((SubLObject)ConsesLow.list(cure_api.$const744$SomeFn, focal_type), mt, (SubLObject)cure_api.$list741);
            final SubLObject _prev_bind_0_$210 = utilities_macros.$progress_note$.currentBinding(thread);
            final SubLObject _prev_bind_1_$211 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2_$212 = utilities_macros.$progress_total$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
            try {
                utilities_macros.$progress_note$.bind((SubLObject)((cure_api.NIL != message) ? message : cure_api.$str742$cdolist), thread);
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_total$.bind(Sequences.length(list_var), thread);
                utilities_macros.$progress_sofar$.bind((SubLObject)cure_api.ZERO_INTEGER, thread);
                utilities_macros.$last_percent_progress_index$.bind((SubLObject)cure_api.ZERO_INTEGER, thread);
                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)cure_api.NIL, thread);
                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)cure_api.T, thread);
                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                try {
                    utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                    SubLObject csome_list_var = list_var;
                    SubLObject pred = (SubLObject)cure_api.NIL;
                    pred = csome_list_var.first();
                    while (cure_api.NIL != csome_list_var) {
                        predsXscores = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(pred, pred_score_for_type(pred, focal_type, (SubLObject)cure_api.UNPROVIDED)), predsXscores);
                        utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)cure_api.ONE_INTEGER), thread);
                        utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                        csome_list_var = csome_list_var.rest();
                        pred = csome_list_var.first();
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$211 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        utilities_macros.noting_percent_progress_postamble();
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$211, thread);
                    }
                }
            }
            finally {
                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_total$.rebind(_prev_bind_2_$212, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_1_$211, thread);
                utilities_macros.$progress_note$.rebind(_prev_bind_0_$210, thread);
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return Sort.sort(predsXscores, (SubLObject)cure_api.$sym77$_, (SubLObject)cure_api.$sym734$SECOND);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 202767L)
    public static SubLObject assert_ordering_for_type_from_rules(final SubLObject type, SubLObject assert_mt) {
        if (assert_mt == cure_api.UNPROVIDED) {
            assert_mt = (SubLObject)cure_api.$list739;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject preds_and_scores = preds_w_scores_for_type_from_rules(type, (SubLObject)cure_api.UNPROVIDED);
        SubLObject preds = (SubLObject)cure_api.NIL;
        final SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
        final SubLObject _prev_bind_2 = api_control_vars.$ke_purpose$.currentBinding(thread);
        try {
            api_control_vars.$the_cyclist$.bind(cure_api.$const731$DaveS, thread);
            api_control_vars.$ke_purpose$.bind(cure_api.$const620$GeneralCycKETask_Allotment, thread);
            SubLObject cdolist_list_var = preds_and_scores;
            SubLObject pred_and_score = (SubLObject)cure_api.NIL;
            pred_and_score = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                SubLObject current;
                final SubLObject datum = current = pred_and_score;
                SubLObject pred = (SubLObject)cure_api.NIL;
                SubLObject score = (SubLObject)cure_api.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list745);
                pred = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list745);
                score = current.first();
                current = current.rest();
                if (cure_api.NIL == current) {
                    if (score.numG((SubLObject)cure_api.ZERO_INTEGER)) {
                        preds = (SubLObject)ConsesLow.cons(pred, preds);
                    }
                }
                else {
                    cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list745);
                }
                cdolist_list_var = cdolist_list_var.rest();
                pred_and_score = cdolist_list_var.first();
            }
            preds = Sequences.nreverse(preds);
            ke.ke_assert((SubLObject)ConsesLow.list(cure_api.$const368$summaryPredicateWRTSetOrCollectio, type, reader.bq_cons(cure_api.$const459$TheList, preds)), assert_mt, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        }
        finally {
            api_control_vars.$ke_purpose$.rebind(_prev_bind_2, thread);
            api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 203433L)
    public static SubLObject assert_ordering_for_specs_from_rules(final SubLObject type, SubLObject task) {
        if (task == cure_api.UNPROVIDED) {
            task = cure_api.$const620$GeneralCycKETask_Allotment;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject assert_mt = (SubLObject)ConsesLow.list(cure_api.$const746$DocumentReaderFollowupsForTaskMtF, task);
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(cure_api.$const64$InferencePSC);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            SubLObject node_var = type;
            final SubLObject deck_type = (SubLObject)cure_api.$kw749$STACK;
            final SubLObject recur_deck = deck.create_deck(deck_type);
            final SubLObject _prev_bind_0_$214 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
            try {
                sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                try {
                    final SubLObject tv_var = (SubLObject)cure_api.NIL;
                    final SubLObject _prev_bind_0_$215 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$216 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_tv$.bind((cure_api.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((cure_api.NIL != tv_var) ? cure_api.$sym750$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                        if (cure_api.NIL != tv_var && cure_api.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && cure_api.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                            final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                            if (pcase_var.eql((SubLObject)cure_api.$kw751$ERROR)) {
                                sbhl_paranoia.sbhl_error((SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.$str752$_A_is_not_a__A, tv_var, (SubLObject)cure_api.$sym753$SBHL_TRUE_TV_P, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                            }
                            else if (pcase_var.eql((SubLObject)cure_api.$kw754$CERROR)) {
                                sbhl_paranoia.sbhl_cerror((SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.$str755$continue_anyway, (SubLObject)cure_api.$str752$_A_is_not_a__A, tv_var, (SubLObject)cure_api.$sym753$SBHL_TRUE_TV_P, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                            }
                            else if (pcase_var.eql((SubLObject)cure_api.$kw756$WARN)) {
                                Errors.warn((SubLObject)cure_api.$str752$_A_is_not_a__A, tv_var, (SubLObject)cure_api.$sym753$SBHL_TRUE_TV_P);
                            }
                            else {
                                Errors.warn((SubLObject)cure_api.$str757$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                Errors.cerror((SubLObject)cure_api.$str755$continue_anyway, (SubLObject)cure_api.$str752$_A_is_not_a__A, tv_var, (SubLObject)cure_api.$sym753$SBHL_TRUE_TV_P);
                            }
                        }
                        final SubLObject _prev_bind_0_$216 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$217 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$219 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_vars.get_sbhl_module(cure_api.$const76$genls), thread);
                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_vars.get_sbhl_module(cure_api.$const76$genls)), thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_vars.get_sbhl_module(cure_api.$const76$genls)), thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)cure_api.NIL, thread);
                            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module(cure_api.$const76$genls), thread);
                            if (cure_api.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || cure_api.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(type, sbhl_module_vars.get_sbhl_module((SubLObject)cure_api.UNPROVIDED))) {
                                final SubLObject _prev_bind_0_$217 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$218 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$220 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_vars.get_sbhl_module(cure_api.$const76$genls)), thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)cure_api.NIL, thread);
                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_var, (SubLObject)cure_api.UNPROVIDED);
                                    while (cure_api.NIL != node_var) {
                                        final SubLObject spec = node_var;
                                        assert_ordering_for_type_from_rules(spec, assert_mt);
                                        SubLObject cdolist_list_var;
                                        final SubLObject accessible_modules = cdolist_list_var = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module(cure_api.$const76$genls));
                                        SubLObject module_var = (SubLObject)cure_api.NIL;
                                        module_var = cdolist_list_var.first();
                                        while (cure_api.NIL != cdolist_list_var) {
                                            final SubLObject _prev_bind_0_$218 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$219 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)((cure_api.NIL != sbhl_search_vars.flip_genl_inverse_modeP((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) ? SubLObjectFactory.makeBoolean(cure_api.NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                                                final SubLObject node = function_terms.naut_to_nart(node_var);
                                                if (cure_api.NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                    final SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module((SubLObject)cure_api.UNPROVIDED));
                                                    if (cure_api.NIL != d_link) {
                                                        final SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module((SubLObject)cure_api.UNPROVIDED));
                                                        if (cure_api.NIL != mt_links) {
                                                            SubLObject iteration_state;
                                                            for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); cure_api.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                thread.resetMultipleValues();
                                                                final SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                final SubLObject tv_links = thread.secondMultipleValue();
                                                                thread.resetMultipleValues();
                                                                if (cure_api.NIL != mt_relevance_macros.relevant_mtP(mt)) {
                                                                    final SubLObject _prev_bind_0_$219 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
                                                                        SubLObject iteration_state_$226;
                                                                        for (iteration_state_$226 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); cure_api.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$226); iteration_state_$226 = dictionary_contents.do_dictionary_contents_next(iteration_state_$226)) {
                                                                            thread.resetMultipleValues();
                                                                            final SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$226);
                                                                            final SubLObject link_nodes = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (cure_api.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
                                                                                final SubLObject _prev_bind_0_$220 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
                                                                                    final SubLObject sol = link_nodes;
                                                                                    if (cure_api.NIL != set.set_p(sol)) {
                                                                                        final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                        SubLObject basis_object;
                                                                                        SubLObject state;
                                                                                        SubLObject node_vars_link_node;
                                                                                        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)cure_api.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); cure_api.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                            node_vars_link_node = set_contents.do_set_contents_next(basis_object, state);
                                                                                            if (cure_api.NIL != set_contents.do_set_contents_element_validP(state, node_vars_link_node) && cure_api.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, (SubLObject)cure_api.UNPROVIDED)) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, (SubLObject)cure_api.UNPROVIDED);
                                                                                                deck.deck_push(node_vars_link_node, recur_deck);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else if (sol.isList()) {
                                                                                        SubLObject csome_list_var = sol;
                                                                                        SubLObject node_vars_link_node2 = (SubLObject)cure_api.NIL;
                                                                                        node_vars_link_node2 = csome_list_var.first();
                                                                                        while (cure_api.NIL != csome_list_var) {
                                                                                            if (cure_api.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, (SubLObject)cure_api.UNPROVIDED)) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, (SubLObject)cure_api.UNPROVIDED);
                                                                                                deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                            }
                                                                                            csome_list_var = csome_list_var.rest();
                                                                                            node_vars_link_node2 = csome_list_var.first();
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        Errors.error((SubLObject)cure_api.$str758$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                    }
                                                                                }
                                                                                finally {
                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$220, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_$226);
                                                                    }
                                                                    finally {
                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$219, thread);
                                                                    }
                                                                }
                                                            }
                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                        }
                                                    }
                                                    else {
                                                        sbhl_paranoia.sbhl_error((SubLObject)cure_api.FIVE_INTEGER, (SubLObject)cure_api.$str759$attempting_to_bind_direction_link, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                                                    }
                                                }
                                                else if (cure_api.NIL != obsolete.cnat_p(node, (SubLObject)cure_api.UNPROVIDED)) {
                                                    SubLObject cdolist_list_var_$228;
                                                    final SubLObject new_list = cdolist_list_var_$228 = ((cure_api.NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)cure_api.UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)cure_api.UNPROVIDED)));
                                                    SubLObject generating_fn = (SubLObject)cure_api.NIL;
                                                    generating_fn = cdolist_list_var_$228.first();
                                                    while (cure_api.NIL != cdolist_list_var_$228) {
                                                        final SubLObject _prev_bind_0_$221 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                        try {
                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                            final SubLObject sol2;
                                                            final SubLObject link_nodes2 = sol2 = Functions.funcall(generating_fn, node);
                                                            if (cure_api.NIL != set.set_p(sol2)) {
                                                                final SubLObject set_contents_var2 = set.do_set_internal(sol2);
                                                                SubLObject basis_object2;
                                                                SubLObject state2;
                                                                SubLObject node_vars_link_node3;
                                                                for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = (SubLObject)cure_api.NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); cure_api.NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                    node_vars_link_node3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                    if (cure_api.NIL != set_contents.do_set_contents_element_validP(state2, node_vars_link_node3) && cure_api.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, (SubLObject)cure_api.UNPROVIDED)) {
                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, (SubLObject)cure_api.UNPROVIDED);
                                                                        deck.deck_push(node_vars_link_node3, recur_deck);
                                                                    }
                                                                }
                                                            }
                                                            else if (sol2.isList()) {
                                                                SubLObject csome_list_var2 = sol2;
                                                                SubLObject node_vars_link_node4 = (SubLObject)cure_api.NIL;
                                                                node_vars_link_node4 = csome_list_var2.first();
                                                                while (cure_api.NIL != csome_list_var2) {
                                                                    if (cure_api.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, (SubLObject)cure_api.UNPROVIDED)) {
                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, (SubLObject)cure_api.UNPROVIDED);
                                                                        deck.deck_push(node_vars_link_node4, recur_deck);
                                                                    }
                                                                    csome_list_var2 = csome_list_var2.rest();
                                                                    node_vars_link_node4 = csome_list_var2.first();
                                                                }
                                                            }
                                                            else {
                                                                Errors.error((SubLObject)cure_api.$str758$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                            }
                                                        }
                                                        finally {
                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$221, thread);
                                                        }
                                                        cdolist_list_var_$228 = cdolist_list_var_$228.rest();
                                                        generating_fn = cdolist_list_var_$228.first();
                                                    }
                                                }
                                            }
                                            finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$219, thread);
                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$218, thread);
                                            }
                                            cdolist_list_var = cdolist_list_var.rest();
                                            module_var = cdolist_list_var.first();
                                        }
                                        node_var = deck.deck_pop(recur_deck);
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$220, thread);
                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$218, thread);
                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$217, thread);
                                }
                            }
                            else {
                                sbhl_paranoia.sbhl_warn((SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.$str760$Node__a_does_not_pass_sbhl_type_t, type, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)cure_api.UNPROVIDED)), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                            }
                        }
                        finally {
                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$219, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$217, thread);
                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$216, thread);
                        }
                    }
                    finally {
                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$216, thread);
                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$215, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$222 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$222, thread);
                    }
                }
            }
            finally {
                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$214, thread);
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 203758L)
    public static SubLObject assert_applicable_preds_for_specs(final SubLObject type, SubLObject score_limit, SubLObject task) {
        if (score_limit == cure_api.UNPROVIDED) {
            score_limit = (SubLObject)cure_api.$float761$0_001;
        }
        if (task == cure_api.UNPROVIDED) {
            task = cure_api.$const620$GeneralCycKETask_Allotment;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject assert_mt = (SubLObject)ConsesLow.list(cure_api.$const746$DocumentReaderFollowupsForTaskMtF, task);
        SubLObject assert_sentences = (SubLObject)cure_api.NIL;
        final SubLObject soon_to_add = dictionary.new_dictionary((SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(cure_api.$const64$InferencePSC);
        SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            SubLObject node_var = type;
            final SubLObject deck_type = (SubLObject)cure_api.$kw749$STACK;
            final SubLObject recur_deck = deck.create_deck(deck_type);
            final SubLObject _prev_bind_0_$231 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
            try {
                sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                try {
                    final SubLObject tv_var = (SubLObject)cure_api.NIL;
                    final SubLObject _prev_bind_0_$232 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$233 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_tv$.bind((cure_api.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((cure_api.NIL != tv_var) ? cure_api.$sym750$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                        if (cure_api.NIL != tv_var && cure_api.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && cure_api.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                            final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                            if (pcase_var.eql((SubLObject)cure_api.$kw751$ERROR)) {
                                sbhl_paranoia.sbhl_error((SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.$str752$_A_is_not_a__A, tv_var, (SubLObject)cure_api.$sym753$SBHL_TRUE_TV_P, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                            }
                            else if (pcase_var.eql((SubLObject)cure_api.$kw754$CERROR)) {
                                sbhl_paranoia.sbhl_cerror((SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.$str755$continue_anyway, (SubLObject)cure_api.$str752$_A_is_not_a__A, tv_var, (SubLObject)cure_api.$sym753$SBHL_TRUE_TV_P, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                            }
                            else if (pcase_var.eql((SubLObject)cure_api.$kw756$WARN)) {
                                Errors.warn((SubLObject)cure_api.$str752$_A_is_not_a__A, tv_var, (SubLObject)cure_api.$sym753$SBHL_TRUE_TV_P);
                            }
                            else {
                                Errors.warn((SubLObject)cure_api.$str757$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                Errors.cerror((SubLObject)cure_api.$str755$continue_anyway, (SubLObject)cure_api.$str752$_A_is_not_a__A, tv_var, (SubLObject)cure_api.$sym753$SBHL_TRUE_TV_P);
                            }
                        }
                        final SubLObject _prev_bind_0_$233 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$234 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$236 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_vars.get_sbhl_module(cure_api.$const76$genls), thread);
                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_vars.get_sbhl_module(cure_api.$const76$genls)), thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_vars.get_sbhl_module(cure_api.$const76$genls)), thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)cure_api.NIL, thread);
                            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module(cure_api.$const76$genls), thread);
                            if (cure_api.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || cure_api.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(type, sbhl_module_vars.get_sbhl_module((SubLObject)cure_api.UNPROVIDED))) {
                                final SubLObject _prev_bind_0_$234 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$235 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$237 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_vars.get_sbhl_module(cure_api.$const76$genls)), thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)cure_api.NIL, thread);
                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_var, (SubLObject)cure_api.UNPROVIDED);
                                    while (cure_api.NIL != node_var) {
                                        final SubLObject spec = node_var;
                                        assert_sentences = Sequences.cconcatenate(assert_sentences, get_applicable_formula_generators_for_type(spec, assert_mt, soon_to_add, score_limit));
                                        SubLObject cdolist_list_var;
                                        final SubLObject accessible_modules = cdolist_list_var = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module(cure_api.$const76$genls));
                                        SubLObject module_var = (SubLObject)cure_api.NIL;
                                        module_var = cdolist_list_var.first();
                                        while (cure_api.NIL != cdolist_list_var) {
                                            final SubLObject _prev_bind_0_$235 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$236 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)((cure_api.NIL != sbhl_search_vars.flip_genl_inverse_modeP((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED)) ? SubLObjectFactory.makeBoolean(cure_api.NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                                                final SubLObject node = function_terms.naut_to_nart(node_var);
                                                if (cure_api.NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                    final SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module((SubLObject)cure_api.UNPROVIDED));
                                                    if (cure_api.NIL != d_link) {
                                                        final SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module((SubLObject)cure_api.UNPROVIDED));
                                                        if (cure_api.NIL != mt_links) {
                                                            SubLObject iteration_state;
                                                            for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); cure_api.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                thread.resetMultipleValues();
                                                                final SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                final SubLObject tv_links = thread.secondMultipleValue();
                                                                thread.resetMultipleValues();
                                                                if (cure_api.NIL != mt_relevance_macros.relevant_mtP(mt)) {
                                                                    final SubLObject _prev_bind_0_$236 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
                                                                        SubLObject iteration_state_$243;
                                                                        for (iteration_state_$243 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); cure_api.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$243); iteration_state_$243 = dictionary_contents.do_dictionary_contents_next(iteration_state_$243)) {
                                                                            thread.resetMultipleValues();
                                                                            final SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$243);
                                                                            final SubLObject link_nodes = thread.secondMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (cure_api.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
                                                                                final SubLObject _prev_bind_0_$237 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
                                                                                    final SubLObject sol = link_nodes;
                                                                                    if (cure_api.NIL != set.set_p(sol)) {
                                                                                        final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                        SubLObject basis_object;
                                                                                        SubLObject state;
                                                                                        SubLObject node_vars_link_node;
                                                                                        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)cure_api.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); cure_api.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                            node_vars_link_node = set_contents.do_set_contents_next(basis_object, state);
                                                                                            if (cure_api.NIL != set_contents.do_set_contents_element_validP(state, node_vars_link_node) && cure_api.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, (SubLObject)cure_api.UNPROVIDED)) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, (SubLObject)cure_api.UNPROVIDED);
                                                                                                deck.deck_push(node_vars_link_node, recur_deck);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else if (sol.isList()) {
                                                                                        SubLObject csome_list_var = sol;
                                                                                        SubLObject node_vars_link_node2 = (SubLObject)cure_api.NIL;
                                                                                        node_vars_link_node2 = csome_list_var.first();
                                                                                        while (cure_api.NIL != csome_list_var) {
                                                                                            if (cure_api.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, (SubLObject)cure_api.UNPROVIDED)) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, (SubLObject)cure_api.UNPROVIDED);
                                                                                                deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                            }
                                                                                            csome_list_var = csome_list_var.rest();
                                                                                            node_vars_link_node2 = csome_list_var.first();
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        Errors.error((SubLObject)cure_api.$str758$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                    }
                                                                                }
                                                                                finally {
                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$237, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_$243);
                                                                    }
                                                                    finally {
                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$236, thread);
                                                                    }
                                                                }
                                                            }
                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                        }
                                                    }
                                                    else {
                                                        sbhl_paranoia.sbhl_error((SubLObject)cure_api.FIVE_INTEGER, (SubLObject)cure_api.$str759$attempting_to_bind_direction_link, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                                                    }
                                                }
                                                else if (cure_api.NIL != obsolete.cnat_p(node, (SubLObject)cure_api.UNPROVIDED)) {
                                                    SubLObject cdolist_list_var_$245;
                                                    final SubLObject new_list = cdolist_list_var_$245 = ((cure_api.NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)cure_api.UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)cure_api.UNPROVIDED)));
                                                    SubLObject generating_fn = (SubLObject)cure_api.NIL;
                                                    generating_fn = cdolist_list_var_$245.first();
                                                    while (cure_api.NIL != cdolist_list_var_$245) {
                                                        final SubLObject _prev_bind_0_$238 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                        try {
                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                            final SubLObject sol2;
                                                            final SubLObject link_nodes2 = sol2 = Functions.funcall(generating_fn, node);
                                                            if (cure_api.NIL != set.set_p(sol2)) {
                                                                final SubLObject set_contents_var2 = set.do_set_internal(sol2);
                                                                SubLObject basis_object2;
                                                                SubLObject state2;
                                                                SubLObject node_vars_link_node3;
                                                                for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = (SubLObject)cure_api.NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); cure_api.NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                    node_vars_link_node3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                    if (cure_api.NIL != set_contents.do_set_contents_element_validP(state2, node_vars_link_node3) && cure_api.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, (SubLObject)cure_api.UNPROVIDED)) {
                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, (SubLObject)cure_api.UNPROVIDED);
                                                                        deck.deck_push(node_vars_link_node3, recur_deck);
                                                                    }
                                                                }
                                                            }
                                                            else if (sol2.isList()) {
                                                                SubLObject csome_list_var2 = sol2;
                                                                SubLObject node_vars_link_node4 = (SubLObject)cure_api.NIL;
                                                                node_vars_link_node4 = csome_list_var2.first();
                                                                while (cure_api.NIL != csome_list_var2) {
                                                                    if (cure_api.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, (SubLObject)cure_api.UNPROVIDED)) {
                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, (SubLObject)cure_api.UNPROVIDED);
                                                                        deck.deck_push(node_vars_link_node4, recur_deck);
                                                                    }
                                                                    csome_list_var2 = csome_list_var2.rest();
                                                                    node_vars_link_node4 = csome_list_var2.first();
                                                                }
                                                            }
                                                            else {
                                                                Errors.error((SubLObject)cure_api.$str758$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                            }
                                                        }
                                                        finally {
                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$238, thread);
                                                        }
                                                        cdolist_list_var_$245 = cdolist_list_var_$245.rest();
                                                        generating_fn = cdolist_list_var_$245.first();
                                                    }
                                                }
                                            }
                                            finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$236, thread);
                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$235, thread);
                                            }
                                            cdolist_list_var = cdolist_list_var.rest();
                                            module_var = cdolist_list_var.first();
                                        }
                                        node_var = deck.deck_pop(recur_deck);
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$237, thread);
                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$235, thread);
                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$234, thread);
                                }
                            }
                            else {
                                sbhl_paranoia.sbhl_warn((SubLObject)cure_api.TWO_INTEGER, (SubLObject)cure_api.$str760$Node__a_does_not_pass_sbhl_type_t, type, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)cure_api.UNPROVIDED)), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                            }
                        }
                        finally {
                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$236, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$234, thread);
                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$233, thread);
                        }
                    }
                    finally {
                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$233, thread);
                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$232, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$239 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$239, thread);
                    }
                }
            }
            finally {
                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$231, thread);
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
        _prev_bind_2 = api_control_vars.$ke_purpose$.currentBinding(thread);
        try {
            api_control_vars.$the_cyclist$.bind(cure_api.$const731$DaveS, thread);
            api_control_vars.$ke_purpose$.bind(cure_api.$const762$GeneralCycKE, thread);
            SubLObject cdolist_list_var2 = assert_sentences;
            SubLObject assert_sentence = (SubLObject)cure_api.NIL;
            assert_sentence = cdolist_list_var2.first();
            while (cure_api.NIL != cdolist_list_var2) {
                ke.ke_assert(assert_sentence, assert_mt, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                cdolist_list_var2 = cdolist_list_var2.rest();
                assert_sentence = cdolist_list_var2.first();
            }
        }
        finally {
            api_control_vars.$ke_purpose$.rebind(_prev_bind_2, thread);
            api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
        }
        return assert_sentences;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 204527L)
    public static SubLObject assert_applicable_preds_for_type(final SubLObject type, SubLObject score_limit, SubLObject task) {
        if (score_limit == cure_api.UNPROVIDED) {
            score_limit = (SubLObject)cure_api.$float761$0_001;
        }
        if (task == cure_api.UNPROVIDED) {
            task = cure_api.$const620$GeneralCycKETask_Allotment;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject assert_mt = (SubLObject)ConsesLow.list(cure_api.$const746$DocumentReaderFollowupsForTaskMtF, task);
        SubLObject assert_sentences = (SubLObject)cure_api.NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(cure_api.$const64$InferencePSC);
        SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            assert_sentences = Sequences.cconcatenate(assert_sentences, get_applicable_formula_generators_for_type(type, assert_mt, (SubLObject)cure_api.NIL, score_limit));
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
        _prev_bind_2 = api_control_vars.$ke_purpose$.currentBinding(thread);
        try {
            api_control_vars.$the_cyclist$.bind(cure_api.$const731$DaveS, thread);
            api_control_vars.$ke_purpose$.bind(cure_api.$const762$GeneralCycKE, thread);
            SubLObject cdolist_list_var = assert_sentences;
            SubLObject assert_sentence = (SubLObject)cure_api.NIL;
            assert_sentence = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                ke.ke_assert(assert_sentence, assert_mt, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                cdolist_list_var = cdolist_list_var.rest();
                assert_sentence = cdolist_list_var.first();
            }
        }
        finally {
            api_control_vars.$ke_purpose$.rebind(_prev_bind_2, thread);
            api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
        }
        return assert_sentences;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 205215L)
    public static SubLObject get_applicable_formula_generators_for_type(final SubLObject type, final SubLObject assert_mt, SubLObject soon_to_add, SubLObject score_limit) {
        if (soon_to_add == cure_api.UNPROVIDED) {
            soon_to_add = (SubLObject)cure_api.NIL;
        }
        if (score_limit == cure_api.UNPROVIDED) {
            score_limit = (SubLObject)cure_api.$float761$0_001;
        }
        SubLObject assert_sentences = (SubLObject)cure_api.NIL;
        final SubLObject preds_and_scores = preds_w_scores_for_type_from_rules(type, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject search_constraint = (SubLObject)ConsesLow.cons(type, assert_mt);
        final SubLObject asserted_search_results = cae_query_search.lookup_isa_queries(search_constraint, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject known_preds = Mapping.mapcar((SubLObject)cure_api.$sym763$CAAR, asserted_search_results);
        SubLObject cdolist_list_var = preds_and_scores;
        SubLObject pred_and_score = (SubLObject)cure_api.NIL;
        pred_and_score = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = pred_and_score;
            SubLObject pred = (SubLObject)cure_api.NIL;
            SubLObject score = (SubLObject)cure_api.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list745);
            pred = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list745);
            score = current.first();
            current = current.rest();
            if (cure_api.NIL == current) {
                if (!score.numL(score_limit) && cure_api.NIL == subl_promotions.memberP(pred, known_preds, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.UNPROVIDED) && (cure_api.NIL == soon_to_add || cure_api.NIL == list_utilities.lengthG(genls.all_genls_among(type, dictionary.dictionary_lookup(soon_to_add, pred, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)cure_api.ZERO_INTEGER, (SubLObject)cure_api.UNPROVIDED))) {
                    if (cure_api.NIL != soon_to_add) {
                        dictionary_utilities.dictionary_push(soon_to_add, pred, type);
                    }
                    assert_sentences = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(cure_api.$const764$generateFormulasForElements_TermI, type, (SubLObject)ConsesLow.list(cure_api.$const765$TheSet, pred)), assert_sentences);
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list745);
            }
            cdolist_list_var = cdolist_list_var.rest();
            pred_and_score = cdolist_list_var.first();
        }
        return assert_sentences;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 206130L)
    public static SubLObject new_term_learner_justifications(final SubLObject string, final SubLObject context_string, final SubLObject tool, SubLObject v_sources, SubLObject assert_mt) {
        if (v_sources == cure_api.UNPROVIDED) {
            v_sources = (SubLObject)cure_api.NIL;
        }
        if (assert_mt == cure_api.UNPROVIDED) {
            assert_mt = (SubLObject)cure_api.NIL;
        }
        if (cure_api.NIL == v_sources) {
            return (SubLObject)ConsesLow.list(new_term_learner_justification(string, context_string, tool, v_sources, assert_mt));
        }
        SubLObject result = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = v_sources;
        SubLObject source = (SubLObject)cure_api.NIL;
        source = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            result = (SubLObject)ConsesLow.cons(new_term_learner_justification(string, context_string, tool, source, assert_mt), result);
            cdolist_list_var = cdolist_list_var.rest();
            source = cdolist_list_var.first();
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 206698L)
    public static SubLObject new_term_learner_justification(final SubLObject string, final SubLObject context_string, final SubLObject tool, SubLObject source, SubLObject assert_mt) {
        if (source == cure_api.UNPROVIDED) {
            source = (SubLObject)cure_api.NIL;
        }
        if (assert_mt == cure_api.UNPROVIDED) {
            assert_mt = (SubLObject)cure_api.NIL;
        }
        SubLObject just = (SubLObject)ConsesLow.list((SubLObject)cure_api.$kw67$STRING, unicode_nauts.convert_unicode_nauts_to_utf8_strings(string), (SubLObject)cure_api.$kw121$LEGEND_STRING, unicode_nauts.convert_unicode_nauts_to_utf8_strings(string), (SubLObject)cure_api.$kw766$CONTEXT_STRING, unicode_nauts.convert_unicode_nauts_to_utf8_strings(context_string), (SubLObject)cure_api.$kw544$TOOL, tool);
        if (cure_api.NIL != assert_mt) {
            just = conses_high.putf(just, (SubLObject)cure_api.$kw95$ASSERT_MT, assert_mt);
        }
        if (cure_api.NIL != source) {
            just = conses_high.putf(just, (SubLObject)cure_api.$kw767$SOURCE, source);
        }
        return just;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 207181L)
    public static SubLObject term_learner_justification_p(final SubLObject just) {
        return list_utilities.property_list_p(just);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 207266L)
    public static SubLObject term_learner_justification_string(final SubLObject just) {
        return conses_high.getf(just, (SubLObject)cure_api.$kw67$STRING, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 207353L)
    public static SubLObject term_learner_justification_context_string(final SubLObject just) {
        return conses_high.getf(just, (SubLObject)cure_api.$kw766$CONTEXT_STRING, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 207456L)
    public static SubLObject term_learner_justification_tool(final SubLObject just) {
        return conses_high.getf(just, (SubLObject)cure_api.$kw544$TOOL, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 207539L)
    public static SubLObject term_learner_justification_source(final SubLObject just) {
        return conses_high.getf(just, (SubLObject)cure_api.$kw767$SOURCE, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 207626L)
    public static SubLObject term_learner_justification_assert_mt(final SubLObject just) {
        final SubLObject mt_id = conses_high.getf(just, (SubLObject)cure_api.$kw95$ASSERT_MT, (SubLObject)cure_api.UNPROVIDED);
        if (cure_api.NIL != mt_id) {
            return document_annotation_widgets.term_learner_object_from_id(mt_id);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 207802L)
    public static SubLObject get_context_sentences_from_justifications(final SubLObject justifications) {
        SubLObject context_sentences = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = justifications;
        SubLObject justification = (SubLObject)cure_api.NIL;
        justification = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.NIL != term_learner_justification_context_string(justification)) {
                final SubLObject item_var = term_learner_justification_context_string(justification);
                if (cure_api.NIL == conses_high.member(item_var, context_sentences, (SubLObject)cure_api.EQUAL, Symbols.symbol_function((SubLObject)cure_api.IDENTITY))) {
                    context_sentences = (SubLObject)ConsesLow.cons(item_var, context_sentences);
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            justification = cdolist_list_var.first();
        }
        return context_sentences;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 208150L)
    public static SubLObject restart_concept_search_demo_server(final SubLObject host_name, final SubLObject port_num) {
        os_process_utilities.make_os_process((SubLObject)cure_api.$str769$Restarting_CCF_Demo_Cyc_Server, (SubLObject)cure_api.$str770$_cyc_java_pkg_WebServicesTester_b, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 208489L)
    public static SubLObject string_likely_denotes_collectionP(final SubLObject string, SubLObject doc) {
        if (doc == cure_api.UNPROVIDED) {
            doc = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject doc_string = string;
        SubLObject type_keyword = (SubLObject)cure_api.NIL;
        SubLObject timed_out = (SubLObject)cure_api.NIL;
        final SubLObject tag = subl_macro_promotions.with_timeout_make_tag();
        try {
            thread.throwStack.push(tag);
            final SubLObject _prev_bind_0 = subl_macro_promotions.$within_with_timeout$.currentBinding(thread);
            try {
                subl_macro_promotions.$within_with_timeout$.bind((SubLObject)cure_api.T, thread);
                SubLObject timer = (SubLObject)cure_api.NIL;
                try {
                    final SubLObject _prev_bind_0_$248 = subl_macro_promotions.$with_timeout_nesting_depth$.currentBinding(thread);
                    try {
                        subl_macro_promotions.$with_timeout_nesting_depth$.bind(Numbers.add((SubLObject)cure_api.ONE_INTEGER, subl_macro_promotions.$with_timeout_nesting_depth$.getDynamicValue(thread)), thread);
                        timer = subl_macro_promotions.with_timeout_start_timer((SubLObject)cure_api.FOUR_INTEGER, tag);
                        type_keyword = string_typing.type_string(string);
                    }
                    finally {
                        subl_macro_promotions.$with_timeout_nesting_depth$.rebind(_prev_bind_0_$248, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$249 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        subl_macro_promotions.with_timeout_stop_timer(timer);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$249, thread);
                    }
                }
            }
            finally {
                subl_macro_promotions.$within_with_timeout$.rebind(_prev_bind_0, thread);
            }
        }
        catch (Throwable ccatch_env_var) {
            timed_out = Errors.handleThrowable(ccatch_env_var, tag);
        }
        finally {
            thread.throwStack.pop();
        }
        SubLObject ignore_errors_tag = (SubLObject)cure_api.NIL;
        try {
            thread.throwStack.push(cure_api.$kw40$IGNORE_ERRORS_TARGET);
            final SubLObject _prev_bind_2 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cure_api.$sym41$IGNORE_ERRORS_HANDLER), thread);
                try {
                    if (cure_api.NIL != doc) {
                        doc_string = (doc.isString() ? doc : document.document_string(doc));
                    }
                }
                catch (Throwable catch_var) {
                    Errors.handleThrowable(catch_var, (SubLObject)cure_api.NIL);
                }
            }
            finally {
                Errors.$error_handler$.rebind(_prev_bind_2, thread);
            }
        }
        catch (Throwable ccatch_env_var2) {
            ignore_errors_tag = Errors.handleThrowable(ccatch_env_var2, (SubLObject)cure_api.$kw40$IGNORE_ERRORS_TARGET);
        }
        finally {
            thread.throwStack.pop();
        }
        final SubLObject pcase_var = type_keyword;
        if (pcase_var.eql((SubLObject)cure_api.$kw771$COLLECTION)) {
            return (SubLObject)cure_api.T;
        }
        if (pcase_var.eql((SubLObject)cure_api.$kw772$INDIVIDUAL)) {
            return (SubLObject)cure_api.NIL;
        }
        return (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == string_utilities.starts_with_one_of(string, (SubLObject)cure_api.$list773) && cure_api.NIL == named_entity_recognizer.named_entityP(doc_string, string) && cure_api.NIL != collection_via_web_searchP(string));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 209392L)
    public static SubLObject clear_collection_via_web_searchP() {
        final SubLObject cs = cure_api.$collection_via_web_searchP_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 209392L)
    public static SubLObject remove_collection_via_web_searchP(final SubLObject string) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$collection_via_web_searchP_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(string), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 209392L)
    public static SubLObject collection_via_web_searchP_internal(final SubLObject string) {
        final SubLObject plural_to_singular_collection_cutoff = (SubLObject)cure_api.$float775$0_01;
        final SubLObject count_to_mass_collection_cutoff = (SubLObject)cure_api.$float776$0_1;
        if (plural_to_singular_ratio(string, (SubLObject)cure_api.UNPROVIDED).numG(plural_to_singular_collection_cutoff)) {
            return (SubLObject)cure_api.T;
        }
        if (count_to_mass_ratio(string, (SubLObject)cure_api.UNPROVIDED).numG(count_to_mass_collection_cutoff)) {
            return (SubLObject)cure_api.T;
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 209392L)
    public static SubLObject collection_via_web_searchP(final SubLObject string) {
        SubLObject caching_state = cure_api.$collection_via_web_searchP_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym774$COLLECTION_VIA_WEB_SEARCH_, (SubLObject)cure_api.$sym777$_COLLECTION_VIA_WEB_SEARCH__CACHING_STATE_, (SubLObject)cure_api.$int778$50, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, string, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(collection_via_web_searchP_internal(string)));
            memoization_state.caching_state_put(caching_state, string, results, (SubLObject)cure_api.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 215118L)
    public static SubLObject plural_to_singular_ratio(final SubLObject string, SubLObject count_method) {
        if (count_method == cure_api.UNPROVIDED) {
            count_method = (SubLObject)cure_api.$sym779$YAHOO_COUNT_CACHED;
        }
        final SubLObject plural_string = (cure_api.NIL != morphology.plural_nounP(string)) ? string : morphology.pluralize_string(string, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject singular_string = morphology.singularize_string(string, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject plural_count = Functions.funcall(count_method, format_nil.format_nil_s(plural_string));
        final SubLObject singular_count = Functions.funcall(count_method, format_nil.format_nil_s(singular_string));
        if (singular_count.numE((SubLObject)cure_api.ZERO_INTEGER)) {
            return Values.values((SubLObject)cure_api.ZERO_INTEGER, plural_count, singular_count);
        }
        return Values.values(Numbers.divide(plural_count, singular_count), plural_count, singular_count);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 215668L)
    public static SubLObject count_to_mass_ratio(final SubLObject string, SubLObject count_method) {
        if (count_method == cure_api.UNPROVIDED) {
            count_method = (SubLObject)cure_api.$sym779$YAHOO_COUNT_CACHED;
        }
        final SubLObject plural_string = (cure_api.NIL != morphology.plural_nounP(string)) ? string : morphology.pluralize_string(string, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject singular_string = morphology.singularize_string(string, (SubLObject)cure_api.UNPROVIDED);
        final SubLObject mass_count = Functions.funcall(count_method, Sequences.cconcatenate((SubLObject)cure_api.$str780$_much_, new SubLObject[] { singular_string, cure_api.$str781$_ }));
        final SubLObject count_count = Functions.funcall(count_method, Sequences.cconcatenate((SubLObject)cure_api.$str782$_many_, new SubLObject[] { plural_string, cure_api.$str781$_ }));
        if (mass_count.numE((SubLObject)cure_api.ZERO_INTEGER)) {
            return Values.values((SubLObject)cure_api.ZERO_INTEGER, count_count, mass_count);
        }
        return Values.values(Numbers.divide(count_count, mass_count), count_count, mass_count);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 216218L)
    public static SubLObject clear_get_concept_tags_from_string() {
        final SubLObject cs = cure_api.$get_concept_tags_from_string_caching_state$.getGlobalValue();
        if (cure_api.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 216218L)
    public static SubLObject remove_get_concept_tags_from_string(final SubLObject text) {
        return memoization_state.caching_state_remove_function_results_with_args(cure_api.$get_concept_tags_from_string_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(text), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 216218L)
    public static SubLObject get_concept_tags_from_string_internal(final SubLObject text) {
        SubLObject concept_tags = (SubLObject)cure_api.NIL;
        final SubLObject lexicon = document_annotation_widgets.get_default_document_ingester_annotation_lexicon((SubLObject)cure_api.UNPROVIDED);
        final SubLObject vector_var = document.document_paragraphs(document_annotation_widgets.new_tagged_document(text, lexicon, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
        final SubLObject backwardP_var = (SubLObject)cure_api.NIL;
        SubLObject length;
        SubLObject v_iteration;
        SubLObject element_num;
        SubLObject par;
        SubLObject par_concept_tags;
        SubLObject vector_var_$250;
        SubLObject backwardP_var_$251;
        SubLObject length_$252;
        SubLObject v_iteration_$253;
        SubLObject element_num_$254;
        SubLObject sentence;
        SubLObject cdolist_list_var;
        SubLObject word;
        SubLObject cdolist_list_var_$255;
        SubLObject word_cycl;
        for (length = Sequences.length(vector_var), v_iteration = (SubLObject)cure_api.NIL, v_iteration = (SubLObject)cure_api.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)cure_api.ONE_INTEGER)) {
            element_num = ((cure_api.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)cure_api.ONE_INTEGER) : v_iteration);
            par = Vectors.aref(vector_var, element_num);
            par_concept_tags = (SubLObject)cure_api.NIL;
            vector_var_$250 = document.paragraph_sentences(par);
            backwardP_var_$251 = (SubLObject)cure_api.NIL;
            for (length_$252 = Sequences.length(vector_var_$250), v_iteration_$253 = (SubLObject)cure_api.NIL, v_iteration_$253 = (SubLObject)cure_api.ZERO_INTEGER; v_iteration_$253.numL(length_$252); v_iteration_$253 = Numbers.add(v_iteration_$253, (SubLObject)cure_api.ONE_INTEGER)) {
                element_num_$254 = ((cure_api.NIL != backwardP_var_$251) ? Numbers.subtract(length_$252, v_iteration_$253, (SubLObject)cure_api.ONE_INTEGER) : v_iteration_$253);
                sentence = Vectors.aref(vector_var_$250, element_num_$254);
                cdolist_list_var = document.sentence_yield_exhaustive(sentence);
                word = (SubLObject)cure_api.NIL;
                word = cdolist_list_var.first();
                while (cure_api.NIL != cdolist_list_var) {
                    cdolist_list_var_$255 = document.word_cycls(word);
                    word_cycl = (SubLObject)cure_api.NIL;
                    word_cycl = cdolist_list_var_$255.first();
                    while (cure_api.NIL != cdolist_list_var_$255) {
                        par_concept_tags = (SubLObject)ConsesLow.cons(make_concept_tag(word_cycl, document.word_offset(word), document.word_length(word), document.word_string(word)), par_concept_tags);
                        cdolist_list_var_$255 = cdolist_list_var_$255.rest();
                        word_cycl = cdolist_list_var_$255.first();
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    word = cdolist_list_var.first();
                }
            }
            concept_tags = (SubLObject)ConsesLow.cons(par_concept_tags, concept_tags);
        }
        return concept_tags;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 216218L)
    public static SubLObject get_concept_tags_from_string(final SubLObject text) {
        SubLObject caching_state = cure_api.$get_concept_tags_from_string_caching_state$.getGlobalValue();
        if (cure_api.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)cure_api.$sym783$GET_CONCEPT_TAGS_FROM_STRING, (SubLObject)cure_api.$sym784$_GET_CONCEPT_TAGS_FROM_STRING_CACHING_STATE_, (SubLObject)cure_api.$int364$1024, (SubLObject)cure_api.EQUAL, (SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)cure_api.$sym785$CLEAR_GET_CONCEPT_TAGS_FROM_STRING);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, text, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_concept_tags_from_string_internal(text)));
            memoization_state.caching_state_put(caching_state, text, results, (SubLObject)cure_api.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 217119L)
    public static SubLObject find_fillers_in_text(final SubLObject cycl_sentences, final SubLObject var_lists, final SubLObject text, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        SubLObject results = (SubLObject)cure_api.NIL;
        final SubLObject concept_tags_by_par = get_concept_tags_from_string(text);
        SubLObject cycl_sentence = (SubLObject)cure_api.NIL;
        SubLObject cycl_sentence_$256 = (SubLObject)cure_api.NIL;
        SubLObject var_list = (SubLObject)cure_api.NIL;
        SubLObject var_list_$257 = (SubLObject)cure_api.NIL;
        cycl_sentence = cycl_sentences;
        cycl_sentence_$256 = cycl_sentence.first();
        var_list = var_lists;
        var_list_$257 = var_list.first();
        while (cure_api.NIL != var_list || cure_api.NIL != cycl_sentence) {
            SubLObject cdolist_list_var = concept_tags_by_par;
            SubLObject concept_tags = (SubLObject)cure_api.NIL;
            concept_tags = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                final SubLObject tags_in_formula = find_formula_args_among_concept_tags(cycl_sentence_$256, concept_tags, (SubLObject)cure_api.UNPROVIDED);
                if (cure_api.NIL != tags_in_formula) {
                    final SubLObject filler_sets = fillers_from_concept_tags_multiple(cycl_sentence_$256, var_list_$257, concept_tags, tags_in_formula, mt, (SubLObject)cure_api.UNPROVIDED);
                    results = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(cycl_sentence_$256, var_list_$257, filler_sets), results);
                }
                cdolist_list_var = cdolist_list_var.rest();
                concept_tags = cdolist_list_var.first();
            }
            cycl_sentence = cycl_sentence.rest();
            cycl_sentence_$256 = cycl_sentence.first();
            var_list = var_list.rest();
            var_list_$257 = var_list.first();
        }
        return results;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 218170L)
    public static SubLObject fillers_from_concept_tags_multiple(final SubLObject cycl_sentence, final SubLObject var_list, final SubLObject concept_tags, final SubLObject tags_in_formula, SubLObject mt, SubLObject use_cutoffP) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        if (use_cutoffP == cure_api.UNPROVIDED) {
            use_cutoffP = (SubLObject)cure_api.NIL;
        }
        SubLObject lists = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = var_list;
        SubLObject var = (SubLObject)cure_api.NIL;
        var = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            lists = (SubLObject)ConsesLow.cons(fillers_from_concept_tags(cycl_sentence, var, concept_tags, tags_in_formula, mt, use_cutoffP), lists);
            cdolist_list_var = cdolist_list_var.rest();
            var = cdolist_list_var.first();
        }
        return list_utilities.cartesian_product(lists, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 219143L)
    public static SubLObject fillers_from_concept_tags(final SubLObject cycl_sentence, final SubLObject var, final SubLObject concept_tags, final SubLObject tags_in_formula, SubLObject mt, SubLObject use_cutoffP) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        if (use_cutoffP == cure_api.UNPROVIDED) {
            use_cutoffP = (SubLObject)cure_api.NIL;
        }
        final SubLObject candidate_tags = tags_satisfying_arg_constraints(cycl_sentence, var, concept_tags, mt);
        SubLObject scored_fillers = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = candidate_tags;
        SubLObject tag = (SubLObject)cure_api.NIL;
        tag = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            final SubLObject score = score_tag(tag, tags_in_formula);
            final SubLObject cycl = get_concept_tag_cycl(tag);
            if (!score.eql((SubLObject)cure_api.ZERO_INTEGER)) {
                scored_fillers = (SubLObject)ConsesLow.cons(make_filler((SubLObject)ConsesLow.cons(var, cycl), tag, score), scored_fillers);
            }
            cdolist_list_var = cdolist_list_var.rest();
            tag = cdolist_list_var.first();
        }
        if (cure_api.NIL != use_cutoffP && cure_api.NIL != scored_fillers) {
            final SubLObject cutoff = number_utilities.mean(Mapping.mapcar(Symbols.symbol_function((SubLObject)cure_api.$sym786$GET_FILLER_SCORE), scored_fillers));
            SubLObject fillers = (SubLObject)cure_api.NIL;
            SubLObject cdolist_list_var2 = scored_fillers;
            SubLObject filler = (SubLObject)cure_api.NIL;
            filler = cdolist_list_var2.first();
            while (cure_api.NIL != cdolist_list_var2) {
                final SubLObject score2 = get_filler_score(filler);
                if (score2.numGE(cutoff)) {
                    fillers = (SubLObject)ConsesLow.cons(filler, fillers);
                }
                cdolist_list_var2 = cdolist_list_var2.rest();
                filler = cdolist_list_var2.first();
            }
            return fillers;
        }
        return scored_fillers;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 220148L)
    public static SubLObject find_formula_args_among_concept_tags(final SubLObject cycl_sentence, final SubLObject concept_tags, SubLObject first_only) {
        if (first_only == cure_api.UNPROVIDED) {
            first_only = (SubLObject)cure_api.NIL;
        }
        SubLObject tags_in_formula = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var;
        final SubLObject args = cdolist_list_var = cycl_utilities.formula_args(cycl_sentence, (SubLObject)cure_api.$kw493$IGNORE);
        SubLObject v_term = (SubLObject)cure_api.NIL;
        v_term = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject cdolist_list_var_$258 = concept_tags;
            SubLObject tag = (SubLObject)cure_api.NIL;
            tag = cdolist_list_var_$258.first();
            while (cure_api.NIL != cdolist_list_var_$258) {
                final SubLObject concept = get_concept_tag_cycl(tag);
                if (concept.equal(v_term)) {
                    if (cure_api.NIL != first_only) {
                        return (SubLObject)ConsesLow.list(tag);
                    }
                    tags_in_formula = (SubLObject)ConsesLow.cons(tag, tags_in_formula);
                }
                cdolist_list_var_$258 = cdolist_list_var_$258.rest();
                tag = cdolist_list_var_$258.first();
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_term = cdolist_list_var.first();
        }
        return tags_in_formula;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 220631L)
    public static SubLObject score_tag(final SubLObject tag, final SubLObject tags_in_formula) {
        return Numbers.minus(minimum_tag_distance(tag, tags_in_formula));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 220736L)
    public static SubLObject minimum_tag_distance(final SubLObject tag, final SubLObject concept_tags) {
        SubLObject min_distance = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = concept_tags;
        SubLObject other_tag = (SubLObject)cure_api.NIL;
        other_tag = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            final SubLObject distance = tag_distance(tag, other_tag);
            if (cure_api.NIL == min_distance) {
                min_distance = distance;
            }
            else if (distance.numL(min_distance)) {
                min_distance = distance;
            }
            cdolist_list_var = cdolist_list_var.rest();
            other_tag = cdolist_list_var.first();
        }
        return min_distance;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 221082L)
    public static SubLObject tag_distance(final SubLObject tag1, final SubLObject tag2) {
        final SubLObject tag1offset = get_concept_tag_offset(tag1);
        final SubLObject tag2offset = get_concept_tag_offset(tag2);
        final SubLObject diff = Numbers.subtract(tag1offset, tag2offset);
        return Numbers.abs(diff);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 221360L)
    public static SubLObject tags_satisfying_arg_constraints(final SubLObject cycl_sentence, final SubLObject var, final SubLObject concept_tags, SubLObject mt) {
        if (mt == cure_api.UNPROVIDED) {
            mt = cure_api.$const64$InferencePSC;
        }
        SubLObject result_tags = (SubLObject)cure_api.NIL;
        final SubLObject arg_constraints = html_complete.get_arg_constraints_for_var(cycl_sentence, var, mt);
        final SubLObject isa_filter = html_complete.get_isa_filter_from_arg_constraints(arg_constraints);
        final SubLObject genls_filter = html_complete.get_genls_filter_from_arg_constraints(arg_constraints);
        if (cure_api.NIL != arg_constraints) {
            SubLObject cdolist_list_var = concept_tags;
            SubLObject tag = (SubLObject)cure_api.NIL;
            tag = cdolist_list_var.first();
            while (cure_api.NIL != cdolist_list_var) {
                final SubLObject concept = get_concept_tag_cycl(tag);
                if (cure_api.NIL != html_complete.term_passes_arg_filters(concept, isa_filter, genls_filter, mt)) {
                    result_tags = (SubLObject)ConsesLow.cons(tag, result_tags);
                }
                cdolist_list_var = cdolist_list_var.rest();
                tag = cdolist_list_var.first();
            }
        }
        return result_tags;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 222104L)
    public static SubLObject make_concept_tag(final SubLObject concept, final SubLObject offset, final SubLObject length, final SubLObject nl) {
        return (SubLObject)ConsesLow.list(concept, offset, length, nl);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 222349L)
    public static SubLObject get_concept_tag_cycl(final SubLObject concept_tag) {
        return concept_tag.first();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 222430L)
    public static SubLObject get_concept_tag_offset(final SubLObject concept_tag) {
        return conses_high.second(concept_tag);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 222514L)
    public static SubLObject get_concept_tag_length(final SubLObject concept_tag) {
        return conses_high.second(concept_tag);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 222598L)
    public static SubLObject get_concept_tag_nl(final SubLObject concept_tag) {
        return conses_high.third(concept_tag);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 222677L)
    public static SubLObject concept_tag_p(final SubLObject thing) {
        return (SubLObject)SubLObjectFactory.makeBoolean(thing.isList() && (cure_api.NIL == thing || (cure_api.NIL != cycl_grammar.cycl_expression_p(get_concept_tag_cycl(thing)) && get_concept_tag_offset(thing).isNumber() && get_concept_tag_length(thing).isNumber() && get_concept_tag_nl(thing).isString())));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 222961L)
    public static SubLObject find_sentence_fillers(final SubLObject strings, final SubLObject sentence_ids, final SubLObject arg_pos_list, SubLObject user) {
        if (user == cure_api.UNPROVIDED) {
            user = api_control_vars.$the_cyclist$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cure_api.NIL != document_annotation_widgets.$trace_doc_search_interface$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$trace_output$.getDynamicValue(thread), (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym787$FIND_SENTENCE_FILLERS, strings, sentence_ids, arg_pos_list, user));
        }
        if (cure_api.NIL != document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread)) {
            SubLObject stream = (SubLObject)cure_api.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)cure_api.NIL, thread);
                    stream = compatibility.open_text(document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread), (SubLObject)cure_api.$kw30$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)cure_api.$str31$Unable_to_open__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                }
                final SubLObject out = stream;
                Errors.warn((SubLObject)cure_api.$str32$writing_to__S, document_annotation_widgets.$doc_search_trace_log_file$.getDynamicValue(thread));
                PrintLow.format(out, (SubLObject)cure_api.$str29$___A__entering__S__, numeric_date_utilities.timestamp_with_milliseconds((SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), (SubLObject)ConsesLow.list((SubLObject)cure_api.$sym787$FIND_SENTENCE_FILLERS, strings, sentence_ids, arg_pos_list, user));
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cure_api.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)cure_api.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        final SubLObject string = unicode_strings.display_to_subl_string((cure_api.NIL != unicode_nauts.unicode_naut_p(conses_high.caar(strings), (SubLObject)cure_api.UNPROVIDED)) ? cycl_utilities.formula_arg1(conses_high.caar(strings), (SubLObject)cure_api.UNPROVIDED) : conses_high.caar(strings), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
        thread.resetMultipleValues();
        final SubLObject sentences = reformat_sentences_and_vars(sentence_ids, arg_pos_list);
        final SubLObject var_lists = thread.secondMultipleValue();
        thread.resetMultipleValues();
        final SubLObject task = default_task_for_user(user);
        final SubLObject mt = followup_query_mt_for_userXtask(user, task);
        final SubLObject filler_results = find_fillers_in_text(sentences, var_lists, string, mt);
        SubLObject types = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = filler_results;
        SubLObject filler_result = (SubLObject)cure_api.NIL;
        filler_result = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = filler_result;
            SubLObject sentence = (SubLObject)cure_api.NIL;
            SubLObject vars = (SubLObject)cure_api.NIL;
            SubLObject answer_sets = (SubLObject)cure_api.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list788);
            sentence = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list788);
            vars = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list788);
            answer_sets = current.first();
            current = current.rest();
            if (cure_api.NIL == current) {
                SubLObject cdolist_list_var_$259 = construct_sentences_from_template_and_bindings(sentence, vars, answer_sets);
                SubLObject cycl = (SubLObject)cure_api.NIL;
                cycl = cdolist_list_var_$259.first();
                while (cure_api.NIL != cdolist_list_var_$259) {
                    if (cure_api.NIL == term_learner_knownP(cycl, mt)) {
                        types = (SubLObject)ConsesLow.cons(term_learner_type_for_fragment_int(cycl, mt, (SubLObject)cure_api.$list789, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.$kw20$DEFAULT, (SubLObject)cure_api.NIL, cure_default_generation_mt((SubLObject)cure_api.UNPROVIDED), cure_api.$needs_approval$.getGlobalValue(), (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), types);
                    }
                    cdolist_list_var_$259 = cdolist_list_var_$259.rest();
                    cycl = cdolist_list_var_$259.first();
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cure_api.$list788);
            }
            cdolist_list_var = cdolist_list_var.rest();
            filler_result = cdolist_list_var.first();
        }
        return types;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 224188L)
    public static SubLObject reformat_sentences_and_vars(final SubLObject sentence_ids, final SubLObject arg_pos_lists) {
        final SubLObject ordered_sentence_ids = Sort.sort(sentence_ids, (SubLObject)cure_api.$sym77$_, (SubLObject)cure_api.$sym734$SECOND);
        final SubLObject ordered_arg_poses = Sort.sort(arg_pos_lists, (SubLObject)cure_api.$sym77$_, (SubLObject)cure_api.$sym734$SECOND);
        SubLObject result_alist = (SubLObject)cure_api.NIL;
        SubLObject sentences = (SubLObject)cure_api.NIL;
        SubLObject var_lists = (SubLObject)cure_api.NIL;
        SubLObject sentence_id = (SubLObject)cure_api.NIL;
        SubLObject sentence_id_$260 = (SubLObject)cure_api.NIL;
        SubLObject arg_pos_with_index = (SubLObject)cure_api.NIL;
        SubLObject arg_pos_with_index_$261 = (SubLObject)cure_api.NIL;
        sentence_id = ordered_sentence_ids;
        sentence_id_$260 = sentence_id.first();
        arg_pos_with_index = ordered_arg_poses;
        arg_pos_with_index_$261 = arg_pos_with_index.first();
        while (cure_api.NIL != arg_pos_with_index || cure_api.NIL != sentence_id) {
            final SubLObject sentence = document_annotation_widgets.term_learner_object_from_id(sentence_id_$260.first());
            final SubLObject arg_pos = reader.read_from_string_ignoring_errors(arg_pos_with_index_$261.first(), (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
            final SubLObject var = cycl_utilities.formula_arg_position(sentence, arg_pos, (SubLObject)cure_api.UNPROVIDED);
            result_alist = list_utilities.alist_push(result_alist, sentence, var, (SubLObject)cure_api.EQUAL);
            sentence_id = sentence_id.rest();
            sentence_id_$260 = sentence_id.first();
            arg_pos_with_index = arg_pos_with_index.rest();
            arg_pos_with_index_$261 = arg_pos_with_index.first();
        }
        SubLObject cdolist_list_var = result_alist;
        SubLObject cons = (SubLObject)cure_api.NIL;
        cons = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = cons;
            SubLObject cycl_sentence = (SubLObject)cure_api.NIL;
            SubLObject var_list = (SubLObject)cure_api.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cure_api.$list790);
            cycl_sentence = current.first();
            current = (var_list = current.rest());
            sentences = (SubLObject)ConsesLow.cons(cycl_sentence, sentences);
            var_lists = (SubLObject)ConsesLow.cons(var_list, var_lists);
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        return Values.values(sentences, var_lists);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 225524L)
    public static SubLObject construct_sentences_from_template_and_bindings(final SubLObject sentence, final SubLObject vars, final SubLObject answer_sets) {
        SubLObject result_sentences = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = answer_sets;
        SubLObject answer_set = (SubLObject)cure_api.NIL;
        answer_set = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject temp_sentence = sentence;
            SubLObject cdolist_list_var_$262 = answer_set;
            SubLObject v_answer = (SubLObject)cure_api.NIL;
            v_answer = cdolist_list_var_$262.first();
            while (cure_api.NIL != cdolist_list_var_$262) {
                temp_sentence = cycl_utilities.expression_subst(get_filler_cycl(v_answer), get_filler_var(v_answer), temp_sentence, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
                cdolist_list_var_$262 = cdolist_list_var_$262.rest();
                v_answer = cdolist_list_var_$262.first();
            }
            result_sentences = (SubLObject)ConsesLow.cons(temp_sentence, result_sentences);
            cdolist_list_var = cdolist_list_var.rest();
            answer_set = cdolist_list_var.first();
        }
        return result_sentences;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 225947L)
    public static SubLObject make_filler(final SubLObject var_binding, final SubLObject concept_tag, final SubLObject score) {
        return (SubLObject)ConsesLow.list(var_binding, concept_tag, score);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 226224L)
    public static SubLObject get_filler_var_binding(final SubLObject filler) {
        return filler.first();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 226297L)
    public static SubLObject get_filler_tag(final SubLObject filler) {
        return conses_high.second(filler);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 226363L)
    public static SubLObject get_filler_score(final SubLObject filler) {
        return conses_high.third(filler);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 226430L)
    public static SubLObject get_filler_cycl(final SubLObject filler) {
        return get_filler_var_binding(filler).rest();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 226562L)
    public static SubLObject get_filler_var(final SubLObject filler) {
        return get_filler_var_binding(filler).first();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 226650L)
    public static SubLObject filler_p(final SubLObject thing) {
        return (SubLObject)SubLObjectFactory.makeBoolean(thing.isList() && (cure_api.NIL == thing || (get_filler_var_binding(thing).isCons() && cure_api.NIL != concept_tag_p(get_filler_tag(thing)) && (get_filler_score(thing).isNumber() || cure_api.NIL == get_filler_score(thing)))));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 226915L)
    public static SubLObject get_queries_for_term(final SubLObject v_term, final SubLObject user, SubLObject task) {
        if (task == cure_api.UNPROVIDED) {
            task = (SubLObject)cure_api.NIL;
        }
        final SubLObject user_task = (cure_api.NIL != task) ? task : default_task_for_user(user);
        final SubLObject followup_mt = followup_query_mt_for_userXtask(user, user_task);
        final SubLObject query_mt = query_mt_for_task(user_task);
        final SubLObject queries;
        final SubLObject raw_queries = queries = term_learner_unsorted_fragments_for_term(v_term, followup_mt, query_mt, (SubLObject)cure_api.NIL, (SubLObject)cure_api.T, (SubLObject)cure_api.NIL);
        return queries;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 227483L)
    public static SubLObject get_queries_from_sentences(final SubLObject sentences, final SubLObject user, SubLObject task) {
        if (task == cure_api.UNPROVIDED) {
            task = (SubLObject)cure_api.NIL;
        }
        final SubLObject user_task = (cure_api.NIL != task) ? task : default_task_for_user(user);
        final SubLObject domain_mt = query_mt_for_task(user_task);
        final SubLObject nl_mt = cure_default_generation_mt((SubLObject)cure_api.UNPROVIDED);
        SubLObject queries = (SubLObject)cure_api.NIL;
        SubLObject cdolist_list_var = sentences;
        SubLObject current_sentence = (SubLObject)cure_api.NIL;
        current_sentence = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            queries = (SubLObject)ConsesLow.cons(term_learner_type_for_fragment_int(current_sentence, domain_mt, current_sentence, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, (SubLObject)cure_api.NIL, nl_mt, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED), queries);
            cdolist_list_var = cdolist_list_var.rest();
            current_sentence = cdolist_list_var.first();
        }
        return Sequences.nreverse(queries);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 228012L)
    public static SubLObject term_learner_autocomplete_native_with_cycadministrator(final SubLObject prefix, SubLObject limit, SubLObject return_attrs, SubLObject sentence, SubLObject arg_pos, SubLObject case_sensitive, SubLObject constants) {
        if (limit == cure_api.UNPROVIDED) {
            limit = (SubLObject)cure_api.TWENTY_INTEGER;
        }
        if (return_attrs == cure_api.UNPROVIDED) {
            return_attrs = (SubLObject)cure_api.$str50$;
        }
        if (sentence == cure_api.UNPROVIDED) {
            sentence = (SubLObject)cure_api.NIL;
        }
        if (arg_pos == cure_api.UNPROVIDED) {
            arg_pos = (SubLObject)cure_api.ZERO_INTEGER;
        }
        if (case_sensitive == cure_api.UNPROVIDED) {
            case_sensitive = (SubLObject)cure_api.NIL;
        }
        if (constants == cure_api.UNPROVIDED) {
            constants = (SubLObject)cure_api.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
        try {
            api_control_vars.$the_cyclist$.bind(cure_api.$const338$CycAdministrator, thread);
            return term_learner_autocomplete_int(prefix, string_utilities.to_string(limit), return_attrs, kb_utilities.compact_hl_external_id_string(sentence), string_utilities.to_string(arg_pos), string_utilities.to_string(case_sensitive), string_utilities.to_string(constants), (SubLObject)cure_api.T);
        }
        finally {
            api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 228012L)
    public static SubLObject valid_hierarchical_candidates_p(final SubLObject obj, final SubLObject expected_truth) {
        SubLObject cdolist_list_var = obj;
        SubLObject arg_and_candidates = (SubLObject)cure_api.NIL;
        arg_and_candidates = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            if (cure_api.NIL == list_utilities.proper_list_p(arg_and_candidates) || cure_api.NIL == cycl_utilities.arg_position_p(arg_and_candidates.first())) {
                return (SubLObject)cure_api.NIL;
            }
            SubLObject cdolist_list_var_$263 = conses_high.second(arg_and_candidates);
            SubLObject candidate_hierarchy = (SubLObject)cure_api.NIL;
            candidate_hierarchy = cdolist_list_var_$263.first();
            while (cure_api.NIL != cdolist_list_var_$263) {
                if (cure_api.NIL == candidate_renderer_p(candidate_hierarchy.first())) {
                    return (SubLObject)cure_api.NIL;
                }
                cdolist_list_var_$263 = cdolist_list_var_$263.rest();
                candidate_hierarchy = cdolist_list_var_$263.first();
            }
            cdolist_list_var = cdolist_list_var.rest();
            arg_and_candidates = cdolist_list_var.first();
        }
        return (SubLObject)((cure_api.NIL != expected_truth) ? cure_api.T : cure_api.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 228012L)
    public static SubLObject candidate_renderer_p(final SubLObject obj) {
        return (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL != list_utilities.property_list_p(obj) && cure_api.NIL != conses_high.getf(obj, (SubLObject)cure_api.$kw67$STRING, (SubLObject)cure_api.UNPROVIDED) && cure_api.NIL != cycl_grammar.cycl_denotational_term_p(conses_high.getf(obj, (SubLObject)cure_api.$kw117$CYCL, (SubLObject)cure_api.UNPROVIDED)) && cure_api.NIL != conses_high.getf(obj, (SubLObject)cure_api.$kw161$CYCL_ID, (SubLObject)cure_api.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 228012L)
    public static SubLObject some_selection_renderer_has_string_p(final SubLObject fragments, final SubLObject desired_string) {
        SubLObject cdolist_list_var = fragments;
        SubLObject fragment = (SubLObject)cure_api.NIL;
        fragment = cdolist_list_var.first();
        while (cure_api.NIL != cdolist_list_var) {
            SubLObject cdolist_list_var_$264 = conses_high.getf(fragment, (SubLObject)cure_api.$kw7$RENDERERS, (SubLObject)cure_api.UNPROVIDED);
            SubLObject renderer = (SubLObject)cure_api.NIL;
            renderer = cdolist_list_var_$264.first();
            while (cure_api.NIL != cdolist_list_var_$264) {
                if (conses_high.getf(renderer, (SubLObject)cure_api.$kw134$RENDERER_TYPE, (SubLObject)cure_api.UNPROVIDED) == cure_api.$kw135$OPEN_SELECT_RENDERER) {
                    SubLObject cdolist_list_var_$265 = conses_high.getf(renderer, (SubLObject)cure_api.$kw137$SELECTION_RENDERERS, (SubLObject)cure_api.UNPROVIDED);
                    SubLObject selection_renderer = (SubLObject)cure_api.NIL;
                    selection_renderer = cdolist_list_var_$265.first();
                    while (cure_api.NIL != cdolist_list_var_$265) {
                        if (conses_high.getf(selection_renderer, (SubLObject)cure_api.$kw67$STRING, (SubLObject)cure_api.UNPROVIDED).equalp(desired_string)) {
                            return (SubLObject)cure_api.T;
                        }
                        cdolist_list_var_$265 = cdolist_list_var_$265.rest();
                        selection_renderer = cdolist_list_var_$265.first();
                    }
                }
                cdolist_list_var_$264 = cdolist_list_var_$264.rest();
                renderer = cdolist_list_var_$264.first();
            }
            cdolist_list_var = cdolist_list_var.rest();
            fragment = cdolist_list_var.first();
        }
        return (SubLObject)cure_api.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 228012L)
    public static SubLObject term_learner_types_for_sentence_id_test_fn(final SubLObject sentence, final SubLObject user, final SubLObject arg3, final SubLObject arg4, final SubLObject arg5, final SubLObject arg6) {
        return term_learner_types_for_sentence_id(kb_utilities.compact_hl_external_id_string(sentence), user, arg3, arg4, arg5, arg6);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 228012L)
    public static SubLObject term_learner_known_bindings_for_sentence_neg(final SubLObject arg1, final SubLObject arg2) {
        return term_learner_known_bindings_for_sentence(arg1, arg2, (SubLObject)cure_api.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 228012L)
    public static SubLObject bindings_dont_mention(final SubLObject v_bindings, final SubLObject unmentionable) {
        return (SubLObject)SubLObjectFactory.makeBoolean(cure_api.NIL == list_utilities.tree_find(unmentionable, v_bindings, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/cure-api.lisp", position = 228012L)
    public static SubLObject bindings_mention(final SubLObject v_bindings, final SubLObject unmentionable) {
        return list_utilities.tree_find(unmentionable, v_bindings, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED);
    }
    
    public static SubLObject declare_cure_api_file() {
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.cure_api", "new_term_learner_type", "NEW-TERM-LEARNER-TYPE");
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.cure_api", "term_learner_type_for_fragment_int_2", "TERM-LEARNER-TYPE-FOR-FRAGMENT-INT-2");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_known_meanings_for_string", "TERM-LEARNER-KNOWN-MEANINGS-FOR-STRING", 1, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_create_as_individualP", "TERM-LEARNER-CREATE-AS-INDIVIDUAL?", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_meanings_for_tagged_term", "TERM-LEARNER-MEANINGS-FOR-TAGGED-TERM", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "find_or_create_term_learner_stub_term", "FIND-OR-CREATE-TERM-LEARNER-STUB-TERM", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_stub_constantP", "TERM-LEARNER-STUB-CONSTANT?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "new_term_learner_term_meaning", "NEW-TERM-LEARNER-TERM-MEANING", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cure_remove_from_default_lexicon", "CURE-REMOVE-FROM-DEFAULT-LEXICON", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cure_remove_lex_entry_from_default_lexicon", "CURE-REMOVE-LEX-ENTRY-FROM-DEFAULT-LEXICON", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_ordered_types_for_tagged_term", "TERM-LEARNER-ORDERED-TYPES-FOR-TAGGED-TERM", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_taxonomic_renderers_for_term", "GET-TAXONOMIC-RENDERERS-FOR-TERM", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_min_genls", "TERM-LEARNER-MIN-GENLS", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_min_genls_int", "TERM-LEARNER-MIN-GENLS-INT", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_min_isa", "TERM-LEARNER-MIN-ISA", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_min_isa_int", "TERM-LEARNER-MIN-ISA-INT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_max_specs", "TERM-LEARNER-MAX-SPECS", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_max_specs_int", "TERM-LEARNER-MAX-SPECS-INT", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_max_instances", "TERM-LEARNER-MAX-INSTANCES", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_max_instances_int", "TERM-LEARNER-MAX-INSTANCES-INT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_asserts_for_formula", "TERM-LEARNER-ASSERTS-FOR-FORMULA", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "make_term_learner_justifications_from_asserts", "MAKE-TERM-LEARNER-JUSTIFICATIONS-FROM-ASSERTS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_lexical_types_for_tagged_term", "TERM-LEARNER-LEXICAL-TYPES-FOR-TAGGED-TERM", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_lexical_assertions_for_term", "TERM-LEARNER-LEXICAL-ASSERTIONS-FOR-TERM", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_ordered_types_for_term_in_document_string_merged_justifications", "TERM-LEARNER-ORDERED-TYPES-FOR-TERM-IN-DOCUMENT-STRING-MERGED-JUSTIFICATIONS", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_ordered_types_for_user_added_type", "TERM-LEARNER-ORDERED-TYPES-FOR-USER-ADDED-TYPE", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_isa_or_genls", "TERM-LEARNER-ISA-OR-GENLS", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_default_create_as_type", "CLEAR-DEFAULT-CREATE-AS-TYPE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_default_create_as_type", "REMOVE-DEFAULT-CREATE-AS-TYPE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "default_create_as_type_internal", "DEFAULT-CREATE-AS-TYPE-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "default_create_as_type", "DEFAULT-CREATE-AS-TYPE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "new_term_learner_type_int", "NEW-TERM-LEARNER-TYPE-INT", 7, 6, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "free_some_variables", "FREE-SOME-VARIABLES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_term_learner_renderer_for_cycl_string", "GET-TERM-LEARNER-RENDERER-FOR-CYCL-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_term_learner_renderer_for_cycl_id", "GET-TERM-LEARNER-RENDERER-FOR-CYCL-ID", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_term_learner_renderer_for_cycl", "GET-TERM-LEARNER-RENDERER-FOR-CYCL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_term_learner_string_renderer_for_cycl_string", "GET-TERM-LEARNER-STRING-RENDERER-FOR-CYCL-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_term_learner_string_renderer_for_cycl_id", "GET-TERM-LEARNER-STRING-RENDERER-FOR-CYCL-ID", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_term_learner_string_renderer_for_cycl", "GET-TERM-LEARNER-STRING-RENDERER-FOR-CYCL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_term_learner_string_renderer_from_open_select_renderer_list", "GET-TERM-LEARNER-STRING-RENDERER-FROM-OPEN-SELECT-RENDERER-LIST", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "new_term_learner_string_renderer", "NEW-TERM-LEARNER-STRING-RENDERER", 1, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "new_term_learner_modifiable_string_renderer", "NEW-TERM-LEARNER-MODIFIABLE-STRING-RENDERER", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "new_term_learner_modifiable_text_renderer", "NEW-TERM-LEARNER-MODIFIABLE-TEXT-RENDERER", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "new_term_learner_open_select_renderer", "NEW-TERM-LEARNER-OPEN-SELECT-RENDERER", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "arg_constraint_string", "ARG-CONSTRAINT-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "new_term_learner_open_select_renderer_int", "NEW-TERM-LEARNER-OPEN-SELECT-RENDERER-INT", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_legend_string_from_justifications", "GET-LEGEND-STRING-FROM-JUSTIFICATIONS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "new_term_learner_single_justification_type", "NEW-TERM-LEARNER-SINGLE-JUSTIFICATION-TYPE", 6, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_add_lexical_phrase", "TERM-LEARNER-ADD-LEXICAL-PHRASE", 2, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "xml_term_learner_user_choice", "XML-TERM-LEARNER-USER-CHOICE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_substitutions_from_args", "GET-SUBSTITUTIONS-FROM-ARGS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "string_to_user_action_keyword", "STRING-TO-USER-ACTION-KEYWORD", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_user_choice", "TERM-LEARNER-USER-CHOICE", 10, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "xml_term_learner_create_new", "XML-TERM-LEARNER-CREATE-NEW", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "is_formula_arg_position_a_collectionP", "IS-FORMULA-ARG-POSITION-A-COLLECTION?", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cure_assert_sentence", "CURE-ASSERT-SENTENCE", 1, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cure_unassert_sentence", "CURE-UNASSERT-SENTENCE", 1, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "create_new_cure_term_and_assert_sentence", "CREATE-NEW-CURE-TERM-AND-ASSERT-SENTENCE", 3, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_create_new", "TERM-LEARNER-CREATE-NEW", 3, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "assert_mt_for_sentence", "ASSERT-MT-FOR-SENTENCE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "new_term_will_be_collectionP", "NEW-TERM-WILL-BE-COLLECTION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_renderer_for_new_taxonomic_relative", "TERM-LEARNER-RENDERER-FOR-NEW-TAXONOMIC-RELATIVE", 4, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_get_taxonomic_sentence_for_new_type", "TERM-LEARNER-GET-TAXONOMIC-SENTENCE-FOR-NEW-TYPE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_base_sentence_from_sentence_string", "GET-BASE-SENTENCE-FROM-SENTENCE-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "find_by_id_string_p", "FIND-BY-ID-STRING-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "decode_id_string", "DECODE-ID-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "xml_term_learner_user_substitution", "XML-TERM-LEARNER-USER-SUBSTITUTION", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_user_substitution", "TERM-LEARNER-USER-SUBSTITUTION", 4, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_nl_cycl_valid_triples_via_scg", "GET-NL-CYCL-VALID-TRIPLES-VIA-SCG", 5, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_constraint_list_from_string", "TERM-LEARNER-CONSTRAINT-LIST-FROM-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_term_learner_valid_substitution", "CLEAR-TERM-LEARNER-VALID-SUBSTITUTION", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_term_learner_valid_substitution", "REMOVE-TERM-LEARNER-VALID-SUBSTITUTION", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_valid_substitution_internal", "TERM-LEARNER-VALID-SUBSTITUTION-INTERNAL", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_valid_substitution", "TERM-LEARNER-VALID-SUBSTITUTION", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "subword_nl_cycl_pairs_from_string", "SUBWORD-NL-CYCL-PAIRS-FROM-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "xml_term_learner_possible_types_from_substitution", "XML-TERM-LEARNER-POSSIBLE-TYPES-FROM-SUBSTITUTION", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_possible_types_from_substitution", "TERM-LEARNER-POSSIBLE-TYPES-FROM-SUBSTITUTION", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_get_word_denots_from_string", "TERM-LEARNER-GET-WORD-DENOTS-FROM-STRING", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "first_true", "FIRST-TRUE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "second_true", "SECOND-TRUE", 2, 0, false);
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.cure_api", "term_learner_autocomplete_native", "TERM-LEARNER-AUTOCOMPLETE-NATIVE");
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.cure_api", "term_learner_autocomplete", "TERM-LEARNER-AUTOCOMPLETE");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "xml_term_learner_autocomplete", "XML-TERM-LEARNER-AUTOCOMPLETE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_autocomplete_int", "TERM-LEARNER-AUTOCOMPLETE-INT", 8, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_allotted_tasks", "GET-ALLOTTED-TASKS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_get_fact_sheet_for_term", "TERM-LEARNER-GET-FACT-SHEET-FOR-TERM", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_get_fact_sheet_updates_for_term", "TERM-LEARNER-GET-FACT-SHEET-UPDATES-FOR-TERM", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_standard_fact_sheet_properties", "TERM-LEARNER-STANDARD-FACT-SHEET-PROPERTIES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_context_sensitive_fact_sheet_properties", "TERM-LEARNER-CONTEXT-SENSITIVE-FACT-SHEET-PROPERTIES", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_prefer_slot_value_fact_sheetsP", "TERM-LEARNER-PREFER-SLOT-VALUE-FACT-SHEETS?", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "forbidden_slot_value_fact_sheet_category_preds", "FORBIDDEN-SLOT-VALUE-FACT-SHEET-CATEGORY-PREDS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "concept_naked_for_factsheetP", "CONCEPT-NAKED-FOR-FACTSHEET?", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_unmodifiable_statusP", "TERM-LEARNER-UNMODIFIABLE-STATUS?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_known_statusP", "TERM-LEARNER-KNOWN-STATUS?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_fact_status", "TERM-LEARNER-FACT-STATUS", 7, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cure_specify_is", "CURE-SPECIFY-IS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "find_query_mt_from_justifications", "FIND-QUERY-MT-FROM-JUSTIFICATIONS", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_term_learner_fact_status_int", "CLEAR-TERM-LEARNER-FACT-STATUS-INT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_term_learner_fact_status_int", "REMOVE-TERM-LEARNER-FACT-STATUS-INT", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_fact_status_int_internal", "TERM-LEARNER-FACT-STATUS-INT-INTERNAL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_fact_status_int", "TERM-LEARNER-FACT-STATUS-INT", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_knownP", "TERM-LEARNER-KNOWN?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "sentence_removable_by_userP", "SENTENCE-REMOVABLE-BY-USER?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cure_user_has_arbitrary_deletion_privileges", "CURE-USER-HAS-ARBITRARY-DELETION-PRIVILEGES", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "derived_sentenceP", "DERIVED-SENTENCE?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_find_visible_assertions_cycl_internal", "TERM-LEARNER-FIND-VISIBLE-ASSERTIONS-CYCL-INTERNAL", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_find_visible_assertions_cycl", "TERM-LEARNER-FIND-VISIBLE-ASSERTIONS-CYCL", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "xml_term_learner_get_followups_for_term", "XML-TERM-LEARNER-GET-FOLLOWUPS-FOR-TERM", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_get_followups_for_cycl_term", "TERM-LEARNER-GET-FOLLOWUPS-FOR-CYCL-TERM", 1, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_get_followups_for_term", "TERM-LEARNER-GET-FOLLOWUPS-FOR-TERM", 1, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_unsorted_fragments_for_term", "TERM-LEARNER-UNSORTED-FRAGMENTS-FOR-TERM", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "sort_followups", "SORT-FOLLOWUPS", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_term_learner_category_label", "CLEAR-TERM-LEARNER-CATEGORY-LABEL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_term_learner_category_label", "REMOVE-TERM-LEARNER-CATEGORY-LABEL", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_category_label_internal", "TERM-LEARNER-CATEGORY-LABEL-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_category_label", "TERM-LEARNER-CATEGORY-LABEL", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_get_followup_categories_for_type", "CLEAR-GET-FOLLOWUP-CATEGORIES-FOR-TYPE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_get_followup_categories_for_type", "REMOVE-GET-FOLLOWUP-CATEGORIES-FOR-TYPE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_followup_categories_for_type_internal", "GET-FOLLOWUP-CATEGORIES-FOR-TYPE-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_followup_categories_for_type", "GET-FOLLOWUP-CATEGORIES-FOR-TYPE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_get_pred_list_order_for_type", "CLEAR-GET-PRED-LIST-ORDER-FOR-TYPE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_get_pred_list_order_for_type", "REMOVE-GET-PRED-LIST-ORDER-FOR-TYPE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_pred_list_order_for_type_internal", "GET-PRED-LIST-ORDER-FOR-TYPE-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_pred_list_order_for_type", "GET-PRED-LIST-ORDER-FOR-TYPE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "categories_and_types_for_sentence_and_term", "CATEGORIES-AND-TYPES-FOR-SENTENCE-AND-TERM", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "substitute_arg_constraints_for_vars", "SUBSTITUTE-ARG-CONSTRAINTS-FOR-VARS", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_substitutable_arg_constraint_for_reln", "CLEAR-SUBSTITUTABLE-ARG-CONSTRAINT-FOR-RELN", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_substitutable_arg_constraint_for_reln", "REMOVE-SUBSTITUTABLE-ARG-CONSTRAINT-FOR-RELN", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "substitutable_arg_constraint_for_reln_internal", "SUBSTITUTABLE-ARG-CONSTRAINT-FOR-RELN-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "substitutable_arg_constraint_for_reln", "SUBSTITUTABLE-ARG-CONSTRAINT-FOR-RELN", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "categories_and_types_for_sentence_and_term_int", "CATEGORIES-AND-TYPES-FOR-SENTENCE-AND-TERM-INT", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "categories_and_types_for_sentence_and_term_int_via_query", "CATEGORIES-AND-TYPES-FOR-SENTENCE-AND-TERM-INT-VIA-QUERY", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_categories_and_types_for_sentence_and_term_int_via_indexing", "CLEAR-CATEGORIES-AND-TYPES-FOR-SENTENCE-AND-TERM-INT-VIA-INDEXING", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_categories_and_types_for_sentence_and_term_int_via_indexing", "REMOVE-CATEGORIES-AND-TYPES-FOR-SENTENCE-AND-TERM-INT-VIA-INDEXING", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "categories_and_types_for_sentence_and_term_int_via_indexing_internal", "CATEGORIES-AND-TYPES-FOR-SENTENCE-AND-TERM-INT-VIA-INDEXING-INTERNAL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "categories_and_types_for_sentence_and_term_int_via_indexing", "CATEGORIES-AND-TYPES-FOR-SENTENCE-AND-TERM-INT-VIA-INDEXING", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "sort_by_category", "SORT-BY-CATEGORY", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_summary_pred_sort_order_for_focal_term", "CLEAR-SUMMARY-PRED-SORT-ORDER-FOR-FOCAL-TERM", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_summary_pred_sort_order_for_focal_term", "REMOVE-SUMMARY-PRED-SORT-ORDER-FOR-FOCAL-TERM", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "summary_pred_sort_order_for_focal_term_internal", "SUMMARY-PRED-SORT-ORDER-FOR-FOCAL-TERM-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "summary_pred_sort_order_for_focal_term", "SUMMARY-PRED-SORT-ORDER-FOR-FOCAL-TERM", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "higher_priority_followup_in_category", "HIGHER-PRIORITY-FOLLOWUP-IN-CATEGORY", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_justifying_type_from_fragment_justification", "GET-JUSTIFYING-TYPE-FROM-FRAGMENT-JUSTIFICATION", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "debug_followups_for_term", "DEBUG-FOLLOWUPS-FOR-TERM", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_followup_query_mt_for_user", "CLEAR-FOLLOWUP-QUERY-MT-FOR-USER", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_followup_query_mt_for_user", "REMOVE-FOLLOWUP-QUERY-MT-FOR-USER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "followup_query_mt_for_user_internal", "FOLLOWUP-QUERY-MT-FOR-USER-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "followup_query_mt_for_user", "FOLLOWUP-QUERY-MT-FOR-USER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "default_followup_query_mt", "DEFAULT-FOLLOWUP-QUERY-MT", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_followup_query_mt_for_userXtask", "CLEAR-FOLLOWUP-QUERY-MT-FOR-USER&TASK", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_followup_query_mt_for_userXtask", "REMOVE-FOLLOWUP-QUERY-MT-FOR-USER&TASK", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "followup_query_mt_for_userXtask_internal", "FOLLOWUP-QUERY-MT-FOR-USER&TASK-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "followup_query_mt_for_userXtask", "FOLLOWUP-QUERY-MT-FOR-USER&TASK", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_term_learner_known_bindings_for_sentence", "CLEAR-TERM-LEARNER-KNOWN-BINDINGS-FOR-SENTENCE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_term_learner_known_bindings_for_sentence", "REMOVE-TERM-LEARNER-KNOWN-BINDINGS-FOR-SENTENCE", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_known_bindings_for_sentence_internal", "TERM-LEARNER-KNOWN-BINDINGS-FOR-SENTENCE-INTERNAL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_known_bindings_for_sentence", "TERM-LEARNER-KNOWN-BINDINGS-FOR-SENTENCE", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cure_get_best_bindings", "CURE-GET-BEST-BINDINGS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_term_learner_known_negated_bindings_for_sentence", "CLEAR-TERM-LEARNER-KNOWN-NEGATED-BINDINGS-FOR-SENTENCE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_term_learner_known_negated_bindings_for_sentence", "REMOVE-TERM-LEARNER-KNOWN-NEGATED-BINDINGS-FOR-SENTENCE", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_known_negated_bindings_for_sentence_internal", "TERM-LEARNER-KNOWN-NEGATED-BINDINGS-FOR-SENTENCE-INTERNAL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_known_negated_bindings_for_sentence", "TERM-LEARNER-KNOWN-NEGATED-BINDINGS-FOR-SENTENCE", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_term_learner_types_for_fragment", "CLEAR-TERM-LEARNER-TYPES-FOR-FRAGMENT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_term_learner_types_for_fragment", "REMOVE-TERM-LEARNER-TYPES-FOR-FRAGMENT", 6, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_types_for_fragment_internal", "TERM-LEARNER-TYPES-FOR-FRAGMENT-INTERNAL", 8, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_types_for_fragment", "TERM-LEARNER-TYPES-FOR-FRAGMENT", 6, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "should_add_empty_bindingsP", "SHOULD-ADD-EMPTY-BINDINGS?", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "default_unbound_bindings_for_fragment", "DEFAULT-UNBOUND-BINDINGS-FOR-FRAGMENT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "binding_lists_passing_constraints", "BINDING-LISTS-PASSING-CONSTRAINTS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_meets_constraints", "TERM-LEARNER-MEETS-CONSTRAINTS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_known_value_constraints_for_sentence", "TERM-LEARNER-KNOWN-VALUE-CONSTRAINTS-FOR-SENTENCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_source_renderers_for_sentence", "TERM-LEARNER-SOURCE-RENDERERS-FOR-SENTENCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_sources_of_mt", "CLEAR-SOURCES-OF-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_sources_of_mt", "REMOVE-SOURCES-OF-MT", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "sources_of_mt_internal", "SOURCES-OF-MT-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "sources_of_mt", "SOURCES-OF-MT", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "java_rendering_cycl", "JAVA-RENDERING-CYCL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "java_rendering_string", "JAVA-RENDERING-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "java_rendering_p", "JAVA-RENDERING-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "java_rendering_to_selection_renderer", "JAVA-RENDERING-TO-SELECTION-RENDERER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_candidate_hierarchical_replacements_for_sentence", "TERM-LEARNER-CANDIDATE-HIERARCHICAL-REPLACEMENTS-FOR-SENTENCE", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_candidate_hierarchical_replacements_for_sentence_int", "TERM-LEARNER-CANDIDATE-HIERARCHICAL-REPLACEMENTS-FOR-SENTENCE-INT", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "convert_alphabetical_to_hierarchical_replacements", "CONVERT-ALPHABETICAL-TO-HIERARCHICAL-REPLACEMENTS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_candidate_replacements_for_sentence", "TERM-LEARNER-CANDIDATE-REPLACEMENTS-FOR-SENTENCE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_candidate_replacements_for_arg_positions_in_sentence", "TERM-LEARNER-CANDIDATE-REPLACEMENTS-FOR-ARG-POSITIONS-IN-SENTENCE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_get_arg_positions_for_terms", "CLEAR-GET-ARG-POSITIONS-FOR-TERMS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_get_arg_positions_for_terms", "REMOVE-GET-ARG-POSITIONS-FOR-TERMS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_arg_positions_for_terms_internal", "GET-ARG-POSITIONS-FOR-TERMS-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_arg_positions_for_terms", "GET-ARG-POSITIONS-FOR-TERMS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_consolidate_javalist_for_arg_positions", "TERM-LEARNER-CONSOLIDATE-JAVALIST-FOR-ARG-POSITIONS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "consolidate_and_add_new_javalist_items", "CONSOLIDATE-AND-ADD-NEW-JAVALIST-ITEMS", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_anchor_tags_for_term", "TERM-LEARNER-ANCHOR-TAGS-FOR-TERM", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "argpos_subsumes", "ARGPOS-SUBSUMES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "list_prefixP", "LIST-PREFIX?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_type_for_fragment_int", "TERM-LEARNER-TYPE-FOR-FRAGMENT-INT", 2, 12, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cure_list_item_arg_poses", "CURE-LIST-ITEM-ARG-POSES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cure_editable_itemP", "CURE-EDITABLE-ITEM?", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cyc_terms_to_term_learner_terms", "CYC-TERMS-TO-TERM-LEARNER-TERMS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "new_term_learner_uninterpreted_renderer", "NEW-TERM-LEARNER-UNINTERPRETED-RENDERER", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_types_for_sentence", "TERM-LEARNER-TYPES-FOR-SENTENCE", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_types_for_sentence_id", "TERM-LEARNER-TYPES-FOR-SENTENCE-ID", 2, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cure_possibly_duplicate_arg", "CURE-POSSIBLY-DUPLICATE-ARG", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_arg_positions_for_terms_in_sentence", "GET-ARG-POSITIONS-FOR-TERMS-IN-SENTENCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_documentation_sentenceP", "TERM-LEARNER-DOCUMENTATION-SENTENCE?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_initial_suggestion_from_suggestions", "GET-INITIAL-SUGGESTION-FROM-SUGGESTIONS", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_suggested_cycls_for_arg_pos", "GET-SUGGESTED-CYCLS-FOR-ARG-POS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "make_nl_cycl_valid_triples_for_cycls", "MAKE-NL-CYCL-VALID-TRIPLES-FOR-CYCLS", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_terms_mergeableP", "TERM-LEARNER-TERMS-MERGEABLE?", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_string_denots", "TERM-LEARNER-STRING-DENOTS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_sentence_assertibleP", "TERM-LEARNER-SENTENCE-ASSERTIBLE?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_sentence_assertible_intP", "TERM-LEARNER-SENTENCE-ASSERTIBLE-INT?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_sentence_from_template", "GET-SENTENCE-FROM-TEMPLATE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_relevant_sentences_from_document", "TERM-LEARNER-RELEVANT-SENTENCES-FROM-DOCUMENT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_relevant_sentences", "TERM-LEARNER-RELEVANT-SENTENCES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_source_documentation_mt", "TERM-LEARNER-SOURCE-DOCUMENTATION-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cure_default_generation_mt", "CURE-DEFAULT-GENERATION-MT", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_default_generation_mt", "TERM-LEARNER-DEFAULT-GENERATION-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_cycl_terms_to_nl_strings", "TERM-LEARNER-CYCL-TERMS-TO-NL-STRINGS", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_cycl_term_to_nl_string", "TERM-LEARNER-CYCL-TERM-TO-NL-STRING", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "merge_justifications_for_ordered_types", "MERGE-JUSTIFICATIONS-FOR-ORDERED-TYPES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_handle_user_choice", "TERM-LEARNER-HANDLE-USER-CHOICE", 9, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "note_accepted_choice", "NOTE-ACCEPTED-CHOICE", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_nl_generation_for_user_added_sentence", "GET-NL-GENERATION-FOR-USER-ADDED-SENTENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "transform_to_true", "TRANSFORM-TO-TRUE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_expansion_expected_sentenceP", "TERM-EXPANSION-EXPECTED-SENTENCE?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_mts_for_user_choice", "GET-MTS-FOR-USER-CHOICE", 4, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_cure_user_addition_to_spindle_mt", "GET-CURE-USER-ADDITION-TO-SPINDLE-MT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cure_sort_work_by_docP", "CURE-SORT-WORK-BY-DOC?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_normalize_cure_user", "CLEAR-NORMALIZE-CURE-USER", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_normalize_cure_user", "REMOVE-NORMALIZE-CURE-USER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "normalize_cure_user_internal", "NORMALIZE-CURE-USER-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "normalize_cure_user", "NORMALIZE-CURE-USER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "all_justifications_have_specified_mtsP", "ALL-JUSTIFICATIONS-HAVE-SPECIFIED-MTS?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "user_added_term_typeP", "USER-ADDED-TERM-TYPE?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_task_source_spindle", "GET-TASK-SOURCE-SPINDLE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_default_assert_mt_for_user_and_task", "CLEAR-DEFAULT-ASSERT-MT-FOR-USER-AND-TASK", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_default_assert_mt_for_user_and_task", "REMOVE-DEFAULT-ASSERT-MT-FOR-USER-AND-TASK", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "default_assert_mt_for_user_and_task_internal", "DEFAULT-ASSERT-MT-FOR-USER-AND-TASK-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "default_assert_mt_for_user_and_task", "DEFAULT-ASSERT-MT-FOR-USER-AND-TASK", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "find_or_create_base_source_for_url", "FIND-OR-CREATE-BASE-SOURCE-FOR-URL", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "ensure_source_contextualized_in_spindle", "ENSURE-SOURCE-CONTEXTUALIZED-IN-SPINDLE", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "find_or_create_subwork_source", "FIND-OR-CREATE-SUBWORK-SOURCE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "ensure_is_hlmt_p_nart", "ENSURE-IS-HLMT-P-NART", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "find_or_create_user_addition_mt_for_url", "FIND-OR-CREATE-USER-ADDITION-MT-FOR-URL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_mts_for_urlXuser", "GET-MTS-FOR-URL&USER", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_mts_for_user", "GET-MTS-FOR-USER", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_mts_for_user", "CLEAR-MTS-FOR-USER", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_mts_for_urlXuser", "CLEAR-MTS-FOR-URL&USER", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_contents_from_mts", "CLEAR-CONTENTS-FROM-MTS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cyclist_fort", "CYCLIST-FORT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_ordered_types_for_term_in_document_string", "TERM-LEARNER-ORDERED-TYPES-FOR-TERM-IN-DOCUMENT-STRING", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_ordered_types_for_term_in_document", "TERM-LEARNER-ORDERED-TYPES-FOR-TERM-IN-DOCUMENT", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_types_from_types_and_justifications", "TERM-LEARNER-TYPES-FROM-TYPES-AND-JUSTIFICATIONS", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_weight", "GET-WEIGHT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_cycls", "GET-CYCLS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_cycl", "GET-CYCL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "ner_justificationP", "NER-JUSTIFICATION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_types_for_term_in_document", "TERM-LEARNER-TYPES-FOR-TERM-IN-DOCUMENT", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_collections_for_term_in_sentence", "TERM-LEARNER-COLLECTIONS-FOR-TERM-IN-SENTENCE", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "matching_named_entities", "MATCHING-NAMED-ENTITIES", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_term_learner_type_prompt", "CLEAR-TERM-LEARNER-TYPE-PROMPT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_term_learner_type_prompt", "REMOVE-TERM-LEARNER-TYPE-PROMPT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_type_prompt_internal", "TERM-LEARNER-TYPE-PROMPT-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_type_prompt", "TERM-LEARNER-TYPE-PROMPT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_term_learner_term_header_string", "CLEAR-TERM-LEARNER-TERM-HEADER-STRING", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_term_learner_term_header_string", "REMOVE-TERM-LEARNER-TERM-HEADER-STRING", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_term_header_string_internal", "TERM-LEARNER-TERM-HEADER-STRING-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_term_header_string", "TERM-LEARNER-TERM-HEADER-STRING", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_alternative_phrases", "TERM-LEARNER-ALTERNATIVE-PHRASES", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_term_learner_lexical_caches", "CLEAR-TERM-LEARNER-LEXICAL-CACHES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_lexify_from_termstrings", "TERM-LEARNER-LEXIFY-FROM-TERMSTRINGS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_assert_lexical_info", "TERM-LEARNER-ASSERT-LEXICAL-INFO", 4, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "default_task_for_user", "DEFAULT-TASK-FOR-USER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_default_task_for_user_int", "CLEAR-DEFAULT-TASK-FOR-USER-INT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_default_task_for_user_int", "REMOVE-DEFAULT-TASK-FOR-USER-INT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "default_task_for_user_int_internal", "DEFAULT-TASK-FOR-USER-INT-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "default_task_for_user_int", "DEFAULT-TASK-FOR-USER-INT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_query_mt_for_task", "CLEAR-QUERY-MT-FOR-TASK", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_query_mt_for_task", "REMOVE-QUERY-MT-FOR-TASK", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "query_mt_for_task_internal", "QUERY-MT-FOR-TASK-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "query_mt_for_task", "QUERY-MT-FOR-TASK", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_wff_checking_mt_for_task", "CLEAR-WFF-CHECKING-MT-FOR-TASK", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_wff_checking_mt_for_task", "REMOVE-WFF-CHECKING-MT-FOR-TASK", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "wff_checking_mt_for_task_internal", "WFF-CHECKING-MT-FOR-TASK-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "wff_checking_mt_for_task", "WFF-CHECKING-MT-FOR-TASK", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_query_mt_for_user_and_task", "CLEAR-QUERY-MT-FOR-USER-AND-TASK", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_query_mt_for_user_and_task", "REMOVE-QUERY-MT-FOR-USER-AND-TASK", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "query_mt_for_user_and_task_internal", "QUERY-MT-FOR-USER-AND-TASK-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "query_mt_for_user_and_task", "QUERY-MT-FOR-USER-AND-TASK", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_wff_checking_mt_for_user_and_task", "CLEAR-WFF-CHECKING-MT-FOR-USER-AND-TASK", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_wff_checking_mt_for_user_and_task", "REMOVE-WFF-CHECKING-MT-FOR-USER-AND-TASK", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "wff_checking_mt_for_user_and_task_internal", "WFF-CHECKING-MT-FOR-USER-AND-TASK-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "wff_checking_mt_for_user_and_task", "WFF-CHECKING-MT-FOR-USER-AND-TASK", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "parsing_mt_for_task", "PARSING-MT-FOR-TASK", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "xml_output_term_types", "XML-OUTPUT-TERM-TYPES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "xml_output_term_type", "XML-OUTPUT-TERM-TYPE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "xml_output_renderers", "XML-OUTPUT-RENDERERS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "xml_output_renderer", "XML-OUTPUT-RENDERER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "xml_output_selection_renderer", "XML-OUTPUT-SELECTION-RENDERER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_concept_clouds", "TERM-LEARNER-CONCEPT-CLOUDS", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_term_concept_cloud", "TERM-LEARNER-TERM-CONCEPT-CLOUD", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_concept_cloud_as_xml", "TERM-LEARNER-CONCEPT-CLOUD-AS-XML", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_concept_cloud_new", "TERM-LEARNER-CONCEPT-CLOUD-NEW", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_concept_cloud_new_int", "TERM-LEARNER-CONCEPT-CLOUD-NEW-INT", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "add_cloud_entry_for_term", "ADD-CLOUD-ENTRY-FOR-TERM", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_term_weight", "TERM-LEARNER-TERM-WEIGHT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_term_learner_cloud_display_nl", "CLEAR-TERM-LEARNER-CLOUD-DISPLAY-NL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_term_learner_cloud_display_nl", "REMOVE-TERM-LEARNER-CLOUD-DISPLAY-NL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_cloud_display_nl_internal", "TERM-LEARNER-CLOUD-DISPLAY-NL-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_cloud_display_nl", "TERM-LEARNER-CLOUD-DISPLAY-NL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_term_learner_displayable_generalizationP", "CLEAR-TERM-LEARNER-DISPLAYABLE-GENERALIZATION?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_term_learner_displayable_generalizationP", "REMOVE-TERM-LEARNER-DISPLAYABLE-GENERALIZATION?", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_displayable_generalizationP_internal", "TERM-LEARNER-DISPLAYABLE-GENERALIZATION?-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_displayable_generalizationP", "TERM-LEARNER-DISPLAYABLE-GENERALIZATION?", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_term_learner_possibly_relevant_generalizationP", "CLEAR-TERM-LEARNER-POSSIBLY-RELEVANT-GENERALIZATION?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_term_learner_possibly_relevant_generalizationP", "REMOVE-TERM-LEARNER-POSSIBLY-RELEVANT-GENERALIZATION?", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_possibly_relevant_generalizationP_internal", "TERM-LEARNER-POSSIBLY-RELEVANT-GENERALIZATION?-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_possibly_relevant_generalizationP", "TERM-LEARNER-POSSIBLY-RELEVANT-GENERALIZATION?", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_term_learner_irrelevancies_for_term", "CLEAR-TERM-LEARNER-IRRELEVANCIES-FOR-TERM", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cycl_terms_to_nl_strings_quick", "CYCL-TERMS-TO-NL-STRINGS-QUICK", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cb_show_followup_widget", "CB-SHOW-FOLLOWUP-WIDGET", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cb_cure_host", "CB-CURE-HOST", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cb_cure_port", "CB-CURE-PORT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cb_cure_context_path", "CB-CURE-CONTEXT-PATH", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cb_possibly_add_cure_link", "CB-POSSIBLY-ADD-CURE-LINK", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "cb_cure_link", "CB-CURE-LINK", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_sentence_score", "CLEAR-SENTENCE-SCORE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_sentence_score", "REMOVE-SENTENCE-SCORE", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "sentence_score_internal", "SENTENCE-SCORE-INTERNAL", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "sentence_score", "SENTENCE-SCORE", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_sentence_score_for_type", "CLEAR-SENTENCE-SCORE-FOR-TYPE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_sentence_score_for_type", "REMOVE-SENTENCE-SCORE-FOR-TYPE", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "sentence_score_for_type_internal", "SENTENCE-SCORE-FOR-TYPE-INTERNAL", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "sentence_score_for_type", "SENTENCE-SCORE-FOR-TYPE", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_set_query_variable", "CLEAR-SET-QUERY-VARIABLE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_set_query_variable", "REMOVE-SET-QUERY-VARIABLE", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "set_query_variable_internal", "SET-QUERY-VARIABLE-INTERNAL", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "set_query_variable", "SET-QUERY-VARIABLE", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_sentence_for_scoring", "GET-SENTENCE-FOR-SCORING", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "preds_w_scores", "PREDS-W-SCORES", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "sentences_with_scores_for_type", "SENTENCES-WITH-SCORES-FOR-TYPE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_get_fragments_for_terms_cached", "CLEAR-GET-FRAGMENTS-FOR-TERMS-CACHED", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_get_fragments_for_terms_cached", "REMOVE-GET-FRAGMENTS-FOR-TERMS-CACHED", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_fragments_for_terms_cached_internal", "GET-FRAGMENTS-FOR-TERMS-CACHED-INTERNAL", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_fragments_for_terms_cached", "GET-FRAGMENTS-FOR-TERMS-CACHED", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "assert_orderings", "ASSERT-ORDERINGS", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "assert_ordering_for_type", "ASSERT-ORDERING-FOR-TYPE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "pred_score", "PRED-SCORE", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "preds_w_scores_from_rules", "PREDS-W-SCORES-FROM-RULES", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "pred_score_for_type", "PRED-SCORE-FOR-TYPE", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "preds_w_scores_for_type_from_rules", "PREDS-W-SCORES-FOR-TYPE-FROM-RULES", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "assert_ordering_for_type_from_rules", "ASSERT-ORDERING-FOR-TYPE-FROM-RULES", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "assert_ordering_for_specs_from_rules", "ASSERT-ORDERING-FOR-SPECS-FROM-RULES", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "assert_applicable_preds_for_specs", "ASSERT-APPLICABLE-PREDS-FOR-SPECS", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "assert_applicable_preds_for_type", "ASSERT-APPLICABLE-PREDS-FOR-TYPE", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_applicable_formula_generators_for_type", "GET-APPLICABLE-FORMULA-GENERATORS-FOR-TYPE", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "new_term_learner_justifications", "NEW-TERM-LEARNER-JUSTIFICATIONS", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "new_term_learner_justification", "NEW-TERM-LEARNER-JUSTIFICATION", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_justification_p", "TERM-LEARNER-JUSTIFICATION-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_justification_string", "TERM-LEARNER-JUSTIFICATION-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_justification_context_string", "TERM-LEARNER-JUSTIFICATION-CONTEXT-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_justification_tool", "TERM-LEARNER-JUSTIFICATION-TOOL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_justification_source", "TERM-LEARNER-JUSTIFICATION-SOURCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_justification_assert_mt", "TERM-LEARNER-JUSTIFICATION-ASSERT-MT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_context_sentences_from_justifications", "GET-CONTEXT-SENTENCES-FROM-JUSTIFICATIONS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "restart_concept_search_demo_server", "RESTART-CONCEPT-SEARCH-DEMO-SERVER", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "string_likely_denotes_collectionP", "STRING-LIKELY-DENOTES-COLLECTION?", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_collection_via_web_searchP", "CLEAR-COLLECTION-VIA-WEB-SEARCH?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_collection_via_web_searchP", "REMOVE-COLLECTION-VIA-WEB-SEARCH?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "collection_via_web_searchP_internal", "COLLECTION-VIA-WEB-SEARCH?-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "collection_via_web_searchP", "COLLECTION-VIA-WEB-SEARCH?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "plural_to_singular_ratio", "PLURAL-TO-SINGULAR-RATIO", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "count_to_mass_ratio", "COUNT-TO-MASS-RATIO", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "clear_get_concept_tags_from_string", "CLEAR-GET-CONCEPT-TAGS-FROM-STRING", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "remove_get_concept_tags_from_string", "REMOVE-GET-CONCEPT-TAGS-FROM-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_concept_tags_from_string_internal", "GET-CONCEPT-TAGS-FROM-STRING-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_concept_tags_from_string", "GET-CONCEPT-TAGS-FROM-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "find_fillers_in_text", "FIND-FILLERS-IN-TEXT", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "fillers_from_concept_tags_multiple", "FILLERS-FROM-CONCEPT-TAGS-MULTIPLE", 4, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "fillers_from_concept_tags", "FILLERS-FROM-CONCEPT-TAGS", 4, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "find_formula_args_among_concept_tags", "FIND-FORMULA-ARGS-AMONG-CONCEPT-TAGS", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "score_tag", "SCORE-TAG", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "minimum_tag_distance", "MINIMUM-TAG-DISTANCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "tag_distance", "TAG-DISTANCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "tags_satisfying_arg_constraints", "TAGS-SATISFYING-ARG-CONSTRAINTS", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "make_concept_tag", "MAKE-CONCEPT-TAG", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_concept_tag_cycl", "GET-CONCEPT-TAG-CYCL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_concept_tag_offset", "GET-CONCEPT-TAG-OFFSET", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_concept_tag_length", "GET-CONCEPT-TAG-LENGTH", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_concept_tag_nl", "GET-CONCEPT-TAG-NL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "concept_tag_p", "CONCEPT-TAG-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "find_sentence_fillers", "FIND-SENTENCE-FILLERS", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "reformat_sentences_and_vars", "REFORMAT-SENTENCES-AND-VARS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "construct_sentences_from_template_and_bindings", "CONSTRUCT-SENTENCES-FROM-TEMPLATE-AND-BINDINGS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "make_filler", "MAKE-FILLER", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_filler_var_binding", "GET-FILLER-VAR-BINDING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_filler_tag", "GET-FILLER-TAG", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_filler_score", "GET-FILLER-SCORE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_filler_cycl", "GET-FILLER-CYCL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_filler_var", "GET-FILLER-VAR", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "filler_p", "FILLER-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_queries_for_term", "GET-QUERIES-FOR-TERM", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "get_queries_from_sentences", "GET-QUERIES-FROM-SENTENCES", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_autocomplete_native_with_cycadministrator", "TERM-LEARNER-AUTOCOMPLETE-NATIVE-WITH-CYCADMINISTRATOR", 1, 6, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "valid_hierarchical_candidates_p", "VALID-HIERARCHICAL-CANDIDATES-P", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "candidate_renderer_p", "CANDIDATE-RENDERER-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "some_selection_renderer_has_string_p", "SOME-SELECTION-RENDERER-HAS-STRING-P", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_types_for_sentence_id_test_fn", "TERM-LEARNER-TYPES-FOR-SENTENCE-ID-TEST-FN", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "term_learner_known_bindings_for_sentence_neg", "TERM-LEARNER-KNOWN-BINDINGS-FOR-SENTENCE-NEG", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "bindings_dont_mention", "BINDINGS-DONT-MENTION", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.cure_api", "bindings_mention", "BINDINGS-MENTION", 2, 0, false);
        return (SubLObject)cure_api.NIL;
    }
    
    public static SubLObject init_cure_api_file() {
        cure_api.$term_learner_user_created_term_log_file$ = SubLFiles.defparameter("*TERM-LEARNER-USER-CREATED-TERM-LOG-FILE*", (SubLObject)cure_api.$str0$_cyc_projects_doc_annotation_logs);
        cure_api.$term_learner_user_added_types_log_file$ = SubLFiles.defparameter("*TERM-LEARNER-USER-ADDED-TYPES-LOG-FILE*", (SubLObject)cure_api.$str1$_cyc_projects_doc_annotation_logs);
        cure_api.$term_learner_accepted_meanings_log_file$ = SubLFiles.defparameter("*TERM-LEARNER-ACCEPTED-MEANINGS-LOG-FILE*", (SubLObject)cure_api.$str2$_cyc_projects_doc_annotation_logs);
        cure_api.$term_learner_use_lexical_lookup_only$ = SubLFiles.deflexical("*TERM-LEARNER-USE-LEXICAL-LOOKUP-ONLY*", (SubLObject)cure_api.T);
        cure_api.$current_tl_task$ = SubLFiles.defparameter("*CURRENT-TL-TASK*", (SubLObject)cure_api.NIL);
        cure_api.$term_learner_default_lexical_assertion_mt$ = SubLFiles.defparameter("*TERM-LEARNER-DEFAULT-LEXICAL-ASSERTION-MT*", cure_api.$const3$EnglishMt);
        cure_api.$cure_edit_the_list_termsP$ = SubLFiles.defparameter("*CURE-EDIT-THE-LIST-TERMS?*", (SubLObject)cure_api.T);
        cure_api.$cure_allow_some_predicates_to_be_edited$ = SubLFiles.defparameter("*CURE-ALLOW-SOME-PREDICATES-TO-BE-EDITED*", (SubLObject)cure_api.T);
        cure_api.$default_create_as_type_caching_state$ = SubLFiles.deflexical("*DEFAULT-CREATE-AS-TYPE-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$allow_changes_to_focal_term_on_replicate$ = SubLFiles.defparameter("*ALLOW-CHANGES-TO-FOCAL-TERM-ON-REPLICATE*", (SubLObject)cure_api.NIL);
        cure_api.$term_learner_valid_substitution_caching_state$ = SubLFiles.deflexical("*TERM-LEARNER-VALID-SUBSTITUTION-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$term_learner_unknown_status$ = SubLFiles.defconstant("*TERM-LEARNER-UNKNOWN-STATUS*", (SubLObject)cure_api.ZERO_INTEGER);
        cure_api.$term_learner_known_removable$ = SubLFiles.defconstant("*TERM-LEARNER-KNOWN-REMOVABLE*", (SubLObject)cure_api.ONE_INTEGER);
        cure_api.$term_learner_known_derived$ = SubLFiles.defconstant("*TERM-LEARNER-KNOWN-DERIVED*", (SubLObject)cure_api.TWO_INTEGER);
        cure_api.$term_learner_unknown_assertible$ = SubLFiles.defconstant("*TERM-LEARNER-UNKNOWN-ASSERTIBLE*", (SubLObject)cure_api.THREE_INTEGER);
        cure_api.$term_learner_impossible$ = SubLFiles.defconstant("*TERM-LEARNER-IMPOSSIBLE*", (SubLObject)cure_api.FOUR_INTEGER);
        cure_api.$term_learner_cyc_error$ = SubLFiles.defconstant("*TERM-LEARNER-CYC-ERROR*", (SubLObject)cure_api.FIVE_INTEGER);
        cure_api.$term_learner_downstream_error$ = SubLFiles.defconstant("*TERM-LEARNER-DOWNSTREAM-ERROR*", (SubLObject)cure_api.SIX_INTEGER);
        cure_api.$term_learner_working$ = SubLFiles.defconstant("*TERM-LEARNER-WORKING*", (SubLObject)cure_api.SEVEN_INTEGER);
        cure_api.$term_learner_known_not_removable$ = SubLFiles.defconstant("*TERM-LEARNER-KNOWN-NOT-REMOVABLE*", (SubLObject)cure_api.EIGHT_INTEGER);
        cure_api.$term_learner_rejected$ = SubLFiles.defconstant("*TERM-LEARNER-REJECTED*", (SubLObject)cure_api.NINE_INTEGER);
        cure_api.$term_learner_incomplete$ = SubLFiles.defconstant("*TERM-LEARNER-INCOMPLETE*", (SubLObject)cure_api.TEN_INTEGER);
        cure_api.$term_learner_unmodifiable$ = SubLFiles.deflexical("*TERM-LEARNER-UNMODIFIABLE*", (SubLObject)ConsesLow.list(cure_api.$term_learner_known_derived$.getGlobalValue(), cure_api.$term_learner_known_not_removable$.getGlobalValue()));
        cure_api.$term_learner_fact_status_int_caching_state$ = SubLFiles.deflexical("*TERM-LEARNER-FACT-STATUS-INT-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$followup_query_mt$ = SubLFiles.defparameter("*FOLLOWUP-QUERY-MT*", (SubLObject)cure_api.$list331);
        cure_api.$term_learner_category_label_caching_state$ = SubLFiles.deflexical("*TERM-LEARNER-CATEGORY-LABEL-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$get_followup_categories_for_type_caching_state$ = SubLFiles.deflexical("*GET-FOLLOWUP-CATEGORIES-FOR-TYPE-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$get_pred_list_order_for_type_caching_state$ = SubLFiles.deflexical("*GET-PRED-LIST-ORDER-FOR-TYPE-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$substitutable_arg_constraint_for_reln_caching_state$ = SubLFiles.deflexical("*SUBSTITUTABLE-ARG-CONSTRAINT-FOR-RELN-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$categories_and_types_for_sentence_and_term_int_via_indexing_caching_state$ = SubLFiles.deflexical("*CATEGORIES-AND-TYPES-FOR-SENTENCE-AND-TERM-INT-VIA-INDEXING-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$summary_pred_sort_order_for_focal_term_caching_state$ = SubLFiles.deflexical("*SUMMARY-PRED-SORT-ORDER-FOR-FOCAL-TERM-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$followup_query_mt_for_user_caching_state$ = SubLFiles.deflexical("*FOLLOWUP-QUERY-MT-FOR-USER-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$followup_query_mt_for_userXtask_caching_state$ = SubLFiles.deflexical("*FOLLOWUP-QUERY-MT-FOR-USER&TASK-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$cure_show_best_bindings$ = SubLFiles.defparameter("*CURE-SHOW-BEST-BINDINGS*", (SubLObject)cure_api.T);
        cure_api.$term_learner_known_bindings_for_sentence_caching_state$ = SubLFiles.deflexical("*TERM-LEARNER-KNOWN-BINDINGS-FOR-SENTENCE-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$term_learner_known_negated_bindings_for_sentence_caching_state$ = SubLFiles.deflexical("*TERM-LEARNER-KNOWN-NEGATED-BINDINGS-FOR-SENTENCE-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$term_learner_types_for_fragment_caching_state$ = SubLFiles.deflexical("*TERM-LEARNER-TYPES-FOR-FRAGMENT-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$sources_of_mt_caching_state$ = SubLFiles.deflexical("*SOURCES-OF-MT-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$get_arg_positions_for_terms_caching_state$ = SubLFiles.deflexical("*GET-ARG-POSITIONS-FOR-TERMS-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$delete_me_token$ = SubLFiles.deflexical("*DELETE-ME-TOKEN*", Symbols.gensym((SubLObject)cure_api.UNPROVIDED));
        cure_api.$term_learner_source_documentation_mt$ = SubLFiles.defparameter("*TERM-LEARNER-SOURCE-DOCUMENTATION-MT*", (SubLObject)cure_api.$kw177$UNINITIALIZED);
        cure_api.$source_spindle$ = SubLFiles.defparameter("*SOURCE-SPINDLE*", cure_api.$const518$AssistedReaderSourceSpindle);
        cure_api.$source_spindle_query_mt$ = SubLFiles.defparameter("*SOURCE-SPINDLE-QUERY-MT*", cure_api.$const519$AssistedReaderSourceSpindleCollec);
        cure_api.$term_learner_default_generation_mt$ = SubLFiles.defparameter("*TERM-LEARNER-DEFAULT-GENERATION-MT*", (SubLObject)cure_api.NIL);
        cure_api.$normalize_cure_user_caching_state$ = SubLFiles.deflexical("*NORMALIZE-CURE-USER-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$term_learner_base_source_creation_lock$ = SubLFiles.deflexical("*TERM-LEARNER-BASE-SOURCE-CREATION-LOCK*", Locks.make_lock((SubLObject)cure_api.$str545$term_learner_base_source_creation));
        cure_api.$term_learner_assert_redundant_mt_info$ = SubLFiles.defparameter("*TERM-LEARNER-ASSERT-REDUNDANT-MT-INFO*", (SubLObject)cure_api.T);
        cure_api.$default_assert_mt_for_user_and_task_caching_state$ = SubLFiles.deflexical("*DEFAULT-ASSERT-MT-FOR-USER-AND-TASK-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$term_learner_sub_source_creation_lock$ = SubLFiles.deflexical("*TERM-LEARNER-SUB-SOURCE-CREATION-LOCK*", Locks.make_lock((SubLObject)cure_api.$str561$term_learner_sub_source_creation_));
        cure_api.$needs_approval$ = SubLFiles.defconstant("*NEEDS-APPROVAL*", (SubLObject)cure_api.$str585$needsApproval);
        cure_api.$disapproved$ = SubLFiles.defconstant("*DISAPPROVED*", (SubLObject)cure_api.$str586$disapproved);
        cure_api.$approved$ = SubLFiles.defconstant("*APPROVED*", (SubLObject)cure_api.$str587$approved);
        cure_api.$term_learner_type_prompt_caching_state$ = SubLFiles.deflexical("*TERM-LEARNER-TYPE-PROMPT-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$term_learner_term_header_string_caching_state$ = SubLFiles.deflexical("*TERM-LEARNER-TERM-HEADER-STRING-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$default_task_for_user_int_caching_state$ = SubLFiles.deflexical("*DEFAULT-TASK-FOR-USER-INT-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$query_mt_for_task_caching_state$ = SubLFiles.deflexical("*QUERY-MT-FOR-TASK-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$wff_checking_mt_for_task_caching_state$ = SubLFiles.deflexical("*WFF-CHECKING-MT-FOR-TASK-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$query_mt_for_user_and_task_caching_state$ = SubLFiles.deflexical("*QUERY-MT-FOR-USER-AND-TASK-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$wff_checking_mt_for_user_and_task_caching_state$ = SubLFiles.deflexical("*WFF-CHECKING-MT-FOR-USER-AND-TASK-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$term_learner_cloud_display_nl_caching_state$ = SubLFiles.deflexical("*TERM-LEARNER-CLOUD-DISPLAY-NL-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$term_learner_displayable_generalizationP_caching_state$ = SubLFiles.deflexical("*TERM-LEARNER-DISPLAYABLE-GENERALIZATION?-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$term_learner_possibly_relevant_generalizationP_caching_state$ = SubLFiles.deflexical("*TERM-LEARNER-POSSIBLY-RELEVANT-GENERALIZATION?-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$term_learner_irrelevance_listener$ = SubLFiles.deflexical("*TERM-LEARNER-IRRELEVANCE-LISTENER*", event_broker.describe_funcall_listener((SubLObject)cure_api.$kw690$KB_MODIFY_IRRELEVANCE, (SubLObject)cure_api.$sym691$CLEAR_TERM_LEARNER_IRRELEVANCIES_FOR_TERM, (SubLObject)cure_api.UNPROVIDED, (SubLObject)cure_api.UNPROVIDED));
        cure_api.$cb_show_followup_widget$ = SubLFiles.defparameter("*CB-SHOW-FOLLOWUP-WIDGET*", (SubLObject)cure_api.NIL);
        cure_api.$cb_cure_external_host$ = SubLFiles.deflexical("*CB-CURE-EXTERNAL-HOST*", (SubLObject)cure_api.$str701$cure_cyc_com);
        cure_api.$cb_cure_external_port$ = SubLFiles.deflexical("*CB-CURE-EXTERNAL-PORT*", (SubLObject)cure_api.$int702$8080);
        cure_api.$cb_cure_external_context_path$ = SubLFiles.deflexical("*CB-CURE-EXTERNAL-CONTEXT-PATH*", (SubLObject)cure_api.$str703$_ConceptSearch);
        cure_api.$cb_cure_internal_context_path$ = SubLFiles.deflexical("*CB-CURE-INTERNAL-CONTEXT-PATH*", (SubLObject)cure_api.$str704$_cure);
        cure_api.$cb_cure_internal_host_override$ = SubLFiles.defparameter("*CB-CURE-INTERNAL-HOST-OVERRIDE*", (SubLObject)cure_api.NIL);
        cure_api.$cb_cure_internal_port_override$ = SubLFiles.defparameter("*CB-CURE-INTERNAL-PORT-OVERRIDE*", (SubLObject)cure_api.NIL);
        cure_api.$cb_show_cure_link$ = SubLFiles.deflexical("*CB-SHOW-CURE-LINK*", (SubLObject)cure_api.NIL);
        cure_api.$sentence_score_caching_state$ = SubLFiles.deflexical("*SENTENCE-SCORE-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$sentence_score_for_type_caching_state$ = SubLFiles.deflexical("*SENTENCE-SCORE-FOR-TYPE-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$set_query_variable_caching_state$ = SubLFiles.deflexical("*SET-QUERY-VARIABLE-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$get_fragments_for_terms_cached_caching_state$ = SubLFiles.deflexical("*GET-FRAGMENTS-FOR-TERMS-CACHED-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$collection_via_web_searchP_caching_state$ = SubLFiles.deflexical("*COLLECTION-VIA-WEB-SEARCH?-CACHING-STATE*", (SubLObject)cure_api.NIL);
        cure_api.$get_concept_tags_from_string_caching_state$ = SubLFiles.deflexical("*GET-CONCEPT-TAGS-FROM-STRING-CACHING-STATE*", (SubLObject)cure_api.NIL);
        return (SubLObject)cure_api.NIL;
    }
    
    public static SubLObject setup_cure_api_file() {
        access_macros.register_external_symbol((SubLObject)cure_api.$sym28$TERM_LEARNER_KNOWN_MEANINGS_FOR_STRING);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym45$TERM_LEARNER_MEANINGS_FOR_TAGGED_TERM);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym70$TERM_LEARNER_ORDERED_TYPES_FOR_TAGGED_TERM);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym83$GET_TAXONOMIC_RENDERERS_FOR_TERM);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym105$TERM_LEARNER_ORDERED_TYPES_FOR_TERM_IN_DOCUMENT_STRING_MERGED_JUS);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym108$TERM_LEARNER_ORDERED_TYPES_FOR_USER_ADDED_TYPE);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym111$DEFAULT_CREATE_AS_TYPE);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym125$GET_TERM_LEARNER_RENDERER_FOR_CYCL_STRING);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym126$GET_TERM_LEARNER_RENDERER_FOR_CYCL_ID);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym127$GET_TERM_LEARNER_RENDERER_FOR_CYCL);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym130$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL_STRING);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym131$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL_ID);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym132$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym133$GET_TERM_LEARNER_STRING_RENDERER_FROM_OPEN_SELECT_RENDERER_LIST);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym163$TERM_LEARNER_ADD_LEXICAL_PHRASE);
        html_macros.note_cgi_handler_function((SubLObject)cure_api.$sym184$XML_TERM_LEARNER_USER_CHOICE, (SubLObject)cure_api.$kw185$XML_HANDLER);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym195$TERM_LEARNER_USER_CHOICE);
        html_macros.note_cgi_handler_function((SubLObject)cure_api.$sym204$XML_TERM_LEARNER_CREATE_NEW, (SubLObject)cure_api.$kw185$XML_HANDLER);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym207$CURE_ASSERT_SENTENCE);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym208$CURE_UNASSERT_SENTENCE);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym209$CREATE_NEW_CURE_TERM_AND_ASSERT_SENTENCE);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym214$TERM_LEARNER_CREATE_NEW);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym218$TERM_LEARNER_RENDERER_FOR_NEW_TAXONOMIC_RELATIVE);
        html_macros.note_cgi_handler_function((SubLObject)cure_api.$sym227$XML_TERM_LEARNER_USER_SUBSTITUTION, (SubLObject)cure_api.$kw185$XML_HANDLER);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym228$TERM_LEARNER_USER_SUBSTITUTION);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym238$TERM_LEARNER_VALID_SUBSTITUTION);
        html_macros.note_cgi_handler_function((SubLObject)cure_api.$sym242$XML_TERM_LEARNER_POSSIBLE_TYPES_FROM_SUBSTITUTION, (SubLObject)cure_api.$kw185$XML_HANDLER);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym243$TERM_LEARNER_POSSIBLE_TYPES_FROM_SUBSTITUTION);
        utilities_macros.note_funcall_helper_function((SubLObject)cure_api.$sym248$FIRST_TRUE);
        utilities_macros.note_funcall_helper_function((SubLObject)cure_api.$sym234$SECOND_TRUE);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym249$TERM_LEARNER_AUTOCOMPLETE_NATIVE);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym261$TERM_LEARNER_AUTOCOMPLETE);
        html_macros.note_cgi_handler_function((SubLObject)cure_api.$sym270$XML_TERM_LEARNER_AUTOCOMPLETE, (SubLObject)cure_api.$kw185$XML_HANDLER);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym281$GET_ALLOTTED_TASKS);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym295$TERM_LEARNER_GET_FACT_SHEET_FOR_TERM);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym299$TERM_LEARNER_GET_FACT_SHEET_UPDATES_FOR_TERM);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym323$TERM_LEARNER_FACT_STATUS);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym326$TERM_LEARNER_FACT_STATUS_INT);
        memoization_state.note_memoized_function((SubLObject)cure_api.$sym330$TERM_LEARNER_FIND_VISIBLE_ASSERTIONS_CYCL);
        html_macros.note_cgi_handler_function((SubLObject)cure_api.$sym340$XML_TERM_LEARNER_GET_FOLLOWUPS_FOR_TERM, (SubLObject)cure_api.$kw185$XML_HANDLER);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym341$TERM_LEARNER_GET_FOLLOWUPS_FOR_CYCL_TERM);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym342$TERM_LEARNER_GET_FOLLOWUPS_FOR_TERM);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym353$TERM_LEARNER_CATEGORY_LABEL);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym360$GET_FOLLOWUP_CATEGORIES_FOR_TYPE);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym366$GET_PRED_LIST_ORDER_FOR_TYPE);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym374$SUBSTITUTABLE_ARG_CONSTRAINT_FOR_RELN);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym396$CATEGORIES_AND_TYPES_FOR_SENTENCE_AND_TERM_INT_VIA_INDEXING);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym406$SUMMARY_PRED_SORT_ORDER_FOR_FOCAL_TERM);
        utilities_macros.note_funcall_helper_function((SubLObject)cure_api.$sym349$HIGHER_PRIORITY_FOLLOWUP_IN_CATEGORY);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym421$FOLLOWUP_QUERY_MT_FOR_USER);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym428$FOLLOWUP_QUERY_MT_FOR_USER_TASK);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym437$TERM_LEARNER_KNOWN_BINDINGS_FOR_SENTENCE);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym449$TERM_LEARNER_KNOWN_NEGATED_BINDINGS_FOR_SENTENCE);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym452$TERM_LEARNER_TYPES_FOR_FRAGMENT);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym469$SOURCES_OF_MT);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym475$TERM_LEARNER_CANDIDATE_HIERARCHICAL_REPLACEMENTS_FOR_SENTENCE);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym479$GET_ARG_POSITIONS_FOR_TERMS);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym495$TERM_LEARNER_TYPES_FOR_SENTENCE);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym496$TERM_LEARNER_TYPES_FOR_SENTENCE_ID);
        generic_testing.define_test_case_table_int((SubLObject)cure_api.$sym502$CURE_POSSIBLY_DUPLICATE_ARG, (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$kw503$TEST, Symbols.symbol_function((SubLObject)cure_api.EQUAL), cure_api.$kw504$OWNER, cure_api.NIL, cure_api.$kw505$CLASSES, cure_api.NIL, cure_api.$kw506$KB, cure_api.$kw507$FULL, cure_api.$kw508$WORKING_, cure_api.T }), (SubLObject)cure_api.$list509);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym526$TERM_LEARNER_HANDLE_USER_CHOICE);
        utilities_macros.note_funcall_helper_function((SubLObject)cure_api.$sym528$TRANSFORM_TO_TRUE);
        utilities_macros.note_funcall_helper_function((SubLObject)cure_api.$sym527$TERM_EXPANSION_EXPECTED_SENTENCE_);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym538$NORMALIZE_CURE_USER);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym547$DEFAULT_ASSERT_MT_FOR_USER_AND_TASK);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym575$CLEAR_MTS_FOR_USER);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym576$CLEAR_MTS_FOR_URL_USER);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym583$CYCLIST_FORT);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym603$TERM_LEARNER_TYPE_PROMPT);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym608$TERM_LEARNER_TERM_HEADER_STRING);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym612$TERM_LEARNER_ALTERNATIVE_PHRASES);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym617$DEFAULT_TASK_FOR_USER);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym618$DEFAULT_TASK_FOR_USER_INT);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym623$QUERY_MT_FOR_TASK);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym626$WFF_CHECKING_MT_FOR_TASK);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym629$QUERY_MT_FOR_USER_AND_TASK);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym632$WFF_CHECKING_MT_FOR_USER_AND_TASK);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym660$TERM_LEARNER_CONCEPT_CLOUDS);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym663$TERM_LEARNER_TERM_CONCEPT_CLOUD);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym666$TERM_LEARNER_CONCEPT_CLOUD_AS_XML);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym679$TERM_LEARNER_CLOUD_DISPLAY_NL);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym683$TERM_LEARNER_DISPLAYABLE_GENERALIZATION_);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym92$TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION_);
        kb_modification_event.register_listener_with_kb_modifications_event_dispatcher(cure_api.$term_learner_irrelevance_listener$.getGlobalValue());
        access_macros.register_external_symbol((SubLObject)cure_api.$sym692$CYCL_TERMS_TO_NL_STRINGS_QUICK);
        utilities_macros.register_html_state_variable((SubLObject)cure_api.$sym693$_CB_SHOW_FOLLOWUP_WIDGET_);
        Hashtables.sethash((SubLObject)cure_api.$kw699$CURE, cyc_file_dependencies.$cb_icon_definitions$.getGlobalValue(), (SubLObject)ConsesLow.list((SubLObject)cure_api.$str700$cure_png, (SubLObject)cure_api.NIL));
        utilities_macros.register_html_state_variable((SubLObject)cure_api.$sym705$_CB_CURE_INTERNAL_HOST_OVERRIDE_);
        utilities_macros.register_html_state_variable((SubLObject)cure_api.$sym706$_CB_CURE_INTERNAL_PORT_OVERRIDE_);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym722$SENTENCE_SCORE);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym726$SENTENCE_SCORE_FOR_TYPE);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym729$SET_QUERY_VARIABLE);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym735$GET_FRAGMENTS_FOR_TERMS_CACHED);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym768$RESTART_CONCEPT_SEARCH_DEMO_SERVER);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym774$COLLECTION_VIA_WEB_SEARCH_);
        memoization_state.note_globally_cached_function((SubLObject)cure_api.$sym783$GET_CONCEPT_TAGS_FROM_STRING);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym787$FIND_SENTENCE_FILLERS);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym791$GET_QUERIES_FOR_TERM);
        access_macros.register_external_symbol((SubLObject)cure_api.$sym792$GET_QUERIES_FROM_SENTENCES);
        generic_testing.define_test_case_table_int((SubLObject)cure_api.$sym793$TERM_LEARNER_AUTOCOMPLETE_NATIVE_WITH_CYCADMINISTRATOR, (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$kw503$TEST, cure_api.$sym794$LENGTH_, cure_api.$kw504$OWNER, cure_api.NIL, cure_api.$kw505$CLASSES, cure_api.NIL, cure_api.$kw506$KB, cure_api.$kw507$FULL, cure_api.$kw508$WORKING_, cure_api.T }), (SubLObject)cure_api.$list795);
        generic_testing.define_test_case_table_int((SubLObject)cure_api.$sym796$TERM_LEARNER_CANDIDATE_HIERARCHICAL_REPLACEMENTS_FOR_SENTENCE_INT, (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$kw503$TEST, cure_api.$sym797$VALID_HIERARCHICAL_CANDIDATES_P, cure_api.$kw504$OWNER, cure_api.NIL, cure_api.$kw505$CLASSES, cure_api.NIL, cure_api.$kw506$KB, cure_api.$kw507$FULL, cure_api.$kw508$WORKING_, cure_api.T }), (SubLObject)cure_api.$list798);
        generic_testing.define_test_case_table_int((SubLObject)cure_api.$sym799$TERM_LEARNER_TYPES_FOR_SENTENCE_ID_TEST_FN, (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$kw503$TEST, cure_api.$sym800$SOME_SELECTION_RENDERER_HAS_STRING_P, cure_api.$kw504$OWNER, cure_api.NIL, cure_api.$kw505$CLASSES, cure_api.NIL, cure_api.$kw506$KB, cure_api.$kw507$FULL, cure_api.$kw508$WORKING_, cure_api.T }), (SubLObject)cure_api.$list801);
        generic_testing.define_test_case_table_int((SubLObject)cure_api.$sym802$TERM_LEARNER_KNOWN_BINDINGS_FOR_SENTENCE_NEG, (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$kw503$TEST, cure_api.$sym803$BINDINGS_DONT_MENTION, cure_api.$kw504$OWNER, cure_api.NIL, cure_api.$kw505$CLASSES, cure_api.NIL, cure_api.$kw506$KB, cure_api.$kw507$FULL, cure_api.$kw508$WORKING_, cure_api.T }), (SubLObject)cure_api.$list804);
        generic_testing.define_test_case_table_int((SubLObject)cure_api.$sym437$TERM_LEARNER_KNOWN_BINDINGS_FOR_SENTENCE, (SubLObject)ConsesLow.list(new SubLObject[] { cure_api.$kw503$TEST, cure_api.$sym805$BINDINGS_MENTION, cure_api.$kw504$OWNER, cure_api.NIL, cure_api.$kw505$CLASSES, cure_api.NIL, cure_api.$kw506$KB, cure_api.$kw507$FULL, cure_api.$kw508$WORKING_, cure_api.T }), (SubLObject)cure_api.$list806);
        return (SubLObject)cure_api.NIL;
    }
    
    public void declareFunctions() {
        declare_cure_api_file();
    }
    
    public void initializeVariables() {
        init_cure_api_file();
    }
    
    public void runTopLevelForms() {
        setup_cure_api_file();
    }
    
    static {
        me = (SubLFile)new cure_api();
        cure_api.$term_learner_user_created_term_log_file$ = null;
        cure_api.$term_learner_user_added_types_log_file$ = null;
        cure_api.$term_learner_accepted_meanings_log_file$ = null;
        cure_api.$term_learner_use_lexical_lookup_only$ = null;
        cure_api.$current_tl_task$ = null;
        cure_api.$term_learner_default_lexical_assertion_mt$ = null;
        cure_api.$cure_edit_the_list_termsP$ = null;
        cure_api.$cure_allow_some_predicates_to_be_edited$ = null;
        cure_api.$default_create_as_type_caching_state$ = null;
        cure_api.$allow_changes_to_focal_term_on_replicate$ = null;
        cure_api.$term_learner_valid_substitution_caching_state$ = null;
        cure_api.$term_learner_unknown_status$ = null;
        cure_api.$term_learner_known_removable$ = null;
        cure_api.$term_learner_known_derived$ = null;
        cure_api.$term_learner_unknown_assertible$ = null;
        cure_api.$term_learner_impossible$ = null;
        cure_api.$term_learner_cyc_error$ = null;
        cure_api.$term_learner_downstream_error$ = null;
        cure_api.$term_learner_working$ = null;
        cure_api.$term_learner_known_not_removable$ = null;
        cure_api.$term_learner_rejected$ = null;
        cure_api.$term_learner_incomplete$ = null;
        cure_api.$term_learner_unmodifiable$ = null;
        cure_api.$term_learner_fact_status_int_caching_state$ = null;
        cure_api.$followup_query_mt$ = null;
        cure_api.$term_learner_category_label_caching_state$ = null;
        cure_api.$get_followup_categories_for_type_caching_state$ = null;
        cure_api.$get_pred_list_order_for_type_caching_state$ = null;
        cure_api.$substitutable_arg_constraint_for_reln_caching_state$ = null;
        cure_api.$categories_and_types_for_sentence_and_term_int_via_indexing_caching_state$ = null;
        cure_api.$summary_pred_sort_order_for_focal_term_caching_state$ = null;
        cure_api.$followup_query_mt_for_user_caching_state$ = null;
        cure_api.$followup_query_mt_for_userXtask_caching_state$ = null;
        cure_api.$cure_show_best_bindings$ = null;
        cure_api.$term_learner_known_bindings_for_sentence_caching_state$ = null;
        cure_api.$term_learner_known_negated_bindings_for_sentence_caching_state$ = null;
        cure_api.$term_learner_types_for_fragment_caching_state$ = null;
        cure_api.$sources_of_mt_caching_state$ = null;
        cure_api.$get_arg_positions_for_terms_caching_state$ = null;
        cure_api.$delete_me_token$ = null;
        cure_api.$term_learner_source_documentation_mt$ = null;
        cure_api.$source_spindle$ = null;
        cure_api.$source_spindle_query_mt$ = null;
        cure_api.$term_learner_default_generation_mt$ = null;
        cure_api.$normalize_cure_user_caching_state$ = null;
        cure_api.$term_learner_base_source_creation_lock$ = null;
        cure_api.$term_learner_assert_redundant_mt_info$ = null;
        cure_api.$default_assert_mt_for_user_and_task_caching_state$ = null;
        cure_api.$term_learner_sub_source_creation_lock$ = null;
        cure_api.$needs_approval$ = null;
        cure_api.$disapproved$ = null;
        cure_api.$approved$ = null;
        cure_api.$term_learner_type_prompt_caching_state$ = null;
        cure_api.$term_learner_term_header_string_caching_state$ = null;
        cure_api.$default_task_for_user_int_caching_state$ = null;
        cure_api.$query_mt_for_task_caching_state$ = null;
        cure_api.$wff_checking_mt_for_task_caching_state$ = null;
        cure_api.$query_mt_for_user_and_task_caching_state$ = null;
        cure_api.$wff_checking_mt_for_user_and_task_caching_state$ = null;
        cure_api.$term_learner_cloud_display_nl_caching_state$ = null;
        cure_api.$term_learner_displayable_generalizationP_caching_state$ = null;
        cure_api.$term_learner_possibly_relevant_generalizationP_caching_state$ = null;
        cure_api.$term_learner_irrelevance_listener$ = null;
        cure_api.$cb_show_followup_widget$ = null;
        cure_api.$cb_cure_external_host$ = null;
        cure_api.$cb_cure_external_port$ = null;
        cure_api.$cb_cure_external_context_path$ = null;
        cure_api.$cb_cure_internal_context_path$ = null;
        cure_api.$cb_cure_internal_host_override$ = null;
        cure_api.$cb_cure_internal_port_override$ = null;
        cure_api.$cb_show_cure_link$ = null;
        cure_api.$sentence_score_caching_state$ = null;
        cure_api.$sentence_score_for_type_caching_state$ = null;
        cure_api.$set_query_variable_caching_state$ = null;
        cure_api.$get_fragments_for_terms_cached_caching_state$ = null;
        cure_api.$collection_via_web_searchP_caching_state$ = null;
        cure_api.$get_concept_tags_from_string_caching_state$ = null;
        $str0$_cyc_projects_doc_annotation_logs = SubLObjectFactory.makeString("/cyc/projects/doc-annotation/logs/user-created-terms.log");
        $str1$_cyc_projects_doc_annotation_logs = SubLObjectFactory.makeString("/cyc/projects/doc-annotation/logs/user-added-types.log");
        $str2$_cyc_projects_doc_annotation_logs = SubLObjectFactory.makeString("/cyc/projects/doc-annotation/logs/accepted-meanings.log");
        $const3$EnglishMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt"));
        $list4 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeSymbol("CYCL"), SubLObjectFactory.makeSymbol("WEIGHT"), SubLObjectFactory.makeSymbol("JUSTIFICATIONS"), SubLObjectFactory.makeSymbol("FRAGMENT-JUSTIFICATION"), SubLObjectFactory.makeSymbol("NL-STRING"), SubLObjectFactory.makeSymbol("ASSERT-SENTENCE"), SubLObjectFactory.makeSymbol("STATUS-CODE"), SubLObjectFactory.makeSymbol("&KEY"), SubLObjectFactory.makeSymbol("RENDERERS"), SubLObjectFactory.makeSymbol("ORIGINAL-CYCL"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("DISPLAY"), (SubLObject)cure_api.T), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("REQUIRED"), (SubLObject)cure_api.T), SubLObjectFactory.makeSymbol("APPROVAL-CODE"), SubLObjectFactory.makeSymbol("UNASSERTIBLE-SENTENCE-IDS") });
        $list5 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("RENDERERS"), (SubLObject)SubLObjectFactory.makeKeyword("ORIGINAL-CYCL"), (SubLObject)SubLObjectFactory.makeKeyword("DISPLAY"), (SubLObject)SubLObjectFactory.makeKeyword("REQUIRED"), (SubLObject)SubLObjectFactory.makeKeyword("APPROVAL-CODE"), (SubLObject)SubLObjectFactory.makeKeyword("UNASSERTIBLE-SENTENCE-IDS"));
        $kw6$ALLOW_OTHER_KEYS = SubLObjectFactory.makeKeyword("ALLOW-OTHER-KEYS");
        $kw7$RENDERERS = SubLObjectFactory.makeKeyword("RENDERERS");
        $kw8$ORIGINAL_CYCL = SubLObjectFactory.makeKeyword("ORIGINAL-CYCL");
        $kw9$DISPLAY = SubLObjectFactory.makeKeyword("DISPLAY");
        $kw10$REQUIRED = SubLObjectFactory.makeKeyword("REQUIRED");
        $kw11$APPROVAL_CODE = SubLObjectFactory.makeKeyword("APPROVAL-CODE");
        $kw12$UNASSERTIBLE_SENTENCE_IDS = SubLObjectFactory.makeKeyword("UNASSERTIBLE-SENTENCE-IDS");
        $sym13$NEW_TERM_LEARNER_TYPE_INT = SubLObjectFactory.makeSymbol("NEW-TERM-LEARNER-TYPE-INT");
        $list14 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeSymbol("SENTENCE"), SubLObjectFactory.makeSymbol("DOMAIN-MT"), SubLObjectFactory.makeSymbol("&KEY"), SubLObjectFactory.makeSymbol("ORIGINAL-SENTENCE"), SubLObjectFactory.makeSymbol("CURRENT-BINDINGS"), SubLObjectFactory.makeSymbol("SUGGESTIONS"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("JUSTIFICATIONS"), (SubLObject)SubLObjectFactory.makeKeyword("DEFAULT")), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("FRAGMENT-JUSTIFICATION")), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("NL-MT"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CURE-DEFAULT-GENERATION-MT")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("APPROVAL-CODE"), (SubLObject)cure_api.NIL), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("DISPLAY-CYCL"), (SubLObject)cure_api.NIL), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("STATUS"), (SubLObject)cure_api.NIL), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CLARIFYING-CYCL"), (SubLObject)cure_api.NIL) });
        $list15 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("ORIGINAL-SENTENCE"), SubLObjectFactory.makeKeyword("CURRENT-BINDINGS"), SubLObjectFactory.makeKeyword("SUGGESTIONS"), SubLObjectFactory.makeKeyword("JUSTIFICATIONS"), SubLObjectFactory.makeKeyword("FRAGMENT-JUSTIFICATION"), SubLObjectFactory.makeKeyword("NL-MT"), SubLObjectFactory.makeKeyword("APPROVAL-CODE"), SubLObjectFactory.makeKeyword("DISPLAY-CYCL"), SubLObjectFactory.makeKeyword("STATUS"), SubLObjectFactory.makeKeyword("CLARIFYING-CYCL") });
        $kw16$ORIGINAL_SENTENCE = SubLObjectFactory.makeKeyword("ORIGINAL-SENTENCE");
        $kw17$CURRENT_BINDINGS = SubLObjectFactory.makeKeyword("CURRENT-BINDINGS");
        $kw18$SUGGESTIONS = SubLObjectFactory.makeKeyword("SUGGESTIONS");
        $kw19$JUSTIFICATIONS = SubLObjectFactory.makeKeyword("JUSTIFICATIONS");
        $kw20$DEFAULT = SubLObjectFactory.makeKeyword("DEFAULT");
        $kw21$FRAGMENT_JUSTIFICATION = SubLObjectFactory.makeKeyword("FRAGMENT-JUSTIFICATION");
        $kw22$NL_MT = SubLObjectFactory.makeKeyword("NL-MT");
        $list23 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CURE-DEFAULT-GENERATION-MT"));
        $kw24$DISPLAY_CYCL = SubLObjectFactory.makeKeyword("DISPLAY-CYCL");
        $kw25$STATUS = SubLObjectFactory.makeKeyword("STATUS");
        $kw26$CLARIFYING_CYCL = SubLObjectFactory.makeKeyword("CLARIFYING-CYCL");
        $sym27$TERM_LEARNER_TYPE_FOR_FRAGMENT_INT = SubLObjectFactory.makeSymbol("TERM-LEARNER-TYPE-FOR-FRAGMENT-INT");
        $sym28$TERM_LEARNER_KNOWN_MEANINGS_FOR_STRING = SubLObjectFactory.makeSymbol("TERM-LEARNER-KNOWN-MEANINGS-FOR-STRING");
        $str29$___A__entering__S__ = SubLObjectFactory.makeString("~&~A: entering ~S~%");
        $kw30$APPEND = SubLObjectFactory.makeKeyword("APPEND");
        $str31$Unable_to_open__S = SubLObjectFactory.makeString("Unable to open ~S");
        $str32$writing_to__S = SubLObjectFactory.makeString("writing to ~S");
        $sym33$LEARN = SubLObjectFactory.makeSymbol("LEARN");
        $sym34$GET = SubLObjectFactory.makeSymbol("GET");
        $kw35$IS_NER_ENTRY_ = SubLObjectFactory.makeKeyword("IS-NER-ENTRY?");
        $kw36$DENOT = SubLObjectFactory.makeKeyword("DENOT");
        $str37$no_new_creation = SubLObjectFactory.makeString("no-new-creation");
        $const38$Thing = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Thing"));
        $const39$CycAssistedDocumentReader = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CycAssistedDocumentReader"));
        $kw40$IGNORE_ERRORS_TARGET = SubLObjectFactory.makeKeyword("IGNORE-ERRORS-TARGET");
        $sym41$IGNORE_ERRORS_HANDLER = SubLObjectFactory.makeSymbol("IGNORE-ERRORS-HANDLER", "SUBLISP");
        $str42$_input_date___A___S__input___ = SubLObjectFactory.makeString("<input date='~A'>~S</input>~%");
        $str43$Currently_Unknown_to_Cyc = SubLObjectFactory.makeString("Currently Unknown to Cyc");
        $str44$vocabMarking = SubLObjectFactory.makeString("vocabMarking");
        $sym45$TERM_LEARNER_MEANINGS_FOR_TAGGED_TERM = SubLObjectFactory.makeSymbol("TERM-LEARNER-MEANINGS-FOR-TAGGED-TERM");
        $sym46$TERM_LEARNER_OBJECT_FROM_ID = SubLObjectFactory.makeSymbol("TERM-LEARNER-OBJECT-FROM-ID");
        $list47 = ConsesLow.list((SubLObject)Characters.CHAR_space);
        $const48$Individual = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Individual"));
        $const49$Collection = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Collection"));
        $str50$ = SubLObjectFactory.makeString("");
        $kw51$UPCASE = SubLObjectFactory.makeKeyword("UPCASE");
        $sym52$CONTROL_CHAR_P = SubLObjectFactory.makeSymbol("CONTROL-CHAR-P");
        $const53$inProgressTerm = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("inProgressTerm"));
        $const54$BaseKB = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"));
        $const55$isa = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa"));
        $const56$DocIngesterUserCreatedTerm = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DocIngesterUserCreatedTerm"));
        $const57$quotedIsa = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("quotedIsa"));
        $list58 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DocIngesterUserCreatedTerm")));
        $const59$termStrings = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("termStrings"));
        $const60$and = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("and"));
        $const61$ist_Asserted = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ist-Asserted"));
        $sym62$__MT = SubLObjectFactory.makeSymbol("??MT");
        $list63 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("??STRING"));
        $const64$InferencePSC = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InferencePSC"));
        $str65$___ = SubLObjectFactory.makeString("...");
        $kw66$MEANING = SubLObjectFactory.makeKeyword("MEANING");
        $kw67$STRING = SubLObjectFactory.makeKeyword("STRING");
        $sym68$DELETE_ENTRY_FROM_STRING = SubLObjectFactory.makeSymbol("DELETE-ENTRY-FROM-STRING");
        $sym69$LEARNED = SubLObjectFactory.makeSymbol("LEARNED");
        $sym70$TERM_LEARNER_ORDERED_TYPES_FOR_TAGGED_TERM = SubLObjectFactory.makeSymbol("TERM-LEARNER-ORDERED-TYPES-FOR-TAGGED-TERM");
        $list71 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("HEADER-STRING"), (SubLObject)SubLObjectFactory.makeSymbol("ALT-PHRASES"));
        $sym72$_STRING = SubLObjectFactory.makeSymbol("?STRING");
        $const73$assertedSentence = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("assertedSentence"));
        $list74 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?STRING"));
        $const75$is_Underspecified = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("is-Underspecified"));
        $const76$genls = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genls"));
        $sym77$_ = SubLObjectFactory.makeSymbol(">");
        $sym78$GET_WEIGHT = SubLObjectFactory.makeSymbol("GET-WEIGHT");
        $kw79$TYPE_PROMPT = SubLObjectFactory.makeKeyword("TYPE-PROMPT");
        $kw80$TYPE_HEADER = SubLObjectFactory.makeKeyword("TYPE-HEADER");
        $kw81$TYPE_ALT_PHRASES = SubLObjectFactory.makeKeyword("TYPE-ALT-PHRASES");
        $kw82$LEXICAL_TYPES = SubLObjectFactory.makeKeyword("LEXICAL-TYPES");
        $sym83$GET_TAXONOMIC_RENDERERS_FOR_TERM = SubLObjectFactory.makeSymbol("GET-TAXONOMIC-RENDERERS-FOR-TERM");
        $str84$specs = SubLObjectFactory.makeString("specs");
        $str85$instances = SubLObjectFactory.makeString("instances");
        $str86$superiors = SubLObjectFactory.makeString("superiors");
        $str87$genls = SubLObjectFactory.makeString("genls");
        $str88$isa = SubLObjectFactory.makeString("isa");
        $str89$Unimplemented_attempt_to_get__S_f = SubLObjectFactory.makeString("Unimplemented attempt to get ~S for ~S");
        $str90$string = SubLObjectFactory.makeString("string");
        $sym91$_EXIT = SubLObjectFactory.makeSymbol("%EXIT");
        $sym92$TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION_ = SubLObjectFactory.makeSymbol("TERM-LEARNER-POSSIBLY-RELEVANT-GENERALIZATION?");
        $sym93$GENLS_ = SubLObjectFactory.makeSymbol("GENLS?");
        $kw94$ASSERT_SENTENCE = SubLObjectFactory.makeKeyword("ASSERT-SENTENCE");
        $kw95$ASSERT_MT = SubLObjectFactory.makeKeyword("ASSERT-MT");
        $sym96$ASSERTION_IST_FORMULA = SubLObjectFactory.makeSymbol("ASSERTION-IST-FORMULA");
        $kw97$USER = SubLObjectFactory.makeKeyword("USER");
        $float98$0_9 = (SubLFloat)SubLObjectFactory.makeDouble(0.9);
        $sym99$_EXCLUDE_VULGARITIES__ = SubLObjectFactory.makeSymbol("*EXCLUDE-VULGARITIES?*");
        $list100 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*EXCLUDE-INDIRECT-RELATIONS?*"), (SubLObject)SubLObjectFactory.makeSymbol("*EXCLUDE-VULGARITIES?*"), (SubLObject)SubLObjectFactory.makeSymbol("*EXCLUDE-SLANG?*"), (SubLObject)SubLObjectFactory.makeSymbol("*EXCLUDE-ARCHAIC-SPEECH?*"));
        $sym101$_EXCLUDE_SLANG__ = SubLObjectFactory.makeSymbol("*EXCLUDE-SLANG?*");
        $sym102$_EXCLUDE_ARCHAIC_SPEECH__ = SubLObjectFactory.makeSymbol("*EXCLUDE-ARCHAIC-SPEECH?*");
        $sym103$_EXCLUDE_INDIRECT_RELATIONS__ = SubLObjectFactory.makeSymbol("*EXCLUDE-INDIRECT-RELATIONS?*");
        $sym104$SHORTER_P = SubLObjectFactory.makeSymbol("SHORTER-P");
        $sym105$TERM_LEARNER_ORDERED_TYPES_FOR_TERM_IN_DOCUMENT_STRING_MERGED_JUS = SubLObjectFactory.makeSymbol("TERM-LEARNER-ORDERED-TYPES-FOR-TERM-IN-DOCUMENT-STRING-MERGED-JUSTIFICATIONS");
        $str106$_ = SubLObjectFactory.makeString(" ");
        $str107$_ = SubLObjectFactory.makeString("~");
        $sym108$TERM_LEARNER_ORDERED_TYPES_FOR_USER_ADDED_TYPE = SubLObjectFactory.makeSymbol("TERM-LEARNER-ORDERED-TYPES-FOR-USER-ADDED-TYPE");
        $str109$_input_cyctermid___A__date___A___ = SubLObjectFactory.makeString("<input cyctermid='~A' date='~A'>~S</input>~%");
        $const110$CollectionType = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CollectionType"));
        $sym111$DEFAULT_CREATE_AS_TYPE = SubLObjectFactory.makeSymbol("DEFAULT-CREATE-AS-TYPE");
        $sym112$_PRED = SubLObjectFactory.makeSymbol("?PRED");
        $const113$defaultAutotypeSuggestionFromType = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("defaultAutotypeSuggestionFromType"));
        $list114 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?PRED"));
        $list115 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("MAX-TRANSFORMATION-DEPTH"), (SubLObject)cure_api.ONE_INTEGER);
        $sym116$_DEFAULT_CREATE_AS_TYPE_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*DEFAULT-CREATE-AS-TYPE-CACHING-STATE*");
        $kw117$CYCL = SubLObjectFactory.makeKeyword("CYCL");
        $kw118$WEIGHT = SubLObjectFactory.makeKeyword("WEIGHT");
        $kw119$CONCEPT_ID = SubLObjectFactory.makeKeyword("CONCEPT-ID");
        $kw120$NL_STRING = SubLObjectFactory.makeKeyword("NL-STRING");
        $kw121$LEGEND_STRING = SubLObjectFactory.makeKeyword("LEGEND-STRING");
        $kw122$ASSERT_SENTENCE_ID = SubLObjectFactory.makeKeyword("ASSERT-SENTENCE-ID");
        $kw123$STATUS_CODE = SubLObjectFactory.makeKeyword("STATUS-CODE");
        $kw124$REPLICATION_SENTENCE_ID = SubLObjectFactory.makeKeyword("REPLICATION-SENTENCE-ID");
        $sym125$GET_TERM_LEARNER_RENDERER_FOR_CYCL_STRING = SubLObjectFactory.makeSymbol("GET-TERM-LEARNER-RENDERER-FOR-CYCL-STRING");
        $sym126$GET_TERM_LEARNER_RENDERER_FOR_CYCL_ID = SubLObjectFactory.makeSymbol("GET-TERM-LEARNER-RENDERER-FOR-CYCL-ID");
        $sym127$GET_TERM_LEARNER_RENDERER_FOR_CYCL = SubLObjectFactory.makeSymbol("GET-TERM-LEARNER-RENDERER-FOR-CYCL");
        $list128 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("GENLS"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CYCL"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Thing")))));
        $list129 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ISA"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CYCL"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Individual")))));
        $sym130$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL_STRING = SubLObjectFactory.makeSymbol("GET-TERM-LEARNER-STRING-RENDERER-FOR-CYCL-STRING");
        $sym131$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL_ID = SubLObjectFactory.makeSymbol("GET-TERM-LEARNER-STRING-RENDERER-FOR-CYCL-ID");
        $sym132$GET_TERM_LEARNER_STRING_RENDERER_FOR_CYCL = SubLObjectFactory.makeSymbol("GET-TERM-LEARNER-STRING-RENDERER-FOR-CYCL");
        $sym133$GET_TERM_LEARNER_STRING_RENDERER_FROM_OPEN_SELECT_RENDERER_LIST = SubLObjectFactory.makeSymbol("GET-TERM-LEARNER-STRING-RENDERER-FROM-OPEN-SELECT-RENDERER-LIST");
        $kw134$RENDERER_TYPE = SubLObjectFactory.makeKeyword("RENDERER-TYPE");
        $kw135$OPEN_SELECT_RENDERER = SubLObjectFactory.makeKeyword("OPEN-SELECT-RENDERER");
        $kw136$INITIALLY_SELECTED = SubLObjectFactory.makeKeyword("INITIALLY-SELECTED");
        $kw137$SELECTION_RENDERERS = SubLObjectFactory.makeKeyword("SELECTION-RENDERERS");
        $kw138$STRING_RENDERER = SubLObjectFactory.makeKeyword("STRING-RENDERER");
        $kw139$DISPLAY_LINK = SubLObjectFactory.makeKeyword("DISPLAY-LINK");
        $kw140$PPH_EMPTY_CYCL = SubLObjectFactory.makeKeyword("PPH-EMPTY-CYCL");
        $kw141$GENLS = SubLObjectFactory.makeKeyword("GENLS");
        $kw142$GENLS_CONSTRAINTS = SubLObjectFactory.makeKeyword("GENLS-CONSTRAINTS");
        $kw143$ISA = SubLObjectFactory.makeKeyword("ISA");
        $kw144$ISA_CONSTRAINTS = SubLObjectFactory.makeKeyword("ISA-CONSTRAINTS");
        $kw145$MODIFIABLE_STRING_RENDERER = SubLObjectFactory.makeKeyword("MODIFIABLE-STRING-RENDERER");
        $kw146$ARG_POS = SubLObjectFactory.makeKeyword("ARG-POS");
        $kw147$MODIFIABLE_TEXT_RENDERER = SubLObjectFactory.makeKeyword("MODIFIABLE-TEXT-RENDERER");
        $str148$Some_other_ = SubLObjectFactory.makeString("Some other ");
        $str149$Something_else = SubLObjectFactory.makeString("Something else");
        $list150 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALID"), (SubLObject)cure_api.T, (SubLObject)SubLObjectFactory.makeKeyword("CYCL"), (SubLObject)SubLObjectFactory.makeString("newValue"), (SubLObject)SubLObjectFactory.makeKeyword("CYCL-ID"), (SubLObject)SubLObjectFactory.makeString("newValue"));
        $kw151$CONSTRAINT_STRING = SubLObjectFactory.makeKeyword("CONSTRAINT-STRING");
        $kw152$ALLOW_DUPLICATION = SubLObjectFactory.makeKeyword("ALLOW-DUPLICATION");
        $sym153$_ = SubLObjectFactory.makeSymbol("<");
        $sym154$GENERALITY_ESTIMATE = SubLObjectFactory.makeSymbol("GENERALITY-ESTIMATE");
        $sym155$THCL_FORT_ = SubLObjectFactory.makeSymbol("THCL-FORT?");
        $list156 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nonPlural-Generic")));
        $kw157$TEXT_MATCHES = SubLObjectFactory.makeKeyword("TEXT-MATCHES");
        $list158 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("NL"), (SubLObject)SubLObjectFactory.makeSymbol("CYCL"), (SubLObject)SubLObjectFactory.makeSymbol("VALID"));
        $kw159$VALID = SubLObjectFactory.makeKeyword("VALID");
        $str160$newValue = SubLObjectFactory.makeString("newValue");
        $kw161$CYCL_ID = SubLObjectFactory.makeKeyword("CYCL-ID");
        $kw162$JUSTIFICATION = SubLObjectFactory.makeKeyword("JUSTIFICATION");
        $sym163$TERM_LEARNER_ADD_LEXICAL_PHRASE = SubLObjectFactory.makeSymbol("TERM-LEARNER-ADD-LEXICAL-PHRASE");
        $str164$userAction = SubLObjectFactory.makeString("userAction");
        $str165$termString = SubLObjectFactory.makeString("termString");
        $str166$choiceid = SubLObjectFactory.makeString("choiceid");
        $str167$justifications = SubLObjectFactory.makeString("justifications");
        $str168$sentenceId = SubLObjectFactory.makeString("sentenceId");
        $str169$termId = SubLObjectFactory.makeString("termId");
        $str170$title = SubLObjectFactory.makeString("title");
        $str171$url = SubLObjectFactory.makeString("url");
        $str172$code = SubLObjectFactory.makeString("code");
        $kw173$SENTENCE_ID = SubLObjectFactory.makeKeyword("SENTENCE-ID");
        $kw174$NEW_SENTENCE_ID = SubLObjectFactory.makeKeyword("NEW-SENTENCE-ID");
        $str175$newSentenceId = SubLObjectFactory.makeString("newSentenceId");
        $str176$status = SubLObjectFactory.makeString("status");
        $kw177$UNINITIALIZED = SubLObjectFactory.makeKeyword("UNINITIALIZED");
        $kw178$NEW_CYCL = SubLObjectFactory.makeKeyword("NEW-CYCL");
        $str179$newCycLSentenceHLIDString = SubLObjectFactory.makeString("newCycLSentenceHLIDString");
        $kw180$NEW_CYCL_HL_ID = SubLObjectFactory.makeKeyword("NEW-CYCL-HL-ID");
        $str181$newCycLSentenceDisplayString = SubLObjectFactory.makeString("newCycLSentenceDisplayString");
        $str182$newNLSentence = SubLObjectFactory.makeString("newNLSentence");
        $str183$justification = SubLObjectFactory.makeString("justification");
        $sym184$XML_TERM_LEARNER_USER_CHOICE = SubLObjectFactory.makeSymbol("XML-TERM-LEARNER-USER-CHOICE");
        $kw185$XML_HANDLER = SubLObjectFactory.makeKeyword("XML-HANDLER");
        $list186 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("KEY"), (SubLObject)SubLObjectFactory.makeSymbol("VALUE"));
        $str187$cyclarg = SubLObjectFactory.makeString("cyclarg");
        $str188$stringarg = SubLObjectFactory.makeString("stringarg");
        $str189$assert = SubLObjectFactory.makeString("assert");
        $kw190$ASSERT = SubLObjectFactory.makeKeyword("ASSERT");
        $str191$replace = SubLObjectFactory.makeString("replace");
        $kw192$REPLACE = SubLObjectFactory.makeKeyword("REPLACE");
        $str193$unassert = SubLObjectFactory.makeString("unassert");
        $kw194$UNASSERT = SubLObjectFactory.makeKeyword("UNASSERT");
        $sym195$TERM_LEARNER_USER_CHOICE = SubLObjectFactory.makeSymbol("TERM-LEARNER-USER-CHOICE");
        $kw196$REJECT = SubLObjectFactory.makeKeyword("REJECT");
        $list197 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("REPLACE"), (SubLObject)SubLObjectFactory.makeKeyword("ASSERT"));
        $list198 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("ARGPOS-STRING"), (SubLObject)SubLObjectFactory.makeSymbol("RAW-NEW-VALUE"), (SubLObject)SubLObjectFactory.makeSymbol("TYPE"));
        $kw199$ACCEPT = SubLObjectFactory.makeKeyword("ACCEPT");
        $kw200$NEW_NL_SENTENCE = SubLObjectFactory.makeKeyword("NEW-NL-SENTENCE");
        $kw201$NEW_CYCL_SENTENCE_STRING = SubLObjectFactory.makeKeyword("NEW-CYCL-SENTENCE-STRING");
        $str202$argpos = SubLObjectFactory.makeString("argpos");
        $str203$sentence = SubLObjectFactory.makeString("sentence");
        $sym204$XML_TERM_LEARNER_CREATE_NEW = SubLObjectFactory.makeSymbol("XML-TERM-LEARNER-CREATE-NEW");
        $sym205$LISTP = SubLObjectFactory.makeSymbol("LISTP");
        $sym206$_X88928381ASDF = SubLObjectFactory.makeSymbol("?X88928381ASDF");
        $sym207$CURE_ASSERT_SENTENCE = SubLObjectFactory.makeSymbol("CURE-ASSERT-SENTENCE");
        $sym208$CURE_UNASSERT_SENTENCE = SubLObjectFactory.makeSymbol("CURE-UNASSERT-SENTENCE");
        $sym209$CREATE_NEW_CURE_TERM_AND_ASSERT_SENTENCE = SubLObjectFactory.makeSymbol("CREATE-NEW-CURE-TERM-AND-ASSERT-SENTENCE");
        $const210$termDependsOn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("termDependsOn"));
        $const211$UniversalVocabularyMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("UniversalVocabularyMt"));
        $kw212$NL = SubLObjectFactory.makeKeyword("NL");
        $kw213$HL_ID = SubLObjectFactory.makeKeyword("HL-ID");
        $sym214$TERM_LEARNER_CREATE_NEW = SubLObjectFactory.makeSymbol("TERM-LEARNER-CREATE-NEW");
        $sym215$HTML_URL_DECODE = SubLObjectFactory.makeSymbol("HTML-URL-DECODE");
        $sym216$GET_BASE_SENTENCE_FROM_SENTENCE_STRING = SubLObjectFactory.makeSymbol("GET-BASE-SENTENCE-FROM-SENTENCE-STRING");
        $kw217$NEW_TERM = SubLObjectFactory.makeKeyword("NEW-TERM");
        $sym218$TERM_LEARNER_RENDERER_FOR_NEW_TAXONOMIC_RELATIVE = SubLObjectFactory.makeSymbol("TERM-LEARNER-RENDERER-FOR-NEW-TAXONOMIC-RELATIVE");
        $str219$spec = SubLObjectFactory.makeString("spec");
        $str220$instance = SubLObjectFactory.makeString("instance");
        $kw221$INVALID = SubLObjectFactory.makeKeyword("INVALID");
        $sym222$FIND_BY_ID_STRING_P = SubLObjectFactory.makeSymbol("FIND-BY-ID-STRING-P");
        $sym223$DECODE_ID_STRING = SubLObjectFactory.makeSymbol("DECODE-ID-STRING");
        $sym224$MAYBE_FIND_OBJECT_BY_COMPACT_HL_EXTERNAL_ID_STRING = SubLObjectFactory.makeSymbol("MAYBE-FIND-OBJECT-BY-COMPACT-HL-EXTERNAL-ID-STRING");
        $str225$argPos = SubLObjectFactory.makeString("argPos");
        $str226$limit = SubLObjectFactory.makeString("limit");
        $sym227$XML_TERM_LEARNER_USER_SUBSTITUTION = SubLObjectFactory.makeSymbol("XML-TERM-LEARNER-USER-SUBSTITUTION");
        $sym228$TERM_LEARNER_USER_SUBSTITUTION = SubLObjectFactory.makeSymbol("TERM-LEARNER-USER-SUBSTITUTION");
        $str229$100 = SubLObjectFactory.makeString("100");
        $str230$_ = SubLObjectFactory.makeString("+");
        $sym231$_THIS_QUERY_VAR = SubLObjectFactory.makeSymbol("?THIS-QUERY-VAR");
        $const232$String = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("String"));
        $sym233$NUMBERP = SubLObjectFactory.makeSymbol("NUMBERP");
        $sym234$SECOND_TRUE = SubLObjectFactory.makeSymbol("SECOND-TRUE");
        $sym235$THIRD = SubLObjectFactory.makeSymbol("THIRD");
        $list236 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CYCL"), (SubLObject)SubLObjectFactory.makeSymbol("NL"));
        $str237$Timeout_attempting_to_call_SCG_on = SubLObjectFactory.makeString("Timeout attempting to call SCG on ~S");
        $sym238$TERM_LEARNER_VALID_SUBSTITUTION = SubLObjectFactory.makeSymbol("TERM-LEARNER-VALID-SUBSTITUTION");
        $sym239$_TERM_LEARNER_VALID_SUBSTITUTION_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*TERM-LEARNER-VALID-SUBSTITUTION-CACHING-STATE*");
        $sym240$CLEAR_TERM_LEARNER_VALID_SUBSTITUTION = SubLObjectFactory.makeSymbol("CLEAR-TERM-LEARNER-VALID-SUBSTITUTION");
        $sym241$LENGTH = SubLObjectFactory.makeSymbol("LENGTH");
        $sym242$XML_TERM_LEARNER_POSSIBLE_TYPES_FROM_SUBSTITUTION = SubLObjectFactory.makeSymbol("XML-TERM-LEARNER-POSSIBLE-TYPES-FROM-SUBSTITUTION");
        $sym243$TERM_LEARNER_POSSIBLE_TYPES_FROM_SUBSTITUTION = SubLObjectFactory.makeSymbol("TERM-LEARNER-POSSIBLE-TYPES-FROM-SUBSTITUTION");
        $sym244$RKF_STANDARD_STRING_WORDIFY = SubLObjectFactory.makeSymbol("RKF-STANDARD-STRING-WORDIFY");
        $kw245$LEXICON = SubLObjectFactory.makeKeyword("LEXICON");
        $kw246$OUTPUT_SPEC = SubLObjectFactory.makeKeyword("OUTPUT-SPEC");
        $list247 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CYCL"), (SubLObject)SubLObjectFactory.makeKeyword("T"), (SubLObject)SubLObjectFactory.makeKeyword("INFLECTIONS"), (SubLObject)cure_api.T);
        $sym248$FIRST_TRUE = SubLObjectFactory.makeSymbol("FIRST-TRUE");
        $sym249$TERM_LEARNER_AUTOCOMPLETE_NATIVE = SubLObjectFactory.makeSymbol("TERM-LEARNER-AUTOCOMPLETE-NATIVE");
        $list250 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("PREFIX"), (SubLObject)SubLObjectFactory.makeSymbol("&KEY"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("LIMIT"), (SubLObject)cure_api.TWENTY_INTEGER), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("RETURN-ATTRS"), (SubLObject)SubLObjectFactory.makeString("")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("SENTENCE"), (SubLObject)cure_api.NIL), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("ARG-POS"), (SubLObject)cure_api.ZERO_INTEGER), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CASE-SENSITIVE"), (SubLObject)cure_api.NIL), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CONSTANTS"), (SubLObject)cure_api.NIL));
        $list251 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("LIMIT"), (SubLObject)SubLObjectFactory.makeKeyword("RETURN-ATTRS"), (SubLObject)SubLObjectFactory.makeKeyword("SENTENCE"), (SubLObject)SubLObjectFactory.makeKeyword("ARG-POS"), (SubLObject)SubLObjectFactory.makeKeyword("CASE-SENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("CONSTANTS"));
        $kw252$LIMIT = SubLObjectFactory.makeKeyword("LIMIT");
        $kw253$RETURN_ATTRS = SubLObjectFactory.makeKeyword("RETURN-ATTRS");
        $kw254$SENTENCE = SubLObjectFactory.makeKeyword("SENTENCE");
        $kw255$CASE_SENSITIVE = SubLObjectFactory.makeKeyword("CASE-SENSITIVE");
        $kw256$CONSTANTS = SubLObjectFactory.makeKeyword("CONSTANTS");
        $sym257$TERM_LEARNER_AUTOCOMPLETE_INT = SubLObjectFactory.makeSymbol("TERM-LEARNER-AUTOCOMPLETE-INT");
        $sym258$TO_STRING = SubLObjectFactory.makeSymbol("TO-STRING");
        $sym259$COMPACT_HL_EXTERNAL_ID_STRING = SubLObjectFactory.makeSymbol("COMPACT-HL-EXTERNAL-ID-STRING");
        $list260 = ConsesLow.list((SubLObject)cure_api.T);
        $sym261$TERM_LEARNER_AUTOCOMPLETE = SubLObjectFactory.makeSymbol("TERM-LEARNER-AUTOCOMPLETE");
        $list262 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("PREFIX"), (SubLObject)SubLObjectFactory.makeSymbol("&KEY"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("LIMIT"), (SubLObject)SubLObjectFactory.makeString("20")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("RETURN-ATTRS"), (SubLObject)SubLObjectFactory.makeString("")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("SENTENCE-ID"), (SubLObject)SubLObjectFactory.makeString("Mww")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("ARG-POS"), (SubLObject)SubLObjectFactory.makeString("")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CASE-SENSITIVE"), (SubLObject)SubLObjectFactory.makeString("nil")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CONSTANTS"), (SubLObject)SubLObjectFactory.makeString("nil")));
        $list263 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("LIMIT"), (SubLObject)SubLObjectFactory.makeKeyword("RETURN-ATTRS"), (SubLObject)SubLObjectFactory.makeKeyword("SENTENCE-ID"), (SubLObject)SubLObjectFactory.makeKeyword("ARG-POS"), (SubLObject)SubLObjectFactory.makeKeyword("CASE-SENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("CONSTANTS"));
        $str264$20 = SubLObjectFactory.makeString("20");
        $str265$Mww = SubLObjectFactory.makeString("Mww");
        $str266$nil = SubLObjectFactory.makeString("nil");
        $list267 = ConsesLow.list((SubLObject)cure_api.NIL);
        $str268$prefix = SubLObjectFactory.makeString("prefix");
        $str269$count = SubLObjectFactory.makeString("count");
        $sym270$XML_TERM_LEARNER_AUTOCOMPLETE = SubLObjectFactory.makeSymbol("XML-TERM-LEARNER-AUTOCOMPLETE");
        $list271 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CYCL"), (SubLObject)SubLObjectFactory.makeKeyword("NL"), (SubLObject)SubLObjectFactory.makeKeyword("HL-ID"), (SubLObject)SubLObjectFactory.makeKeyword("DISAMBIG-STRING"));
        $sym272$RELEVANT_MT_IS_EVERYTHING = SubLObjectFactory.makeSymbol("RELEVANT-MT-IS-EVERYTHING");
        $const273$EverythingPSC = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EverythingPSC"));
        $kw274$ISA_FILTER = SubLObjectFactory.makeKeyword("ISA-FILTER");
        $kw275$GENLS_FILTER = SubLObjectFactory.makeKeyword("GENLS-FILTER");
        $kw276$ISA_RESTRICTIONS = SubLObjectFactory.makeKeyword("ISA-RESTRICTIONS");
        $kw277$GENLS_RESTRICTIONS = SubLObjectFactory.makeKeyword("GENLS-RESTRICTIONS");
        $kw278$TIMEOUT = SubLObjectFactory.makeKeyword("TIMEOUT");
        $kw279$CASE_SENSITIVE_ = SubLObjectFactory.makeKeyword("CASE-SENSITIVE?");
        $kw280$COMPLETE_ON_CONSTANTS_ = SubLObjectFactory.makeKeyword("COMPLETE-ON-CONSTANTS?");
        $sym281$GET_ALLOTTED_TASKS = SubLObjectFactory.makeSymbol("GET-ALLOTTED-TASKS");
        $sym282$_X = SubLObjectFactory.makeSymbol("?X");
        $list283 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeSymbol("?X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CAEAnalysisTask")));
        $const284$or = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("or"));
        $const285$thereExists = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("thereExists"));
        $sym286$_CURRENT_TASK = SubLObjectFactory.makeSymbol("?CURRENT-TASK");
        $list287 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("allottedAgents")), (SubLObject)SubLObjectFactory.makeSymbol("?X"), (SubLObject)SubLObjectFactory.makeSymbol("?MONAD-USER"));
        $const288$cureUserModel = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("cureUserModel"));
        $sym289$_MONAD_USER = SubLObjectFactory.makeSymbol("?MONAD-USER");
        $const290$allottedAgents = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("allottedAgents"));
        $const291$AnalystDatabaseMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AnalystDatabaseMt"));
        $list292 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("DISJUNCTION-FREE-EL-VARS-POLICY"), (SubLObject)SubLObjectFactory.makeKeyword("COMPUTE-INTERSECTION"));
        $const293$MtUnionFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn"));
        $list294 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AnalystDatabaseMt")));
        $sym295$TERM_LEARNER_GET_FACT_SHEET_FOR_TERM = SubLObjectFactory.makeSymbol("TERM-LEARNER-GET-FACT-SHEET-FOR-TERM");
        $str296$_html__body_No_known_facts__body_ = SubLObjectFactory.makeString("<html><body>No known facts</body></html>");
        $kw297$NORMAL = SubLObjectFactory.makeKeyword("NORMAL");
        $str298$_ = SubLObjectFactory.makeString(">");
        $sym299$TERM_LEARNER_GET_FACT_SHEET_UPDATES_FOR_TERM = SubLObjectFactory.makeSymbol("TERM-LEARNER-GET-FACT-SHEET-UPDATES-FOR-TERM");
        $list300 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("INCLUDE-SECTIONS"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Recently Added")), (SubLObject)SubLObjectFactory.makeKeyword("SHOW-COPYRIGHT?"), (SubLObject)cure_api.NIL);
        $list301 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("PRINT-STATS?"), (SubLObject)cure_api.NIL, (SubLObject)SubLObjectFactory.makeKeyword("EXTERNAL-STYLES"), (SubLObject)cure_api.T, (SubLObject)SubLObjectFactory.makeKeyword("STYLESHEET"), (SubLObject)SubLObjectFactory.makeString(""));
        $kw302$SLOT_VALUE_PREFERENCE_PATTERN = SubLObjectFactory.makeKeyword("SLOT-VALUE-PREFERENCE-PATTERN");
        $kw303$NOT = SubLObjectFactory.makeKeyword("NOT");
        $kw304$OR = SubLObjectFactory.makeKeyword("OR");
        $str305$Fact_sheet_properties___S = SubLObjectFactory.makeString("Fact-sheet properties: ~S");
        $str306$preferSlotValueFormatForTermLearn = SubLObjectFactory.makeString("preferSlotValueFormatForTermLearnerFactSheets");
        $kw307$ALLOW_ABNORMALITY_CHECKING_ = SubLObjectFactory.makeKeyword("ALLOW-ABNORMALITY-CHECKING?");
        $kw308$MAX_PROBLEM_COUNT = SubLObjectFactory.makeKeyword("MAX-PROBLEM-COUNT");
        $int309$1000 = SubLObjectFactory.makeInteger(1000);
        $kw310$EVALUATE_SUBL_ALLOWED_ = SubLObjectFactory.makeKeyword("EVALUATE-SUBL-ALLOWED?");
        $kw311$NEW_TERMS_ALLOWED_ = SubLObjectFactory.makeKeyword("NEW-TERMS-ALLOWED?");
        $kw312$COMPUTE_ANSWER_JUSTIFICATIONS_ = SubLObjectFactory.makeKeyword("COMPUTE-ANSWER-JUSTIFICATIONS?");
        $kw313$MAX_NUMBER = SubLObjectFactory.makeKeyword("MAX-NUMBER");
        $kw314$MAX_TRANSFORMATION_DEPTH = SubLObjectFactory.makeKeyword("MAX-TRANSFORMATION-DEPTH");
        $kw315$MAX_PROOF_DEPTH = SubLObjectFactory.makeKeyword("MAX-PROOF-DEPTH");
        $kw316$CONTINUABLE_ = SubLObjectFactory.makeKeyword("CONTINUABLE?");
        $kw317$PRODUCTIVITY_LIMIT = SubLObjectFactory.makeKeyword("PRODUCTIVITY-LIMIT");
        $int318$100 = SubLObjectFactory.makeInteger(100);
        $str319$forbidSlotValueFormatForTermLearn = SubLObjectFactory.makeString("forbidSlotValueFormatForTermLearnerFactSheets");
        $kw320$ANSWER_LANGUAGE = SubLObjectFactory.makeKeyword("ANSWER-LANGUAGE");
        $kw321$HL = SubLObjectFactory.makeKeyword("HL");
        $list322 = ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Collection"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Individual"))), (SubLObject)cure_api.NIL);
        $sym323$TERM_LEARNER_FACT_STATUS = SubLObjectFactory.makeSymbol("TERM-LEARNER-FACT-STATUS");
        $kw324$TERM = SubLObjectFactory.makeKeyword("TERM");
        $str325$null = SubLObjectFactory.makeString("null");
        $sym326$TERM_LEARNER_FACT_STATUS_INT = SubLObjectFactory.makeSymbol("TERM-LEARNER-FACT-STATUS-INT");
        $str327$Derived_from_other_assertions = SubLObjectFactory.makeString("Derived from other assertions");
        $sym328$_TERM_LEARNER_FACT_STATUS_INT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*TERM-LEARNER-FACT-STATUS-INT-CACHING-STATE*");
        $sym329$CLEAR_TERM_LEARNER_FACT_STATUS_INT = SubLObjectFactory.makeSymbol("CLEAR-TERM-LEARNER-FACT-STATUS-INT");
        $sym330$TERM_LEARNER_FIND_VISIBLE_ASSERTIONS_CYCL = SubLObjectFactory.makeSymbol("TERM-LEARNER-FIND-VISIBLE-ASSERTIONS-CYCL");
        $list331 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DocumentReaderFollowupSuggestionMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CurrentWorldDataCollectorMt-NonHomocentric")));
        $str332$conceptId = SubLObjectFactory.makeString("conceptId");
        $str333$max = SubLObjectFactory.makeString("max");
        $str334$questionsOnly = SubLObjectFactory.makeString("questionsOnly");
        $str335$true = SubLObjectFactory.makeString("true");
        $str336$unknownOnly = SubLObjectFactory.makeString("unknownOnly");
        $str337$user = SubLObjectFactory.makeString("user");
        $const338$CycAdministrator = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CycAdministrator"));
        $str339$ignoreList = SubLObjectFactory.makeString("ignoreList");
        $sym340$XML_TERM_LEARNER_GET_FOLLOWUPS_FOR_TERM = SubLObjectFactory.makeSymbol("XML-TERM-LEARNER-GET-FOLLOWUPS-FOR-TERM");
        $sym341$TERM_LEARNER_GET_FOLLOWUPS_FOR_CYCL_TERM = SubLObjectFactory.makeSymbol("TERM-LEARNER-GET-FOLLOWUPS-FOR-CYCL-TERM");
        $sym342$TERM_LEARNER_GET_FOLLOWUPS_FOR_TERM = SubLObjectFactory.makeSymbol("TERM-LEARNER-GET-FOLLOWUPS-FOR-TERM");
        $kw343$UNCATEGORIZED = SubLObjectFactory.makeKeyword("UNCATEGORIZED");
        $kw344$TYPES = SubLObjectFactory.makeKeyword("TYPES");
        $kw345$BLANKS = SubLObjectFactory.makeKeyword("BLANKS");
        $sym346$EQUALS_EL_ = SubLObjectFactory.makeSymbol("EQUALS-EL?");
        $kw347$CATEGORY_INFO = SubLObjectFactory.makeKeyword("CATEGORY-INFO");
        $list348 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("CATEGORY-PRED"), (SubLObject)SubLObjectFactory.makeSymbol("CATEGORY-FOLLOWUPS"));
        $sym349$HIGHER_PRIORITY_FOLLOWUP_IN_CATEGORY = SubLObjectFactory.makeSymbol("HIGHER-PRIORITY-FOLLOWUP-IN-CATEGORY");
        $kw350$CATEGORY = SubLObjectFactory.makeKeyword("CATEGORY");
        $kw351$CATEGORY_NL = SubLObjectFactory.makeKeyword("CATEGORY-NL");
        $const352$EnglishParaphraseMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt"));
        $sym353$TERM_LEARNER_CATEGORY_LABEL = SubLObjectFactory.makeSymbol("TERM-LEARNER-CATEGORY-LABEL");
        $str354$Advanced_Info = SubLObjectFactory.makeString("Advanced Info");
        $const355$termSummaryPredicateLabel = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("termSummaryPredicateLabel"));
        $kw356$GAF = SubLObjectFactory.makeKeyword("GAF");
        $const357$genStringAssertion = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genStringAssertion"));
        $sym358$_TERM_LEARNER_CATEGORY_LABEL_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*TERM-LEARNER-CATEGORY-LABEL-CACHING-STATE*");
        $sym359$CLEAR_TERM_LEARNER_CATEGORY_LABEL = SubLObjectFactory.makeSymbol("CLEAR-TERM-LEARNER-CATEGORY-LABEL");
        $sym360$GET_FOLLOWUP_CATEGORIES_FOR_TYPE = SubLObjectFactory.makeSymbol("GET-FOLLOWUP-CATEGORIES-FOR-TYPE");
        $sym361$_CAT = SubLObjectFactory.makeSymbol("?CAT");
        $const362$subtopicCollectionForCategory = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subtopicCollectionForCategory"));
        $sym363$_GET_FOLLOWUP_CATEGORIES_FOR_TYPE_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-FOLLOWUP-CATEGORIES-FOR-TYPE-CACHING-STATE*");
        $int364$1024 = SubLObjectFactory.makeInteger(1024);
        $sym365$CLEAR_GET_FOLLOWUP_CATEGORIES_FOR_TYPE = SubLObjectFactory.makeSymbol("CLEAR-GET-FOLLOWUP-CATEGORIES-FOR-TYPE");
        $sym366$GET_PRED_LIST_ORDER_FOR_TYPE = SubLObjectFactory.makeSymbol("GET-PRED-LIST-ORDER-FOR-TYPE");
        $sym367$_PRED_LIST = SubLObjectFactory.makeSymbol("?PRED-LIST");
        $const368$summaryPredicateWRTSetOrCollectio = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("summaryPredicateWRTSetOrCollection-RecommendedOrdering"));
        $list369 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?PRED-LIST"));
        $sym370$_GET_PRED_LIST_ORDER_FOR_TYPE_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-PRED-LIST-ORDER-FOR-TYPE-CACHING-STATE*");
        $sym371$CLEAR_GET_PRED_LIST_ORDER_FOR_TYPE = SubLObjectFactory.makeSymbol("CLEAR-GET-PRED-LIST-ORDER-FOR-TYPE");
        $const372$not = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("not"));
        $sym373$EL_VARIABLE_P = SubLObjectFactory.makeSymbol("EL-VARIABLE-P");
        $sym374$SUBSTITUTABLE_ARG_CONSTRAINT_FOR_RELN = SubLObjectFactory.makeSymbol("SUBSTITUTABLE-ARG-CONSTRAINT-FOR-RELN");
        $sym375$_COL = SubLObjectFactory.makeSymbol("?COL");
        $const376$argGenl = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("argGenl"));
        $list377 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?COL"));
        $sym378$_SUBSTITUTABLE_ARG_CONSTRAINT_FOR_RELN_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*SUBSTITUTABLE-ARG-CONSTRAINT-FOR-RELN-CACHING-STATE*");
        $int379$256 = SubLObjectFactory.makeInteger(256);
        $sym380$CLEAR_SUBSTITUTABLE_ARG_CONSTRAINT_FOR_RELN = SubLObjectFactory.makeSymbol("CLEAR-SUBSTITUTABLE-ARG-CONSTRAINT-FOR-RELN");
        $list381 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?SUMM-PRED"), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL"));
        $sym382$_N = SubLObjectFactory.makeSymbol("?N");
        $const383$equalSymbols = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("equalSymbols"));
        $sym384$_TERM = SubLObjectFactory.makeSymbol("?TERM");
        $const385$argN = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("argN"));
        $sym386$_SENTENCE_PRED = SubLObjectFactory.makeSymbol("?SENTENCE-PRED");
        $list387 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genlPreds")), (SubLObject)SubLObjectFactory.makeSymbol("?SENTENCE-PRED"), (SubLObject)SubLObjectFactory.makeSymbol("?PRED"));
        $list388 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("and")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("specPredsRelevantToTermSummaryPredWRTInstancesInArg")), (SubLObject)SubLObjectFactory.makeSymbol("?PRED"), (SubLObject)SubLObjectFactory.makeSymbol("?SUMM-PRED"), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL"), (SubLObject)SubLObjectFactory.makeSymbol("?N")));
        $list389 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("and")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genls")), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("specPredsRelevantToTermSummaryPredWRTSpecsInArg")), (SubLObject)SubLObjectFactory.makeSymbol("?PRED"), (SubLObject)SubLObjectFactory.makeSymbol("?SUMM-PRED"), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL"), (SubLObject)SubLObjectFactory.makeSymbol("?N")));
        $list390 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("and")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("predRelevantToTermSummaryPredWRTInstancesInArg")), (SubLObject)SubLObjectFactory.makeSymbol("?SENTENCE-PRED"), (SubLObject)SubLObjectFactory.makeSymbol("?SUMM-PRED"), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL"), (SubLObject)SubLObjectFactory.makeSymbol("?N")));
        $list391 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("and")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genls")), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("predRelevantToTermSummaryPredWRTSpecsInArg")), (SubLObject)SubLObjectFactory.makeSymbol("?SENTENCE-PRED"), (SubLObject)SubLObjectFactory.makeSymbol("?SUMM-PRED"), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL"), (SubLObject)SubLObjectFactory.makeSymbol("?N")));
        $list392 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL"));
        $list393 = ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("assertedPredRelevantToTermSummaryPredWRTInstancesInArg")), (SubLObject)SubLObjectFactory.makeSymbol("?SENTENCE-PRED"), (SubLObject)SubLObjectFactory.makeSymbol("?SUMM-PRED"), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL"), (SubLObject)SubLObjectFactory.makeSymbol("?N")));
        $list394 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genls")), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL"));
        $list395 = ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("assertedPredRelevantToTermSummaryPredWRTSpecsInArg")), (SubLObject)SubLObjectFactory.makeSymbol("?SENTENCE-PRED"), (SubLObject)SubLObjectFactory.makeSymbol("?SUMM-PRED"), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL"), (SubLObject)SubLObjectFactory.makeSymbol("?N")));
        $sym396$CATEGORIES_AND_TYPES_FOR_SENTENCE_AND_TERM_INT_VIA_INDEXING = SubLObjectFactory.makeSymbol("CATEGORIES-AND-TYPES-FOR-SENTENCE-AND-TERM-INT-VIA-INDEXING");
        $list397 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("specPredsRelevantToTermSummaryPredWRTInstancesInArg")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("predRelevantToTermSummaryPredWRTInstancesInArg")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("assertedPredRelevantToTermSummaryPredWRTInstancesInArg")));
        $list398 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("assertedPredRelevantToTermSummaryPredWRTSpecsInArg")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("assertedPredRelevantToTermSummaryPredWRTInstancesInArg")));
        $list399 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("specPredsRelevantToTermSummaryPredWRTInstancesInArg")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("specPredsRelevantToTermSummaryPredWRTSpecsInArg")));
        $sym400$RELEVANT_MT_IS_GENL_MT = SubLObjectFactory.makeSymbol("RELEVANT-MT-IS-GENL-MT");
        $kw401$TRUE = SubLObjectFactory.makeKeyword("TRUE");
        $list402 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("specPredsRelevantToTermSummaryPredWRTInstancesInArg")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("predRelevantToTermSummaryPredWRTInstancesInArg")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("assertedPredRelevantToTermSummaryPredWRTInstancesInArg")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("specPredsRelevantToTermSummaryPredWRTSpecsInArg")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("predRelevantToTermSummaryPredWRTSpecsInArg")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("assertedPredRelevantToTermSummaryPredWRTSpecsInArg")));
        $sym403$_CATEGORIES_AND_TYPES_FOR_SENTENCE_AND_TERM_INT_VIA_INDEXING_CACH = SubLObjectFactory.makeSymbol("*CATEGORIES-AND-TYPES-FOR-SENTENCE-AND-TERM-INT-VIA-INDEXING-CACHING-STATE*");
        $sym404$CLEAR_CATEGORIES_AND_TYPES_FOR_SENTENCE_AND_TERM_INT_VIA_INDEXING = SubLObjectFactory.makeSymbol("CLEAR-CATEGORIES-AND-TYPES-FOR-SENTENCE-AND-TERM-INT-VIA-INDEXING");
        $sym405$FIRST = SubLObjectFactory.makeSymbol("FIRST");
        $sym406$SUMMARY_PRED_SORT_ORDER_FOR_FOCAL_TERM = SubLObjectFactory.makeSymbol("SUMMARY-PRED-SORT-ORDER-FOR-FOCAL-TERM");
        $list407 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?GENERAL"), (SubLObject)SubLObjectFactory.makeSymbol("?LIST"));
        $list408 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("summaryPredicateOrderingForSpecs")), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL"), (SubLObject)SubLObjectFactory.makeSymbol("?LIST"));
        $list409 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?GENERAL"));
        $sym410$GENERALITY_ESTIMATE_ = SubLObjectFactory.makeSymbol("GENERALITY-ESTIMATE>");
        $list411 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("summaryPredicateOrderingForInstances")), (SubLObject)SubLObjectFactory.makeSymbol("?GENERAL"), (SubLObject)SubLObjectFactory.makeSymbol("?LIST"));
        $sym412$CDADR = SubLObjectFactory.makeSymbol("CDADR");
        $sym413$_SUMMARY_PRED_SORT_ORDER_FOR_FOCAL_TERM_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*SUMMARY-PRED-SORT-ORDER-FOR-FOCAL-TERM-CACHING-STATE*");
        $int414$128 = SubLObjectFactory.makeInteger(128);
        $sym415$CLEAR_SUMMARY_PRED_SORT_ORDER_FOR_FOCAL_TERM = SubLObjectFactory.makeSymbol("CLEAR-SUMMARY-PRED-SORT-ORDER-FOR-FOCAL-TERM");
        $str416$_______________________________Fo = SubLObjectFactory.makeString("~%***************************~%Followup user: ~S~%");
        $str417$_______________________________Fo = SubLObjectFactory.makeString("~%***************************~%Followup query mt: ~S~%");
        $str418$_______________________________Fr = SubLObjectFactory.makeString("~%***************************~%Fragments: ~%");
        $str419$_______________________________Fr = SubLObjectFactory.makeString("~%***************************~%Fragments with ~S: ~%");
        $str420$_______________________________Un = SubLObjectFactory.makeString("~%***************************~%Unknown Questions about ~S: ~%");
        $sym421$FOLLOWUP_QUERY_MT_FOR_USER = SubLObjectFactory.makeSymbol("FOLLOWUP-QUERY-MT-FOR-USER");
        $sym422$_TOPIC = SubLObjectFactory.makeSymbol("?TOPIC");
        $const423$interests = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("interests"));
        $list424 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?TOPIC"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mediumToHighAmountOf")));
        $const425$DocumentReaderFollowupsForInteres = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DocumentReaderFollowupsForInterestMtFn"));
        $sym426$_FOLLOWUP_QUERY_MT_FOR_USER_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FOLLOWUP-QUERY-MT-FOR-USER-CACHING-STATE*");
        $sym427$CLEAR_FOLLOWUP_QUERY_MT_FOR_USER = SubLObjectFactory.makeSymbol("CLEAR-FOLLOWUP-QUERY-MT-FOR-USER");
        $sym428$FOLLOWUP_QUERY_MT_FOR_USER_TASK = SubLObjectFactory.makeSymbol("FOLLOWUP-QUERY-MT-FOR-USER&TASK");
        $sym429$_MT = SubLObjectFactory.makeSymbol("?MT");
        $const430$defaultCUREGuidanceMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("defaultCUREGuidanceMt"));
        $const431$SpecificationVariantFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SpecificationVariantFn"));
        $list432 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DefaultParameterSpecificationFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CycAnalyticEnvironment-TheProgram")));
        $const433$analysisTask = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("analysisTask"));
        $list434 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?MT"));
        $sym435$_FOLLOWUP_QUERY_MT_FOR_USER_TASK_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FOLLOWUP-QUERY-MT-FOR-USER&TASK-CACHING-STATE*");
        $sym436$CLEAR_FOLLOWUP_QUERY_MT_FOR_USER_TASK = SubLObjectFactory.makeSymbol("CLEAR-FOLLOWUP-QUERY-MT-FOR-USER&TASK");
        $sym437$TERM_LEARNER_KNOWN_BINDINGS_FOR_SENTENCE = SubLObjectFactory.makeSymbol("TERM-LEARNER-KNOWN-BINDINGS-FOR-SENTENCE");
        $list438 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("RETURN"), (SubLObject)SubLObjectFactory.makeKeyword("BINDINGS-AND-SUPPORTS"));
        $const439$nearestIsa = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nearestIsa"));
        $const440$nearestGenls = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nearestGenls"));
        $const441$commonAilmentCause = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("commonAilmentCause"));
        $const442$objectFoundInLocation = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("objectFoundInLocation"));
        $const443$properlyGeographicallySubsumes = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("properlyGeographicallySubsumes"));
        $const444$MtSpace = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtSpace"));
        $const445$AnytimePSC = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AnytimePSC"));
        $sym446$_TERM_LEARNER_KNOWN_BINDINGS_FOR_SENTENCE_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*TERM-LEARNER-KNOWN-BINDINGS-FOR-SENTENCE-CACHING-STATE*");
        $sym447$CLEAR_TERM_LEARNER_KNOWN_BINDINGS_FOR_SENTENCE = SubLObjectFactory.makeSymbol("CLEAR-TERM-LEARNER-KNOWN-BINDINGS-FOR-SENTENCE");
        $list448 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("BINDING-SET"), (SubLObject)SubLObjectFactory.makeSymbol("SUPPORT-SET"));
        $sym449$TERM_LEARNER_KNOWN_NEGATED_BINDINGS_FOR_SENTENCE = SubLObjectFactory.makeSymbol("TERM-LEARNER-KNOWN-NEGATED-BINDINGS-FOR-SENTENCE");
        $sym450$_TERM_LEARNER_KNOWN_NEGATED_BINDINGS_FOR_SENTENCE_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*TERM-LEARNER-KNOWN-NEGATED-BINDINGS-FOR-SENTENCE-CACHING-STATE*");
        $sym451$CLEAR_TERM_LEARNER_KNOWN_NEGATED_BINDINGS_FOR_SENTENCE = SubLObjectFactory.makeSymbol("CLEAR-TERM-LEARNER-KNOWN-NEGATED-BINDINGS-FOR-SENTENCE");
        $sym452$TERM_LEARNER_TYPES_FOR_FRAGMENT = SubLObjectFactory.makeSymbol("TERM-LEARNER-TYPES-FOR-FRAGMENT");
        $sym453$_TERM_LEARNER_TYPES_FOR_FRAGMENT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*TERM-LEARNER-TYPES-FOR-FRAGMENT-CACHING-STATE*");
        $sym454$CLEAR_TERM_LEARNER_TYPES_FOR_FRAGMENT = SubLObjectFactory.makeSymbol("CLEAR-TERM-LEARNER-TYPES-FOR-FRAGMENT");
        $const455$singleEntryFormatInArgs = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("singleEntryFormatInArgs"));
        $const456$List = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("List"));
        $const457$CharacterString = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CharacterString"));
        $sym458$_Y = SubLObjectFactory.makeSymbol("?Y");
        $const459$TheList = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList"));
        $list460 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("POSSIBLY-MET-CONSTRAINT"), (SubLObject)SubLObjectFactory.makeSymbol("MUST-BE-MET-CONSTRAINT"));
        $list461 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?ALLOWED-VALUE"), (SubLObject)SubLObjectFactory.makeSymbol("?ALLOWED-POS"), (SubLObject)SubLObjectFactory.makeSymbol("?KNOWN-VALUE"), (SubLObject)SubLObjectFactory.makeSymbol("?KNOWN-POS"));
        $const462$constrainKnownValuesForPredRelati = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("constrainKnownValuesForPredRelativeToIsaInArg-Isa"));
        $list463 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("ALLOWED-VAL"), (SubLObject)SubLObjectFactory.makeSymbol("ALLOWED-POS"), (SubLObject)SubLObjectFactory.makeSymbol("KNOWN-VAL"), (SubLObject)SubLObjectFactory.makeSymbol("KNOWN-POS"));
        $const464$SentenceOfCWFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SentenceOfCWFn"));
        $list465 = ConsesLow.list((SubLObject)cure_api.ONE_INTEGER);
        $list466 = ConsesLow.list((SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.ZERO_INTEGER);
        $const467$WebPageCWFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("WebPageCWFn"));
        $list468 = ConsesLow.list((SubLObject)cure_api.ONE_INTEGER, (SubLObject)cure_api.ONE_INTEGER);
        $sym469$SOURCES_OF_MT = SubLObjectFactory.makeSymbol("SOURCES-OF-MT");
        $sym470$_PCW = SubLObjectFactory.makeSymbol("?PCW");
        $const471$contextOfPCWInterpretation = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("contextOfPCWInterpretation"));
        $list472 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?WHO"), (SubLObject)SubLObjectFactory.makeSymbol("?WHEN"));
        $sym473$_SOURCES_OF_MT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*SOURCES-OF-MT-CACHING-STATE*");
        $sym474$CLEAR_SOURCES_OF_MT = SubLObjectFactory.makeSymbol("CLEAR-SOURCES-OF-MT");
        $sym475$TERM_LEARNER_CANDIDATE_HIERARCHICAL_REPLACEMENTS_FOR_SENTENCE = SubLObjectFactory.makeSymbol("TERM-LEARNER-CANDIDATE-HIERARCHICAL-REPLACEMENTS-FOR-SENTENCE");
        $list476 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("ARG-POS"), (SubLObject)SubLObjectFactory.makeSymbol("SUGGESTIONS"));
        $sym477$JAVA_RENDERING_P = SubLObjectFactory.makeSymbol("JAVA-RENDERING-P");
        $sym478$JAVA_RENDERING_TO_SELECTION_RENDERER = SubLObjectFactory.makeSymbol("JAVA-RENDERING-TO-SELECTION-RENDERER");
        $sym479$GET_ARG_POSITIONS_FOR_TERMS = SubLObjectFactory.makeSymbol("GET-ARG-POSITIONS-FOR-TERMS");
        $sym480$_GET_ARG_POSITIONS_FOR_TERMS_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-ARG-POSITIONS-FOR-TERMS-CACHING-STATE*");
        $kw481$PPH_UNKNOWN_ARG_POSITION = SubLObjectFactory.makeKeyword("PPH-UNKNOWN-ARG-POSITION");
        $sym482$PPH_JAVALIST_ITEM_STRING = SubLObjectFactory.makeSymbol("PPH-JAVALIST-ITEM-STRING");
        $sym483$CB_NAUT_FRAME = SubLObjectFactory.makeSymbol("CB-NAUT-FRAME");
        $sym484$PPH_NAUT_ID_FN = SubLObjectFactory.makeSymbol("PPH-NAUT-ID-FN");
        $kw485$INTERROGATIVE = SubLObjectFactory.makeKeyword("INTERROGATIVE");
        $str486$__ = SubLObjectFactory.makeString(" (");
        $str487$_ = SubLObjectFactory.makeString(")");
        $sym488$PPH_PHRASE_OUTPUT_LIST_P = SubLObjectFactory.makeSymbol("PPH-PHRASE-OUTPUT-LIST-P");
        $kw489$CHOOSE_A_VALUE = SubLObjectFactory.makeKeyword("CHOOSE-A-VALUE");
        $str490$Choose_a_value = SubLObjectFactory.makeString("Choose a value");
        $int491$40 = SubLObjectFactory.makeInteger(40);
        $list492 = ConsesLow.list((SubLObject)cure_api.ZERO_INTEGER);
        $kw493$IGNORE = SubLObjectFactory.makeKeyword("IGNORE");
        $list494 = ConsesLow.list((SubLObject)Characters.CHAR_quotation);
        $sym495$TERM_LEARNER_TYPES_FOR_SENTENCE = SubLObjectFactory.makeSymbol("TERM-LEARNER-TYPES-FOR-SENTENCE");
        $sym496$TERM_LEARNER_TYPES_FOR_SENTENCE_ID = SubLObjectFactory.makeSymbol("TERM-LEARNER-TYPES-FOR-SENTENCE-ID");
        $list497 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("add-before"), (SubLObject)SubLObjectFactory.makeString("add-after"));
        $str498$add_before = SubLObjectFactory.makeString("add-before");
        $sym499$_NEW_VAR = SubLObjectFactory.makeSymbol("?NEW-VAR");
        $str500$remove = SubLObjectFactory.makeString("remove");
        $str501$can_t_duplicate_with_uninterpreta = SubLObjectFactory.makeString("can't duplicate with uninterpretable command: ~S");
        $sym502$CURE_POSSIBLY_DUPLICATE_ARG = SubLObjectFactory.makeSymbol("CURE-POSSIBLY-DUPLICATE-ARG");
        $kw503$TEST = SubLObjectFactory.makeKeyword("TEST");
        $kw504$OWNER = SubLObjectFactory.makeKeyword("OWNER");
        $kw505$CLASSES = SubLObjectFactory.makeKeyword("CLASSES");
        $kw506$KB = SubLObjectFactory.makeKeyword("KB");
        $kw507$FULL = SubLObjectFactory.makeKeyword("FULL");
        $kw508$WORKING_ = SubLObjectFactory.makeKeyword("WORKING?");
        $list509 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("A"), (SubLObject)SubLObjectFactory.makeSymbol("B"), (SubLObject)SubLObjectFactory.makeSymbol("C"), (SubLObject)SubLObjectFactory.makeSymbol("D"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("E"), (SubLObject)SubLObjectFactory.makeSymbol("F"), (SubLObject)SubLObjectFactory.makeSymbol("G"))), (SubLObject)SubLObjectFactory.makeString("(4 1)"), (SubLObject)SubLObjectFactory.makeString("remove")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("A"), (SubLObject)SubLObjectFactory.makeSymbol("B"), (SubLObject)SubLObjectFactory.makeSymbol("C"), (SubLObject)SubLObjectFactory.makeSymbol("D"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("E"), (SubLObject)SubLObjectFactory.makeSymbol("G")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("A"), (SubLObject)SubLObjectFactory.makeSymbol("B"), (SubLObject)SubLObjectFactory.makeSymbol("C"), (SubLObject)SubLObjectFactory.makeSymbol("D"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("E"), (SubLObject)SubLObjectFactory.makeSymbol("F"), (SubLObject)SubLObjectFactory.makeSymbol("G"))), (SubLObject)SubLObjectFactory.makeString("(4 1)"), (SubLObject)SubLObjectFactory.makeString("add-after")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("A"), (SubLObject)SubLObjectFactory.makeSymbol("B"), (SubLObject)SubLObjectFactory.makeSymbol("C"), (SubLObject)SubLObjectFactory.makeSymbol("D"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("E"), (SubLObject)SubLObjectFactory.makeSymbol("F"), (SubLObject)SubLObjectFactory.makeSymbol("?NEW-VAR"), (SubLObject)SubLObjectFactory.makeSymbol("G")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("A"), (SubLObject)SubLObjectFactory.makeSymbol("B"), (SubLObject)SubLObjectFactory.makeSymbol("C"), (SubLObject)SubLObjectFactory.makeSymbol("D"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("E"), (SubLObject)SubLObjectFactory.makeSymbol("F"), (SubLObject)SubLObjectFactory.makeSymbol("G"))), (SubLObject)SubLObjectFactory.makeString("(4 1)"), (SubLObject)SubLObjectFactory.makeString("add-before")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("A"), (SubLObject)SubLObjectFactory.makeSymbol("B"), (SubLObject)SubLObjectFactory.makeSymbol("C"), (SubLObject)SubLObjectFactory.makeSymbol("D"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("E"), (SubLObject)SubLObjectFactory.makeSymbol("?NEW-VAR"), (SubLObject)SubLObjectFactory.makeSymbol("F"), (SubLObject)SubLObjectFactory.makeSymbol("G")))));
        $const510$DocumentationPredicate = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DocumentationPredicate"));
        $const511$equals = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("equals"));
        $kw512$LENIENT = SubLObjectFactory.makeKeyword("LENIENT");
        $sym513$STRINGP = SubLObjectFactory.makeSymbol("STRINGP");
        $str514$WebDocumentsMt = SubLObjectFactory.makeString("WebDocumentsMt");
        $const515$WebDocumentsMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("WebDocumentsMt"));
        $const516$MassMediaDataMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MassMediaDataMt"));
        $str517$Unable_to_initialize__A__ = SubLObjectFactory.makeString("Unable to initialize ~A~%");
        $const518$AssistedReaderSourceSpindle = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AssistedReaderSourceSpindle"));
        $const519$AssistedReaderSourceSpindleCollec = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AssistedReaderSourceSpindleCollectorMt"));
        $const520$TechnicalEnglishLexicalMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TechnicalEnglishLexicalMt"));
        $const521$MedicalLexicalMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MedicalLexicalMt"));
        $kw522$PPH_LEXICAL_CONTEXT = SubLObjectFactory.makeKeyword("PPH-LEXICAL-CONTEXT");
        $kw523$PPH_AGREEMENT = SubLObjectFactory.makeKeyword("PPH-AGREEMENT");
        $sym524$GET_CYCL = SubLObjectFactory.makeSymbol("GET-CYCL");
        $list525 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("JUSTIFICATION"));
        $sym526$TERM_LEARNER_HANDLE_USER_CHOICE = SubLObjectFactory.makeSymbol("TERM-LEARNER-HANDLE-USER-CHOICE");
        $sym527$TERM_EXPANSION_EXPECTED_SENTENCE_ = SubLObjectFactory.makeSymbol("TERM-EXPANSION-EXPECTED-SENTENCE?");
        $sym528$TRANSFORM_TO_TRUE = SubLObjectFactory.makeSymbol("TRANSFORM-TO-TRUE");
        $sym529$ASSERTION_MT = SubLObjectFactory.makeSymbol("ASSERTION-MT");
        $kw530$CHOICE_ID = SubLObjectFactory.makeKeyword("CHOICE-ID");
        $str531$Error_while_trying_to_handle_ = SubLObjectFactory.makeString("Error while trying to handle ");
        $kw532$NEW_SENTENCE_CYCL = SubLObjectFactory.makeKeyword("NEW-SENTENCE-CYCL");
        $str533$_accepted_meaning_date___A__user_ = SubLObjectFactory.makeString("<accepted-meaning date='~A' user-id='~A'><original-string>~S</original-string><focal-term id='~A'>~A</focal-term><sentence id='~a'>~A</sentence-id><justifications>~A</justifications></accepted-meaning>~%");
        $const534$True = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("True"));
        $const535$termExpansionExpected = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("termExpansionExpected"));
        $const536$UnsourcedDataForUserByTaskMtFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("UnsourcedDataForUserByTaskMtFn"));
        $const537$userTaskSortsWorkBySourceDocument = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("userTaskSortsWorkBySourceDocument"));
        $sym538$NORMALIZE_CURE_USER = SubLObjectFactory.makeSymbol("NORMALIZE-CURE-USER");
        $sym539$_BASE_USER = SubLObjectFactory.makeSymbol("?BASE-USER");
        $sym540$_TASK = SubLObjectFactory.makeSymbol("?TASK");
        $sym541$_NORMALIZE_CURE_USER_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*NORMALIZE-CURE-USER-CACHING-STATE*");
        $int542$32 = SubLObjectFactory.makeInteger(32);
        $kw543$NOTHING = SubLObjectFactory.makeKeyword("NOTHING");
        $kw544$TOOL = SubLObjectFactory.makeKeyword("TOOL");
        $str545$term_learner_base_source_creation = SubLObjectFactory.makeString("term-learner-base-source-creation-lock");
        $const546$AssistedReaderSourceSpindleForTas = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AssistedReaderSourceSpindleForTaskAndUserFn"));
        $sym547$DEFAULT_ASSERT_MT_FOR_USER_AND_TASK = SubLObjectFactory.makeSymbol("DEFAULT-ASSERT-MT-FOR-USER-AND-TASK");
        $const548$assistedReaderAssertionMtForTaskA = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("assistedReaderAssertionMtForTaskAndUser"));
        $sym549$_DEFAULT_ASSERT_MT_FOR_USER_AND_TASK_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*DEFAULT-ASSERT-MT-FOR-USER-AND-TASK-CACHING-STATE*");
        $sym550$CLEAR_DEFAULT_ASSERT_MT_FOR_USER_AND_TASK = SubLObjectFactory.makeSymbol("CLEAR-DEFAULT-ASSERT-MT-FOR-USER-AND-TASK");
        $sym551$_CW = SubLObjectFactory.makeSymbol("?CW");
        $const552$urlOfCW = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("urlOfCW"));
        $const553$URLFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("URLFn"));
        $list554 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ANSWER-LANGUAGE"), (SubLObject)SubLObjectFactory.makeKeyword("HL"));
        $const555$mtSpindleMember = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mtSpindleMember"));
        $const556$ContextOfPCWFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ContextOfPCWFn"));
        $list557 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("WorldWideWebPage-PCW")));
        $const558$titleOfWork = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("titleOfWork"));
        $const559$ContextOfPCWInterpretationFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ContextOfPCWInterpretationFn"));
        $const560$contextOfPCW = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("contextOfPCW"));
        $str561$term_learner_sub_source_creation_ = SubLObjectFactory.makeString("term-learner-sub-source-creation-lock");
        $const562$asHtmlSourceString = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("asHtmlSourceString"));
        $list563 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AISForFn")), (SubLObject)SubLObjectFactory.makeSymbol("?CW"));
        $const564$subWorks = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subWorks"));
        $list565 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?CW"));
        $int566$30 = SubLObjectFactory.makeInteger(30);
        $list567 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PropositionalConceptualWork")));
        $const568$AISForFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AISForFn"));
        $const569$genlMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genlMt"));
        $const570$Microtheory = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Microtheory"));
        $sym571$_SUBWORK = SubLObjectFactory.makeSymbol("?SUBWORK");
        $list572 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?SUBWORK"));
        $list573 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?DATE"));
        $sym574$_WORK = SubLObjectFactory.makeSymbol("?WORK");
        $sym575$CLEAR_MTS_FOR_USER = SubLObjectFactory.makeSymbol("CLEAR-MTS-FOR-USER");
        $sym576$CLEAR_MTS_FOR_URL_USER = SubLObjectFactory.makeSymbol("CLEAR-MTS-FOR-URL&USER");
        $kw577$MT = SubLObjectFactory.makeKeyword("MT");
        $kw578$BROAD_MT = SubLObjectFactory.makeKeyword("BROAD-MT");
        $str579$do_broad_mt_index = SubLObjectFactory.makeString("do-broad-mt-index");
        $kw580$SKIP = SubLObjectFactory.makeKeyword("SKIP");
        $str581$assertionDependsOn = SubLObjectFactory.makeString("assertionDependsOn");
        $list582 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("inProgressTerm")), (SubLObject)SubLObjectFactory.makeKeyword("TERM"));
        $sym583$CYCLIST_FORT = SubLObjectFactory.makeSymbol("CYCLIST-FORT");
        $sym584$HUMAN_CYCLIST_ = SubLObjectFactory.makeSymbol("HUMAN-CYCLIST?");
        $str585$needsApproval = SubLObjectFactory.makeString("needsApproval");
        $str586$disapproved = SubLObjectFactory.makeString("disapproved");
        $str587$approved = SubLObjectFactory.makeString("approved");
        $list588 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("STANFORD-NER"), (SubLObject)SubLObjectFactory.makeKeyword("STANFORD-NER-PSP"));
        $sym589$STANFORD_NER = SubLObjectFactory.makeSymbol("STANFORD-NER");
        $sym590$RUN = SubLObjectFactory.makeSymbol("RUN");
        $sym591$GET_CYC = SubLObjectFactory.makeSymbol("GET-CYC");
        $sym592$GET_STRING = SubLObjectFactory.makeSymbol("GET-STRING");
        $list593 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ConceptFilterSpecificationFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TaxonomyOfEasilyUnderstandableConcepts")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ConceptOnlyFilterParameter")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TriggerFromConcept")));
        $const594$PredicateTaxonomy = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PredicateTaxonomy"));
        $list595 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ConceptFilterSpecificationFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PredicateTaxonomy")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ConceptOnlyFilterParameter")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TriggerFromConcept")));
        $kw596$STANFORD_NER = SubLObjectFactory.makeKeyword("STANFORD-NER");
        $sym597$TIGHTEN_TYPE = SubLObjectFactory.makeSymbol("TIGHTEN-TYPE");
        $kw598$STANFORD_NER_PSP = SubLObjectFactory.makeKeyword("STANFORD-NER-PSP");
        $list599 = ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ConceptFilterSpecificationFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TaxonomyOfEasilyUnderstandableConcepts")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ConceptOnlyFilterParameter")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TriggerFromConcept"))));
        $sym600$O = SubLObjectFactory.makeSymbol("O");
        $sym601$GET_TYPE = SubLObjectFactory.makeSymbol("GET-TYPE");
        $kw602$THING = SubLObjectFactory.makeKeyword("THING");
        $sym603$TERM_LEARNER_TYPE_PROMPT = SubLObjectFactory.makeSymbol("TERM-LEARNER-TYPE-PROMPT");
        $list604 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Cat")));
        $str605$cat = SubLObjectFactory.makeString("cat");
        $str606$_ = SubLObjectFactory.makeString(":");
        $sym607$_TERM_LEARNER_TYPE_PROMPT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*TERM-LEARNER-TYPE-PROMPT-CACHING-STATE*");
        $sym608$TERM_LEARNER_TERM_HEADER_STRING = SubLObjectFactory.makeSymbol("TERM-LEARNER-TERM-HEADER-STRING");
        $sym609$_TERM_LEARNER_TERM_HEADER_STRING_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*TERM-LEARNER-TERM-HEADER-STRING-CACHING-STATE*");
        $int610$5000 = SubLObjectFactory.makeInteger(5000);
        $sym611$CLEAR_TERM_LEARNER_TERM_HEADER_STRING = SubLObjectFactory.makeSymbol("CLEAR-TERM-LEARNER-TERM-HEADER-STRING");
        $sym612$TERM_LEARNER_ALTERNATIVE_PHRASES = SubLObjectFactory.makeSymbol("TERM-LEARNER-ALTERNATIVE-PHRASES");
        $sym613$DELETE = SubLObjectFactory.makeSymbol("DELETE");
        $kw614$NOW = SubLObjectFactory.makeKeyword("NOW");
        $const615$ist = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ist"));
        $const616$assertionDependsOn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("assertionDependsOn"));
        $sym617$DEFAULT_TASK_FOR_USER = SubLObjectFactory.makeSymbol("DEFAULT-TASK-FOR-USER");
        $sym618$DEFAULT_TASK_FOR_USER_INT = SubLObjectFactory.makeSymbol("DEFAULT-TASK-FOR-USER-INT");
        $const619$defaultTask = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("defaultTask"));
        $const620$GeneralCycKETask_Allotment = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GeneralCycKETask-Allotment"));
        $sym621$_DEFAULT_TASK_FOR_USER_INT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*DEFAULT-TASK-FOR-USER-INT-CACHING-STATE*");
        $sym622$CLEAR_DEFAULT_TASK_FOR_USER_INT = SubLObjectFactory.makeSymbol("CLEAR-DEFAULT-TASK-FOR-USER-INT");
        $sym623$QUERY_MT_FOR_TASK = SubLObjectFactory.makeSymbol("QUERY-MT-FOR-TASK");
        $sym624$_QUERY_MT_FOR_TASK_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*QUERY-MT-FOR-TASK-CACHING-STATE*");
        $sym625$CLEAR_QUERY_MT_FOR_TASK = SubLObjectFactory.makeSymbol("CLEAR-QUERY-MT-FOR-TASK");
        $sym626$WFF_CHECKING_MT_FOR_TASK = SubLObjectFactory.makeSymbol("WFF-CHECKING-MT-FOR-TASK");
        $sym627$_WFF_CHECKING_MT_FOR_TASK_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*WFF-CHECKING-MT-FOR-TASK-CACHING-STATE*");
        $sym628$CLEAR_WFF_CHECKING_MT_FOR_TASK = SubLObjectFactory.makeSymbol("CLEAR-WFF-CHECKING-MT-FOR-TASK");
        $sym629$QUERY_MT_FOR_USER_AND_TASK = SubLObjectFactory.makeSymbol("QUERY-MT-FOR-USER-AND-TASK");
        $sym630$_QUERY_MT_FOR_USER_AND_TASK_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*QUERY-MT-FOR-USER-AND-TASK-CACHING-STATE*");
        $sym631$CLEAR_QUERY_MT_FOR_USER_AND_TASK = SubLObjectFactory.makeSymbol("CLEAR-QUERY-MT-FOR-USER-AND-TASK");
        $sym632$WFF_CHECKING_MT_FOR_USER_AND_TASK = SubLObjectFactory.makeSymbol("WFF-CHECKING-MT-FOR-USER-AND-TASK");
        $sym633$_WFF_CHECKING_MT_FOR_USER_AND_TASK_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*WFF-CHECKING-MT-FOR-USER-AND-TASK-CACHING-STATE*");
        $sym634$CLEAR_WFF_CHECKING_MT_FOR_USER_AND_TASK = SubLObjectFactory.makeSymbol("CLEAR-WFF-CHECKING-MT-FOR-USER-AND-TASK");
        $str635$types = SubLObjectFactory.makeString("types");
        $kw636$NOT_FOUND = SubLObjectFactory.makeKeyword("NOT-FOUND");
        $str637$category = SubLObjectFactory.makeString("category");
        $str638$categoryNL = SubLObjectFactory.makeString("categoryNL");
        $str639$typeSet = SubLObjectFactory.makeString("typeSet");
        $str640$id = SubLObjectFactory.makeString("id");
        $str641$required = SubLObjectFactory.makeString("required");
        $str642$false = SubLObjectFactory.makeString("false");
        $str643$display = SubLObjectFactory.makeString("display");
        $str644$cyclTerm = SubLObjectFactory.makeString("cyclTerm");
        $str645$nlString = SubLObjectFactory.makeString("nlString");
        $str646$legendString = SubLObjectFactory.makeString("legendString");
        $str647$replicationSentenceId = SubLObjectFactory.makeString("replicationSentenceId");
        $str648$statusCode = SubLObjectFactory.makeString("statusCode");
        $str649$type = SubLObjectFactory.makeString("type");
        $str650$renderers = SubLObjectFactory.makeString("renderers");
        $str651$renderer = SubLObjectFactory.makeString("renderer");
        $str652$isaConstraint = SubLObjectFactory.makeString("isaConstraint");
        $str653$genlsConstraint = SubLObjectFactory.makeString("genlsConstraint");
        $str654$text_matches = SubLObjectFactory.makeString("text-matches");
        $str655$heading = SubLObjectFactory.makeString("heading");
        $list656 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("valid"), (SubLObject)SubLObjectFactory.makeString("false"));
        $str657$initiallySelected = SubLObjectFactory.makeString("initiallySelected");
        $str658$selectionRenderer = SubLObjectFactory.makeString("selectionRenderer");
        $str659$cyclId = SubLObjectFactory.makeString("cyclId");
        $sym660$TERM_LEARNER_CONCEPT_CLOUDS = SubLObjectFactory.makeSymbol("TERM-LEARNER-CONCEPT-CLOUDS");
        $kw661$TERM_WEIGHT = SubLObjectFactory.makeKeyword("TERM-WEIGHT");
        $kw662$CLOUD = SubLObjectFactory.makeKeyword("CLOUD");
        $sym663$TERM_LEARNER_TERM_CONCEPT_CLOUD = SubLObjectFactory.makeSymbol("TERM-LEARNER-TERM-CONCEPT-CLOUD");
        $kw664$NEW = SubLObjectFactory.makeKeyword("NEW");
        $sym665$SIXTH = SubLObjectFactory.makeSymbol("SIXTH");
        $sym666$TERM_LEARNER_CONCEPT_CLOUD_AS_XML = SubLObjectFactory.makeSymbol("TERM-LEARNER-CONCEPT-CLOUD-AS-XML");
        $str667$cloud = SubLObjectFactory.makeString("cloud");
        $kw668$GENL_IDS = SubLObjectFactory.makeKeyword("GENL-IDS");
        $kw669$ISA_IDS = SubLObjectFactory.makeKeyword("ISA-IDS");
        $str670$cycl = SubLObjectFactory.makeString("cycl");
        $str671$t = SubLObjectFactory.makeString("t");
        $str672$f = SubLObjectFactory.makeString("f");
        $str673$weight = SubLObjectFactory.makeString("weight");
        $str674$nl = SubLObjectFactory.makeString("nl");
        $str675$concept = SubLObjectFactory.makeString("concept");
        $str676$genl = SubLObjectFactory.makeString("genl");
        $sym677$TERM_LEARNER_CONCEPT_CLOUD_NEW_INT = SubLObjectFactory.makeSymbol("TERM-LEARNER-CONCEPT-CLOUD-NEW-INT");
        $sym678$TERM_LEARNER_ID = SubLObjectFactory.makeSymbol("TERM-LEARNER-ID");
        $sym679$TERM_LEARNER_CLOUD_DISPLAY_NL = SubLObjectFactory.makeSymbol("TERM-LEARNER-CLOUD-DISPLAY-NL");
        $sym680$_TERM_LEARNER_CLOUD_DISPLAY_NL_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*TERM-LEARNER-CLOUD-DISPLAY-NL-CACHING-STATE*");
        $int681$4096 = SubLObjectFactory.makeInteger(4096);
        $sym682$CLEAR_TERM_LEARNER_CLOUD_DISPLAY_NL = SubLObjectFactory.makeSymbol("CLEAR-TERM-LEARNER-CLOUD-DISPLAY-NL");
        $sym683$TERM_LEARNER_DISPLAYABLE_GENERALIZATION_ = SubLObjectFactory.makeSymbol("TERM-LEARNER-DISPLAYABLE-GENERALIZATION?");
        $sym684$_TERM_LEARNER_DISPLAYABLE_GENERALIZATION__CACHING_STATE_ = SubLObjectFactory.makeSymbol("*TERM-LEARNER-DISPLAYABLE-GENERALIZATION?-CACHING-STATE*");
        $sym685$CLEAR_TERM_LEARNER_DISPLAYABLE_GENERALIZATION_ = SubLObjectFactory.makeSymbol("CLEAR-TERM-LEARNER-DISPLAYABLE-GENERALIZATION?");
        $const686$Now = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Now"));
        $list687 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CollectionUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CollectionDifferenceFn")));
        $sym688$_TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION__CACHING_STATE_ = SubLObjectFactory.makeSymbol("*TERM-LEARNER-POSSIBLY-RELEVANT-GENERALIZATION?-CACHING-STATE*");
        $sym689$CLEAR_TERM_LEARNER_POSSIBLY_RELEVANT_GENERALIZATION_ = SubLObjectFactory.makeSymbol("CLEAR-TERM-LEARNER-POSSIBLY-RELEVANT-GENERALIZATION?");
        $kw690$KB_MODIFY_IRRELEVANCE = SubLObjectFactory.makeKeyword("KB-MODIFY-IRRELEVANCE");
        $sym691$CLEAR_TERM_LEARNER_IRRELEVANCIES_FOR_TERM = SubLObjectFactory.makeSymbol("CLEAR-TERM-LEARNER-IRRELEVANCIES-FOR-TERM");
        $sym692$CYCL_TERMS_TO_NL_STRINGS_QUICK = SubLObjectFactory.makeSymbol("CYCL-TERMS-TO-NL-STRINGS-QUICK");
        $sym693$_CB_SHOW_FOLLOWUP_WIDGET_ = SubLObjectFactory.makeSymbol("*CB-SHOW-FOLLOWUP-WIDGET*");
        $str694$_termId_ = SubLObjectFactory.makeString(" termId=");
        $str695$_termString_ = SubLObjectFactory.makeString(" termString=");
        $str696$cycFollowup = SubLObjectFactory.makeString("cycFollowup");
        $list697 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeUninternedSymbol("ATTRIBUTE"), (SubLObject)SubLObjectFactory.makeUninternedSymbol("VALUE"));
        $kw698$FOLLOWUP_LOADER = SubLObjectFactory.makeKeyword("FOLLOWUP-LOADER");
        $kw699$CURE = SubLObjectFactory.makeKeyword("CURE");
        $str700$cure_png = SubLObjectFactory.makeString("cure.png");
        $str701$cure_cyc_com = SubLObjectFactory.makeString("cure.cyc.com");
        $int702$8080 = SubLObjectFactory.makeInteger(8080);
        $str703$_ConceptSearch = SubLObjectFactory.makeString("/ConceptSearch");
        $str704$_cure = SubLObjectFactory.makeString("/cure");
        $sym705$_CB_CURE_INTERNAL_HOST_OVERRIDE_ = SubLObjectFactory.makeSymbol("*CB-CURE-INTERNAL-HOST-OVERRIDE*");
        $sym706$_CB_CURE_INTERNAL_PORT_OVERRIDE_ = SubLObjectFactory.makeSymbol("*CB-CURE-INTERNAL-PORT-OVERRIDE*");
        $str707$CURE = SubLObjectFactory.makeString("CURE");
        $sym708$CATCH_ERROR_MESSAGE_HANDLER = SubLObjectFactory.makeSymbol("CATCH-ERROR-MESSAGE-HANDLER");
        $str709$CURE_Broken = SubLObjectFactory.makeString("CURE Broken");
        $str710$CURE_broken___S = SubLObjectFactory.makeString("CURE broken: ~S");
        $str711$http___ = SubLObjectFactory.makeString("http://");
        $str712$_edit_jsp_conceptid_ = SubLObjectFactory.makeString("/edit.jsp?conceptid=");
        $str713$_cycHost_ = SubLObjectFactory.makeString("&cycHost=");
        $str714$_cycPort_ = SubLObjectFactory.makeString("&cycPort=");
        $str715$_userName_ = SubLObjectFactory.makeString("&userName=");
        $str716$_cure = SubLObjectFactory.makeString("-cure");
        $int717$600 = SubLObjectFactory.makeInteger(600);
        $int718$400 = SubLObjectFactory.makeInteger(400);
        $str719$_cycdoc_img_cb_cure_png = SubLObjectFactory.makeString("/cycdoc/img/cb/cure.png");
        $str720$bottom = SubLObjectFactory.makeString("bottom");
        $str721$height_1_2em = SubLObjectFactory.makeString("height:1.2em");
        $sym722$SENTENCE_SCORE = SubLObjectFactory.makeSymbol("SENTENCE-SCORE");
        $list723 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ALLOW-INDETERMINATE-RESULTS?"), (SubLObject)cure_api.NIL);
        $sym724$ALL_INSTANCES = SubLObjectFactory.makeSymbol("ALL-INSTANCES");
        $sym725$_SENTENCE_SCORE_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*SENTENCE-SCORE-CACHING-STATE*");
        $sym726$SENTENCE_SCORE_FOR_TYPE = SubLObjectFactory.makeSymbol("SENTENCE-SCORE-FOR-TYPE");
        $sym727$_QUERY_VAR = SubLObjectFactory.makeSymbol("?QUERY-VAR");
        $sym728$_SENTENCE_SCORE_FOR_TYPE_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*SENTENCE-SCORE-FOR-TYPE-CACHING-STATE*");
        $sym729$SET_QUERY_VARIABLE = SubLObjectFactory.makeSymbol("SET-QUERY-VARIABLE");
        $sym730$_SET_QUERY_VARIABLE_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*SET-QUERY-VARIABLE-CACHING-STATE*");
        $const731$DaveS = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DaveS"));
        $str732$something = SubLObjectFactory.makeString("something");
        $const733$GenericInstanceFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GenericInstanceFn"));
        $sym734$SECOND = SubLObjectFactory.makeSymbol("SECOND");
        $sym735$GET_FRAGMENTS_FOR_TERMS_CACHED = SubLObjectFactory.makeSymbol("GET-FRAGMENTS-FOR-TERMS-CACHED");
        $sym736$_GET_FRAGMENTS_FOR_TERMS_CACHED_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-FRAGMENTS-FOR-TERMS-CACHED-CACHING-STATE*");
        $sym737$CLEAR_GET_FRAGMENTS_FOR_TERMS_CACHED = SubLObjectFactory.makeSymbol("CLEAR-GET-FRAGMENTS-FOR-TERMS-CACHED");
        $const738$Restaurant_Organization = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Restaurant-Organization"));
        $list739 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DocumentReaderFollowupsForTaskMtFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GeneralCycKETask-Allotment")));
        $list740 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("SENTENCE"), (SubLObject)SubLObjectFactory.makeSymbol("SCORE"));
        $list741 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ISA-HORIZON"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Agent-Generic")), (SubLObject)SubLObjectFactory.makeKeyword("GENLS-HORIZON"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Individual")), (SubLObject)SubLObjectFactory.makeKeyword("USAGE-THRESHOLD"), (SubLObject)cure_api.TEN_INTEGER);
        $str742$cdolist = SubLObjectFactory.makeString("cdolist");
        $str743$gathering_preds_for_ = SubLObjectFactory.makeString("gathering preds for ");
        $const744$SomeFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SomeFn"));
        $list745 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("PRED"), (SubLObject)SubLObjectFactory.makeSymbol("SCORE"));
        $const746$DocumentReaderFollowupsForTaskMtF = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DocumentReaderFollowupsForTaskMtFn"));
        $kw747$BREADTH = SubLObjectFactory.makeKeyword("BREADTH");
        $kw748$QUEUE = SubLObjectFactory.makeKeyword("QUEUE");
        $kw749$STACK = SubLObjectFactory.makeKeyword("STACK");
        $sym750$RELEVANT_SBHL_TV_IS_GENERAL_TV = SubLObjectFactory.makeSymbol("RELEVANT-SBHL-TV-IS-GENERAL-TV");
        $kw751$ERROR = SubLObjectFactory.makeKeyword("ERROR");
        $str752$_A_is_not_a__A = SubLObjectFactory.makeString("~A is not a ~A");
        $sym753$SBHL_TRUE_TV_P = SubLObjectFactory.makeSymbol("SBHL-TRUE-TV-P");
        $kw754$CERROR = SubLObjectFactory.makeKeyword("CERROR");
        $str755$continue_anyway = SubLObjectFactory.makeString("continue anyway");
        $kw756$WARN = SubLObjectFactory.makeKeyword("WARN");
        $str757$_A_is_not_a_valid__sbhl_type_erro = SubLObjectFactory.makeString("~A is not a valid *sbhl-type-error-action* value");
        $str758$_A_is_neither_SET_P_nor_LISTP_ = SubLObjectFactory.makeString("~A is neither SET-P nor LISTP.");
        $str759$attempting_to_bind_direction_link = SubLObjectFactory.makeString("attempting to bind direction link variable, to NIL. macro body not executed.");
        $str760$Node__a_does_not_pass_sbhl_type_t = SubLObjectFactory.makeString("Node ~a does not pass sbhl-type-test ~a~%");
        $float761$0_001 = (SubLFloat)SubLObjectFactory.makeDouble(0.001);
        $const762$GeneralCycKE = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GeneralCycKE"));
        $sym763$CAAR = SubLObjectFactory.makeSymbol("CAAR");
        $const764$generateFormulasForElements_TermI = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("generateFormulasForElements-TermIsa"));
        $const765$TheSet = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheSet"));
        $kw766$CONTEXT_STRING = SubLObjectFactory.makeKeyword("CONTEXT-STRING");
        $kw767$SOURCE = SubLObjectFactory.makeKeyword("SOURCE");
        $sym768$RESTART_CONCEPT_SEARCH_DEMO_SERVER = SubLObjectFactory.makeSymbol("RESTART-CONCEPT-SEARCH-DEMO-SERVER");
        $str769$Restarting_CCF_Demo_Cyc_Server = SubLObjectFactory.makeString("Restarting CCF Demo Cyc Server");
        $str770$_cyc_java_pkg_WebServicesTester_b = SubLObjectFactory.makeString("/cyc/java/pkg/WebServicesTester/bin/restart-ccf-demo-web-services.sh");
        $kw771$COLLECTION = SubLObjectFactory.makeKeyword("COLLECTION");
        $kw772$INDIVIDUAL = SubLObjectFactory.makeKeyword("INDIVIDUAL");
        $list773 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("the"), (SubLObject)SubLObjectFactory.makeString("The"));
        $sym774$COLLECTION_VIA_WEB_SEARCH_ = SubLObjectFactory.makeSymbol("COLLECTION-VIA-WEB-SEARCH?");
        $float775$0_01 = (SubLFloat)SubLObjectFactory.makeDouble(0.01);
        $float776$0_1 = (SubLFloat)SubLObjectFactory.makeDouble(0.1);
        $sym777$_COLLECTION_VIA_WEB_SEARCH__CACHING_STATE_ = SubLObjectFactory.makeSymbol("*COLLECTION-VIA-WEB-SEARCH?-CACHING-STATE*");
        $int778$50 = SubLObjectFactory.makeInteger(50);
        $sym779$YAHOO_COUNT_CACHED = SubLObjectFactory.makeSymbol("YAHOO-COUNT-CACHED");
        $str780$_much_ = SubLObjectFactory.makeString("\"much ");
        $str781$_ = SubLObjectFactory.makeString("\"");
        $str782$_many_ = SubLObjectFactory.makeString("\"many ");
        $sym783$GET_CONCEPT_TAGS_FROM_STRING = SubLObjectFactory.makeSymbol("GET-CONCEPT-TAGS-FROM-STRING");
        $sym784$_GET_CONCEPT_TAGS_FROM_STRING_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-CONCEPT-TAGS-FROM-STRING-CACHING-STATE*");
        $sym785$CLEAR_GET_CONCEPT_TAGS_FROM_STRING = SubLObjectFactory.makeSymbol("CLEAR-GET-CONCEPT-TAGS-FROM-STRING");
        $sym786$GET_FILLER_SCORE = SubLObjectFactory.makeSymbol("GET-FILLER-SCORE");
        $sym787$FIND_SENTENCE_FILLERS = SubLObjectFactory.makeSymbol("FIND-SENTENCE-FILLERS");
        $list788 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("SENTENCE"), (SubLObject)SubLObjectFactory.makeSymbol("VARS"), (SubLObject)SubLObjectFactory.makeSymbol("ANSWER-SETS"));
        $list789 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeSymbol("?X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Animal")));
        $list790 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("CYCL-SENTENCE"), (SubLObject)SubLObjectFactory.makeSymbol("VAR-LIST"));
        $sym791$GET_QUERIES_FOR_TERM = SubLObjectFactory.makeSymbol("GET-QUERIES-FOR-TERM");
        $sym792$GET_QUERIES_FROM_SENTENCES = SubLObjectFactory.makeSymbol("GET-QUERIES-FROM-SENTENCES");
        $sym793$TERM_LEARNER_AUTOCOMPLETE_NATIVE_WITH_CYCADMINISTRATOR = SubLObjectFactory.makeSymbol("TERM-LEARNER-AUTOCOMPLETE-NATIVE-WITH-CYCADMINISTRATOR");
        $sym794$LENGTH_ = SubLObjectFactory.makeSymbol("LENGTH>");
        $list795 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("mon"), (SubLObject)cure_api.TWENTY_INTEGER, (SubLObject)SubLObjectFactory.makeString(""), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("organismTypeFoundInClimateOfType")), (SubLObject)SubLObjectFactory.makeSymbol("?ANIMAL"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SunnyClimateCycle"))), (SubLObject)ConsesLow.list((SubLObject)cure_api.ONE_INTEGER)), (SubLObject)cure_api.ONE_INTEGER), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("hor"), (SubLObject)cure_api.TWENTY_INTEGER, (SubLObject)SubLObjectFactory.makeString(""), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("organismTypeFoundInClimateOfType")), (SubLObject)SubLObjectFactory.makeSymbol("?ANIMAL"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SunnyClimateCycle"))), (SubLObject)ConsesLow.list((SubLObject)cure_api.ONE_INTEGER)), (SubLObject)cure_api.ONE_INTEGER));
        $sym796$TERM_LEARNER_CANDIDATE_HIERARCHICAL_REPLACEMENTS_FOR_SENTENCE_INT = SubLObjectFactory.makeSymbol("TERM-LEARNER-CANDIDATE-HIERARCHICAL-REPLACEMENTS-FOR-SENTENCE-INT");
        $sym797$VALID_HIERARCHICAL_CANDIDATES_P = SubLObjectFactory.makeSymbol("VALID-HIERARCHICAL-CANDIDATES-P");
        $list798 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)cure_api.NIL, (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExistsRange")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("organismKilled")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AttackOnFrenchBarracksInBeirut19831023")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Person")), (SubLObject)SubLObjectFactory.makeInteger(59)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DocumentReaderFollowupsForInterestMtFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Medicine-FieldOfStudy"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DocumentReaderFollowupsForTaskMtFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GeneralCycKETask-Allotment"))))), (SubLObject)cure_api.T));
        $sym799$TERM_LEARNER_TYPES_FOR_SENTENCE_ID_TEST_FN = SubLObjectFactory.makeSymbol("TERM-LEARNER-TYPES-FOR-SENTENCE-ID-TEST-FN");
        $sym800$SOME_SELECTION_RENDERER_HAS_STRING_P = SubLObjectFactory.makeSymbol("SOME-SELECTION-RENDERER-HAS-STRING-P");
        $list801 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("typeBehaviorIncapable")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FlightlessBird")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Flying-FlappingWings")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("doneBy"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DaveS")), (SubLObject)SubLObjectFactory.makeString(""), (SubLObject)SubLObjectFactory.makeString(""), (SubLObject)SubLObjectFactory.makeString(""), (SubLObject)SubLObjectFactory.makeString("")), (SubLObject)SubLObjectFactory.makeString("fly by flapping wings")), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("typeBehaviorIncapable")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FlightlessBird")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Flying-FlappingWings")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("doneBy"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DaveS")), (SubLObject)SubLObjectFactory.makeString(""), (SubLObject)SubLObjectFactory.makeString(""), (SubLObject)SubLObjectFactory.makeString(""), (SubLObject)SubLObjectFactory.makeString("")), (SubLObject)SubLObjectFactory.makeString("flightless birds")));
        $sym802$TERM_LEARNER_KNOWN_BINDINGS_FOR_SENTENCE_NEG = SubLObjectFactory.makeSymbol("TERM-LEARNER-KNOWN-BINDINGS-FOR-SENTENCE-NEG");
        $sym803$BINDINGS_DONT_MENTION = SubLObjectFactory.makeSymbol("BINDINGS-DONT-MENTION");
        $list804 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("objectFoundInLocation")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CityOfAustinTX")), (SubLObject)SubLObjectFactory.makeSymbol("?X")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InferencePSC"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MilkyWay-Galaxy"))));
        $sym805$BINDINGS_MENTION = SubLObjectFactory.makeSymbol("BINDINGS-MENTION");
        $list806 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("objectFoundInLocation")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CityOfAustinTX")), (SubLObject)SubLObjectFactory.makeSymbol("?X")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InferencePSC"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Texas-State"))));
    }
}

/*

	Total time: 8691 ms
	
*/