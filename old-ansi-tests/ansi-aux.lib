#0Y_ #0Y |CHARSET|::|UTF-8|
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "CL-TEST"))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|OPTIMIZE| (|COMMON-LISP|::|SAFETY| 3.)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|NOTNOT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|NOTNOT-MV|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|NOTNOT-MV|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|NOTNOT-MV|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|FORM| (|COMMON-LISP|::|CADR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|NOTNOT-MV|
       `(|CL-TEST|::|NOTNOT-MV-FN|
         (|COMMON-LISP|::|MULTIPLE-VALUE-LIST| ,|CL-TEST|::|FORM|)))))))
  '(|CL-TEST|::|FORM|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|NOTNOT-MV-FN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|RESULTS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|NOT-MV|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|NOT-MV|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|NOT-MV|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|FORM| (|COMMON-LISP|::|CADR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|NOT-MV|
       `(|CL-TEST|::|NOT-MV-FN|
         (|COMMON-LISP|::|MULTIPLE-VALUE-LIST| ,|CL-TEST|::|FORM|)))))))
  '(|CL-TEST|::|FORM|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|NOT-MV-FN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|RESULTS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|FTYPE|
   (|COMMON-LISP|::|FUNCTION| (|COMMON-LISP|::|T|) |COMMON-LISP|::|FUNCTION|)
   |CL-TEST|::|TO-FUNCTION|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|TO-FUNCTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|FN|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|CHECK-VALUES|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|CHECK-VALUES|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|CHECK-VALUES|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|FORM|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CL-TEST|::|NUM|
        (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CDDR| . #1#)
         (|COMMON-LISP|::|CADDR| . #1#) 1.)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|CHECK-VALUES|
       (|COMMON-LISP|::|LET|
        ((|CL-TEST|::|V| (|COMMON-LISP|::|GENSYM|))
         (|CL-TEST|::|N| (|COMMON-LISP|::|GENSYM|)))
        `(|COMMON-LISP|::|LET|
          ((,|CL-TEST|::|V|
            (|COMMON-LISP|::|MULTIPLE-VALUE-LIST| ,|CL-TEST|::|FORM|))
           (,|CL-TEST|::|N| ,|CL-TEST|::|NUM|))
          (|CL-TEST|::|CHECK-VALUES-LENGTH| ,|CL-TEST|::|V| ,|CL-TEST|::|N|
           ',|CL-TEST|::|FORM|)
          (|COMMON-LISP|::|CAR| ,|CL-TEST|::|V|))))))))
  '(|CL-TEST|::|FORM| |COMMON-LISP|::|&OPTIONAL| (|CL-TEST|::|NUM| 1.))))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|CHECK-VALUES-LENGTH|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|RESULTS| |CL-TEST|::|EXPECTED-NUMBER| |CL-TEST|::|FORM|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|MULTIPLE-VALUE-BIND*|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|MULTIPLE-VALUE-BIND*|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|MULTIPLE-VALUE-BIND*|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G6332| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G6333| #1#) (|CL-TEST|::|VARS| #3#)
       (|CL-TEST|::|FORM| (|COMMON-LISP|::|CADDR| . #2#))
       (|CL-TEST|::|BODY| (|COMMON-LISP|::|CDDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|MULTIPLE-VALUE-BIND*|
       (|COMMON-LISP|::|LET|
        ((|CL-TEST|::|LEN| (|COMMON-LISP|::|LENGTH| |CL-TEST|::|VARS|))
         (|CL-TEST|::|V| (|COMMON-LISP|::|GENSYM|)))
        `(|COMMON-LISP|::|LET|
          ((,|CL-TEST|::|V|
            (|COMMON-LISP|::|MULTIPLE-VALUE-LIST| ,|CL-TEST|::|FORM|)))
          (|CL-TEST|::|CHECK-VALUES-LENGTH| ,|CL-TEST|::|V| ,|CL-TEST|::|LEN|
           ',|CL-TEST|::|FORM|)
          (|COMMON-LISP|::|DESTRUCTURING-BIND| ,|CL-TEST|::|VARS|
           ,|CL-TEST|::|V| ,@|CL-TEST|::|BODY|))))))))
  '((|COMMON-LISP|::|&REST| |CL-TEST|::|VARS|) |CL-TEST|::|FORM|
    |COMMON-LISP|::|&BODY| |CL-TEST|::|BODY|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|EQT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X| |CL-TEST|::|Y|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|EQLT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X| |CL-TEST|::|Y|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|EQUALT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X| |CL-TEST|::|Y|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|EQUALPT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X| |CL-TEST|::|Y|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|EQUALPT-OR-REPORT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X| |CL-TEST|::|Y|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|STRING=T|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X| |CL-TEST|::|Y|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|=T|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|X| |COMMON-LISP|::|&REST| |CL-TEST|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|<=T|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|X| |COMMON-LISP|::|&REST| |CL-TEST|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-INT-LIST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|N|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-INT-ARRAY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|N| |COMMON-LISP|::|&OPTIONAL|
    (|CL-TEST|::|FN| #'|COMMON-LISP|::|MAKE-ARRAY|))))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|EQUAL-ARRAY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|A1| |CL-TEST|::|A2|)))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*UNIVERSE*|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|EMPIRICAL-SUBTYPEP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|TYPE1| |CL-TEST|::|TYPE2|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|CHECK-TYPE-PREDICATE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|P| |COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|CHECK-PREDICATE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|PREDICATE| |COMMON-LISP|::|&OPTIONAL| |CL-TEST|::|GUARD|
    (|CL-TEST|::|UNIVERSE| |CL-TEST|::|*UNIVERSE*|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*CATCH-ERROR-TYPE*|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|CATCH-CONTINUE-DEBUGGER-HOOK|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|CONDITION| |CL-TEST|::|DBH|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|CATCH-TYPE-ERROR|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|CATCH-TYPE-ERROR|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|CATCH-TYPE-ERROR|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Evaluate form in safe mode, returning its value if there is no error.\n
If an error does occur, return type-error on TYPE-ERRORs, or the error\n
condition itself on other errors."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|FORM| (|COMMON-LISP|::|CADR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|CATCH-TYPE-ERROR|
       `(|COMMON-LISP|::|LOCALLY|
         (|COMMON-LISP|::|DECLARE|
          (|COMMON-LISP|::|OPTIMIZE| (|COMMON-LISP|::|SAFETY| 3.)))
         (|CL-TEST|::|HANDLER-CASE| (|CL-TEST|::|NORMALLY| ,|CL-TEST|::|FORM|)
          (|COMMON-LISP|::|TYPE-ERROR| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|TYPE-ERROR|)
          (|COMMON-LISP|::|ERROR| (|CL-TEST|::|C|) |CL-TEST|::|C|))))))))
  '(|CL-TEST|::|FORM|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|CLASSIFY-ERROR*|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|CLASSIFY-ERROR*|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|CLASSIFY-ERROR*|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Evaluate form in safe mode, returning its value if there is no error.\n
If an error does occur, return a symbol classify the error, or allow\n
the condition to go uncaught if it cannot be classified."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|FORM| (|COMMON-LISP|::|CADR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|CLASSIFY-ERROR*|
       `(|COMMON-LISP|::|LOCALLY|
         (|COMMON-LISP|::|DECLARE|
          (|COMMON-LISP|::|OPTIMIZE| (|COMMON-LISP|::|SAFETY| 3.)))
         (|CL-TEST|::|HANDLER-CASE| (|CL-TEST|::|NORMALLY| ,|CL-TEST|::|FORM|)
          (|COMMON-LISP|::|UNDEFINED-FUNCTION| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|UNDEFINED-FUNCTION|)
          (|COMMON-LISP|::|PROGRAM-ERROR| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|PROGRAM-ERROR|)
          (|COMMON-LISP|::|PACKAGE-ERROR| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|PACKAGE-ERROR|)
          (|COMMON-LISP|::|TYPE-ERROR| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|TYPE-ERROR|)
          (|COMMON-LISP|::|CONTROL-ERROR| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|CONTROL-ERROR|)
          (|COMMON-LISP|::|PARSE-ERROR| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|PARSE-ERROR|)
          (|COMMON-LISP|::|STREAM-ERROR| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|STREAM-ERROR|)
          (|COMMON-LISP|::|READER-ERROR| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|READER-ERROR|)
          (|COMMON-LISP|::|FILE-ERROR| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|FILE-ERROR|)
          (|COMMON-LISP|::|CELL-ERROR| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|CELL-ERROR|)
          (|COMMON-LISP|::|DIVISION-BY-ZERO| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|DIVISION-BY-ZERO|)
          (|COMMON-LISP|::|FLOATING-POINT-OVERFLOW| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|FLOATING-POINT-OVERFLOW|)
          (|COMMON-LISP|::|FLOATING-POINT-UNDERFLOW| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|FLOATING-POINT-UNDERFLOW|)
          (|COMMON-LISP|::|ARITHMETIC-ERROR| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|ARITHMETIC-ERROR|)
          (|COMMON-LISP|::|ERROR| |COMMON-LISP|::|NIL|
           '|COMMON-LISP|::|ERROR|))))))))
  '(|CL-TEST|::|FORM|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|CLASSIFY-ERROR**|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|FORM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|OPTIMIZE| (|COMMON-LISP|::|SAFETY| 3.)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|CLASSIFY-ERROR|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|CLASSIFY-ERROR|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|CLASSIFY-ERROR|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|FORM| (|COMMON-LISP|::|CADR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|CLASSIFY-ERROR|
       `(|CL-TEST|::|CLASSIFY-ERROR**| ',|CL-TEST|::|FORM|))))))
  '(|CL-TEST|::|FORM|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|SIGNALS-ERROR|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|SIGNALS-ERROR|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|SIGNALS-ERROR|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|FORM|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CL-TEST|::|ERROR-NAME| (|COMMON-LISP|::|CADDR| . #1#))
       (#2=#:|G6862| (|COMMON-LISP|::|CDDDR| . #1#))
       (|COMMON-LISP|::|SAFETY|
        (|COMMON-LISP|::|LET|
         ((#3=#:|KWD-ARG-6863|
           (|COMMON-LISP|::|GETF| #2# ':|SAFETY| '#4=(|COMMON-LISP|::|NIL|))))
         (|COMMON-LISP|::|IF| (|COMMON-LISP|::|EQ| #3# '#4#)
          (|COMMON-LISP|::|PROGN| 3.) #3#)))
       (|CL-TEST|::|NAME-P| |COMMON-LISP|::|T|)
       (|CL-TEST|::|NAME|
        (|COMMON-LISP|::|LET|
         ((#5=#:|KWD-ARG-6864| (|COMMON-LISP|::|GETF| #2# ':|NAME| '#4#)))
         (|COMMON-LISP|::|IF| (|COMMON-LISP|::|EQ| #5# '#4#)
          (|COMMON-LISP|::|PROGN|
           (|COMMON-LISP|::|SETQ| |CL-TEST|::|NAME-P| |COMMON-LISP|::|NIL|)
           |COMMON-LISP|::|NIL|)
          #5#)))
       (|COMMON-LISP|::|INLINE|
        (|COMMON-LISP|::|LET|
         ((#6=#:|KWD-ARG-6865| (|COMMON-LISP|::|GETF| #2# ':|INLINE| '#4#)))
         (|COMMON-LISP|::|IF| (|COMMON-LISP|::|EQ| #6# '#4#)
          (|COMMON-LISP|::|PROGN| |COMMON-LISP|::|NIL|) #6#))))
      (|SYSTEM|::|KEYWORD-TEST| #2# '(:|INLINE| :|NAME| :|SAFETY|))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|SIGNALS-ERROR|
       `(|CL-TEST|::|HANDLER-BIND|
         ((|COMMON-LISP|::|WARNING|
           #'(|COMMON-LISP|::|LAMBDA| (|CL-TEST|::|C|)
              (|COMMON-LISP|::|DECLARE|
               (|COMMON-LISP|::|IGNORE| |CL-TEST|::|C|))
              (|COMMON-LISP|::|MUFFLE-WARNING|))))
         (|COMMON-LISP|::|PROCLAIM|
          '(|COMMON-LISP|::|OPTIMIZE| (|COMMON-LISP|::|SAFETY| 3.)))
         (|CL-TEST|::|HANDLER-CASE|
          (|COMMON-LISP|::|APPLY| #'|COMMON-LISP|::|VALUES|
           |COMMON-LISP|::|NIL|
           (|COMMON-LISP|::|MULTIPLE-VALUE-LIST|
            ,(|COMMON-LISP|::|COND| (|COMMON-LISP|::|INLINE| |CL-TEST|::|FORM|)
              (|REGRESSION-TEST|::|*COMPILE-TESTS*|
               `(|COMMON-LISP|::|FUNCALL|
                 (|COMMON-LISP|::|COMPILE| |COMMON-LISP|::|NIL|
                  '(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
                    (|COMMON-LISP|::|DECLARE|
                     (|COMMON-LISP|::|OPTIMIZE|
                      (|COMMON-LISP|::|SAFETY| ,|COMMON-LISP|::|SAFETY|)))
                    ,|CL-TEST|::|FORM|))))
              (|COMMON-LISP|::|T|
               `(|COMMON-LISP|::|EVAL| ',|CL-TEST|::|FORM|)))))
          (,|CL-TEST|::|ERROR-NAME| (|CL-TEST|::|C|)
           (|COMMON-LISP|::|COND|
            ,@(|COMMON-LISP|::|CASE| |CL-TEST|::|ERROR-NAME|
               (|COMMON-LISP|::|TYPE-ERROR|
                `(((|COMMON-LISP|::|TYPEP|
                    (|COMMON-LISP|::|TYPE-ERROR-DATUM| |CL-TEST|::|C|)
                    (|COMMON-LISP|::|TYPE-ERROR-EXPECTED-TYPE| |CL-TEST|::|C|))
                   (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|NIL|
                    (|COMMON-LISP|::|LIST|
                     (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|TYPEP|
                      (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|QUOTE|
                       (|COMMON-LISP|::|TYPE-ERROR-DATUM| |CL-TEST|::|C|))
                      (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|QUOTE|
                       (|COMMON-LISP|::|TYPE-ERROR-EXPECTED-TYPE|
                        |CL-TEST|::|C|)))
                     "==> true")))))
               ((|COMMON-LISP|::|UNDEFINED-FUNCTION|
                 |COMMON-LISP|::|UNBOUND-VARIABLE|)
                (|COMMON-LISP|::|AND| |CL-TEST|::|NAME-P|
                 `(((|COMMON-LISP|::|NOT|
                     (|COMMON-LISP|::|EQ|
                      (|COMMON-LISP|::|CELL-ERROR-NAME| |CL-TEST|::|C|)
                      ',|CL-TEST|::|NAME|))
                    (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|NIL|
                     (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|CELL-ERROR-NAME|
                      "==>"
                      (|COMMON-LISP|::|CELL-ERROR-NAME| |CL-TEST|::|C|)))))))
               ((|COMMON-LISP|::|STREAM-ERROR| |COMMON-LISP|::|END-OF-FILE|
                 |COMMON-LISP|::|READER-ERROR|)
                `(((|COMMON-LISP|::|NOT|
                    (|COMMON-LISP|::|STREAMP|
                     (|COMMON-LISP|::|STREAM-ERROR-STREAM| |CL-TEST|::|C|)))
                   (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|NIL|
                    (|COMMON-LISP|::|LIST|
                     '|COMMON-LISP|::|STREAM-ERROR-STREAM| "==>"
                     (|COMMON-LISP|::|STREAM-ERROR-STREAM| |CL-TEST|::|C|))))))
               (|COMMON-LISP|::|FILE-ERROR|
                `(((|COMMON-LISP|::|NOT|
                    (|COMMON-LISP|::|PATHNAMEP|
                     (|COMMON-LISP|::|PATHNAME|
                      (|COMMON-LISP|::|FILE-ERROR-PATHNAME| |CL-TEST|::|C|))))
                   (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|NIL|
                    (|COMMON-LISP|::|LIST|
                     '|COMMON-LISP|::|FILE-ERROR-PATHNAME| "==>"
                     (|COMMON-LISP|::|FILE-ERROR-PATHNAME| |CL-TEST|::|C|))))))
               (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL|))
            (|COMMON-LISP|::|T|
             (|CL-TEST|::|PRINTABLE-P| |CL-TEST|::|C|)))))))))))
  '(|CL-TEST|::|FORM| |CL-TEST|::|ERROR-NAME| |COMMON-LISP|::|&KEY|
    (|COMMON-LISP|::|SAFETY| 3.)
    (|CL-TEST|::|NAME| |COMMON-LISP|::|NIL| |CL-TEST|::|NAME-P|)
    (|COMMON-LISP|::|INLINE| |COMMON-LISP|::|NIL|))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|SIGNALS-ERROR-ALWAYS|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|SIGNALS-ERROR-ALWAYS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|SIGNALS-ERROR-ALWAYS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|FORM|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CL-TEST|::|ERROR-NAME| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|SIGNALS-ERROR-ALWAYS|
       `(|COMMON-LISP|::|VALUES|
         (|CL-TEST|::|SIGNALS-ERROR| ,|CL-TEST|::|FORM|
          ,|CL-TEST|::|ERROR-NAME|)
         (|CL-TEST|::|SIGNALS-ERROR| ,|CL-TEST|::|FORM|
          ,|CL-TEST|::|ERROR-NAME| :|SAFETY| 0.)))))))
  '(|CL-TEST|::|FORM| |CL-TEST|::|ERROR-NAME|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|SIGNALS-TYPE-ERROR|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|SIGNALS-TYPE-ERROR|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|SIGNALS-TYPE-ERROR|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 4. 4.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|VAR|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CL-TEST|::|DATUM-FORM| (|COMMON-LISP|::|CADDR| . #1#))
       (|CL-TEST|::|FORM| (|COMMON-LISP|::|CADDDR| . #1#))
       (#2=#:|G6908| (|COMMON-LISP|::|CDDDDR| . #1#))
       (|COMMON-LISP|::|SAFETY|
        (|COMMON-LISP|::|LET|
         ((#3=#:|KWD-ARG-6909|
           (|COMMON-LISP|::|GETF| #2# ':|SAFETY| '#4=(|COMMON-LISP|::|NIL|))))
         (|COMMON-LISP|::|IF| (|COMMON-LISP|::|EQ| #3# '#4#)
          (|COMMON-LISP|::|PROGN| 3.) #3#)))
       (|COMMON-LISP|::|INLINE|
        (|COMMON-LISP|::|LET|
         ((#5=#:|KWD-ARG-6910| (|COMMON-LISP|::|GETF| #2# ':|INLINE| '#4#)))
         (|COMMON-LISP|::|IF| (|COMMON-LISP|::|EQ| #5# '#4#)
          (|COMMON-LISP|::|PROGN| |COMMON-LISP|::|NIL|) #5#))))
      (|SYSTEM|::|KEYWORD-TEST| #2# '(:|INLINE| :|SAFETY|))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|SIGNALS-TYPE-ERROR|
       (|COMMON-LISP|::|LET|
        ((|CL-TEST|::|LAMBDA-FORM|
          `(|COMMON-LISP|::|LAMBDA| (,|CL-TEST|::|VAR|)
            (|COMMON-LISP|::|DECLARE|
             (|COMMON-LISP|::|OPTIMIZE|
              (|COMMON-LISP|::|SAFETY| ,|COMMON-LISP|::|SAFETY|)))
            ,|CL-TEST|::|FORM|)))
        `(|COMMON-LISP|::|LET| ((,|CL-TEST|::|VAR| ,|CL-TEST|::|DATUM-FORM|))
          (|COMMON-LISP|::|DECLARE|
           (|COMMON-LISP|::|OPTIMIZE| |COMMON-LISP|::|SAFETY|))
          (|CL-TEST|::|HANDLER-BIND|
           ((|COMMON-LISP|::|WARNING|
             #'(|COMMON-LISP|::|LAMBDA| (|CL-TEST|::|C|)
                (|COMMON-LISP|::|DECLARE|
                 (|COMMON-LISP|::|IGNORE| |CL-TEST|::|C|))
                (|COMMON-LISP|::|MUFFLE-WARNING|))))
           (|CL-TEST|::|HANDLER-CASE|
            (|COMMON-LISP|::|APPLY| #'|COMMON-LISP|::|VALUES|
             |COMMON-LISP|::|NIL|
             (|COMMON-LISP|::|MULTIPLE-VALUE-LIST|
              (|COMMON-LISP|::|FUNCALL|
               ,(|COMMON-LISP|::|COND|
                 (|COMMON-LISP|::|INLINE| `#',|CL-TEST|::|LAMBDA-FORM|)
                 (|REGRESSION-TEST|::|*COMPILE-TESTS*|
                  `(|COMMON-LISP|::|COMPILE| |COMMON-LISP|::|NIL|
                    ',|CL-TEST|::|LAMBDA-FORM|))
                 (|COMMON-LISP|::|T|
                  `(|COMMON-LISP|::|EVAL| ',|CL-TEST|::|LAMBDA-FORM|)))
               ,|CL-TEST|::|VAR|)))
            (|COMMON-LISP|::|TYPE-ERROR| (|CL-TEST|::|C|)
             (|COMMON-LISP|::|LET|
              ((|CL-TEST|::|DATUM|
                (|COMMON-LISP|::|TYPE-ERROR-DATUM| |CL-TEST|::|C|))
               (|CL-TEST|::|EXPECTED-TYPE|
                (|COMMON-LISP|::|TYPE-ERROR-EXPECTED-TYPE| |CL-TEST|::|C|)))
              (|COMMON-LISP|::|COND|
               ((|COMMON-LISP|::|NOT|
                 (|COMMON-LISP|::|EQL| ,|CL-TEST|::|VAR| |CL-TEST|::|DATUM|))
                (|COMMON-LISP|::|LIST| :|DATUM-MISMATCH| ,|CL-TEST|::|VAR|
                 |CL-TEST|::|DATUM|))
               ((|COMMON-LISP|::|TYPEP| |CL-TEST|::|DATUM|
                 |CL-TEST|::|EXPECTED-TYPE|)
                (|COMMON-LISP|::|LIST| :|IS-TYPEP| |CL-TEST|::|DATUM|
                 |CL-TEST|::|EXPECTED-TYPE|))
               (|COMMON-LISP|::|T|
                (|CL-TEST|::|PRINTABLE-P| |CL-TEST|::|C|))))))))))))))
  '(|CL-TEST|::|VAR| |CL-TEST|::|DATUM-FORM| |CL-TEST|::|FORM|
    |COMMON-LISP|::|&KEY| (|COMMON-LISP|::|SAFETY| 3.)
    (|COMMON-LISP|::|INLINE| |COMMON-LISP|::|NIL|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*MINI-UNIVERSE*|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|CHECK-TYPE-ERROR*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|PRED-FN| |CL-TEST|::|GUARD-FN| |COMMON-LISP|::|&OPTIONAL|
    (|CL-TEST|::|UNIVERSE| |CL-TEST|::|*MINI-UNIVERSE*|))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|CHECK-TYPE-ERROR|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|CHECK-TYPE-ERROR|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|CHECK-TYPE-ERROR|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|LET*|
     ((|CL-TEST|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |CL-TEST|::|CHECK-TYPE-ERROR|
      `(|COMMON-LISP|::|LOCALLY|
        (|COMMON-LISP|::|DECLARE|
         (|COMMON-LISP|::|OPTIMIZE| |COMMON-LISP|::|SAFETY|))
        (|CL-TEST|::|CHECK-TYPE-ERROR*| ,@|CL-TEST|::|ARGS|))))))
  '(|COMMON-LISP|::|&BODY| |CL-TEST|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|PRINTABLE-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|OBJ|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|SUBTYPEP*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|TYPE1| |CL-TEST|::|TYPE2|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|SUBTYPEP*-OR-FAIL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|TYPE1| |CL-TEST|::|TYPE2|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|SUBTYPEP*-NOT-OR-FAIL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|TYPE1| |CL-TEST|::|TYPE2|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|COMPOSE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |CL-TEST|::|FNS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|EVENDIGITP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|C|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|ODDDIGITP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|C|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|NEXTDIGIT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|C|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-EQ-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-NOT-EQ-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-EQL-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-NOT-EQL-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|ONEP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|CHAR-INVERTCASE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|C|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|STRING-INVERTCASE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|S|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|SYMBOL<|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|X| |COMMON-LISP|::|&REST| |CL-TEST|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-LIST-EXPR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|ARGS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|+STANDARD-CHARS+|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|+BASE-CHARS+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|TYPE| |COMMON-LISP|::|SIMPLE-BASE-STRING|
   |CL-TEST|::|+BASE-CHARS+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|+NUM-BASE-CHARS+|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|+ALPHA-CHARS+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|+LOWER-CASE-CHARS+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|+UPPER-CASE-CHARS+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|+ALPHANUMERIC-CHARS+|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|+DIGIT-CHARS+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|+EXTENDED-DIGIT-CHARS+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|TYPE| |COMMON-LISP|::|SIMPLE-BASE-STRING|
   |CL-TEST|::|+ALPHA-CHARS+| |CL-TEST|::|+LOWER-CASE-CHARS+|
   |CL-TEST|::|+UPPER-CASE-CHARS+| |CL-TEST|::|+ALPHANUMERIC-CHARS+|
   |CL-TEST|::|+EXTENDED-DIGIT-CHARS+| |CL-TEST|::|+STANDARD-CHARS+|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|+CODE-CHARS+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|TYPE| |COMMON-LISP|::|SIMPLE-STRING|
   |CL-TEST|::|+CODE-CHARS+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|+REV-CODE-CHARS+|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|HAS-NON-ABORT-RESTART|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|C|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|HANDLE-NON-ABORT-RESTART|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|HANDLE-NON-ABORT-RESTART|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|HANDLE-NON-ABORT-RESTART|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|LET*|
     ((|CL-TEST|::|BODY| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |CL-TEST|::|HANDLE-NON-ABORT-RESTART|
      `(|COMMON-LISP|::|CATCH| '|CL-TEST|::|HANDLED|
        (|CL-TEST|::|HANDLER-BIND|
         ((|COMMON-LISP|::|ERROR| #'|CL-TEST|::|HAS-NON-ABORT-RESTART|))
         ,@|CL-TEST|::|BODY|))))))
  '(|COMMON-LISP|::|&BODY| |CL-TEST|::|BODY|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|ELT-V-6-BODY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-ADJ-ARRAY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|N| |COMMON-LISP|::|&KEY| |CL-TEST|::|INITIAL-CONTENTS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|ELT-ADJ-ARRAY-6-BODY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*DISPLACED*|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-DISPLACED-ARRAY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|N| |CL-TEST|::|DISPLACEMENT|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|ARRAY-UNSIGNED-BYTE-FILL-TEST-FN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|BYTE-SIZE| |COMMON-LISP|::|&REST| |CL-TEST|::|FILL-ARGS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|ARRAY-STRING-FILL-TEST-FN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|A| |COMMON-LISP|::|&REST| |CL-TEST|::|FILL-ARGS|)))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|+FLOAT-TYPES+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*SUBTYPE-TABLE*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*DISJOINT-TYPES-LIST*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*DISJOINT-TYPES-LIST2*|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*TYPES-LIST3*|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|TRIM-LIST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|LIST| |CL-TEST|::|N|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-T-OR-NIL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|E|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-BUILTIN-CLASS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|EVEN-SIZE-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|A|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|SAFE-ELT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X| |CL-TEST|::|N|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|DEFSTRUCT*|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|DEFSTRUCT*|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|DEFSTRUCT*|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|LET*|
     ((|CL-TEST|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |CL-TEST|::|DEFSTRUCT*|
      `(|COMMON-LISP|::|EVAL-WHEN|
        (:|LOAD-TOPLEVEL| :|COMPILE-TOPLEVEL| :|EXECUTE|)
        (|CL-TEST|::|HANDLER-CASE|
         (|COMMON-LISP|::|EVAL|
          '(|COMMON-LISP|::|DEFSTRUCT| ,@|CL-TEST|::|ARGS|))
         (|COMMON-LISP|::|SERIOUS-CONDITION| |COMMON-LISP|::|NIL|
          |COMMON-LISP|::|NIL|)))))))
  '(|COMMON-LISP|::|&BODY| |CL-TEST|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|SAFELY-DELETE-PACKAGE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|PACKAGE-DESIGNATOR|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|DELETE-ALL-VERSIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|PATHSPEC|)))
(|SYSTEM|::|C-PROCLAIM-CONSTANT| '|CL-TEST|::|+FAIL-COUNT-LIMIT+| '20.)
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|FROB-SIMPLE-CONDITION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|C| |CL-TEST|::|EXPECTED-FMT| |COMMON-LISP|::|&REST|
    |CL-TEST|::|EXPECTED-ARGS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|FROB-SIMPLE-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|C| |CL-TEST|::|EXPECTED-FMT| |COMMON-LISP|::|&REST|
    |CL-TEST|::|EXPECTED-ARGS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|FROB-SIMPLE-WARNING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|C| |CL-TEST|::|EXPECTED-FMT| |COMMON-LISP|::|&REST|
    |CL-TEST|::|EXPECTED-ARGS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*ARRAY-ELEMENT-TYPES*|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|COLLECT-PROPERTIES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|PLIST| |CL-TEST|::|PROP|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|DEF-MACRO-TEST|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|DEF-MACRO-TEST|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|DEF-MACRO-TEST|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|TEST-NAME|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CL-TEST|::|MACRO-FORM| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|DEF-MACRO-TEST|
       (|COMMON-LISP|::|LET|
        ((|CL-TEST|::|MACRO-NAME|
          (|COMMON-LISP|::|CAR| |CL-TEST|::|MACRO-FORM|)))
        (|COMMON-LISP|::|ASSERT|
         (|COMMON-LISP|::|SYMBOLP| |CL-TEST|::|MACRO-NAME|))
        `(|REGRESSION-TEST|::|DEFTEST| ,|CL-TEST|::|TEST-NAME|
          (|COMMON-LISP|::|VALUES|
           (|CL-TEST|::|SIGNALS-ERROR|
            (|COMMON-LISP|::|FUNCALL|
             (|COMMON-LISP|::|MACRO-FUNCTION| ',|CL-TEST|::|MACRO-NAME|))
            |COMMON-LISP|::|PROGRAM-ERROR|)
           (|CL-TEST|::|SIGNALS-ERROR|
            (|COMMON-LISP|::|FUNCALL|
             (|COMMON-LISP|::|MACRO-FUNCTION| ',|CL-TEST|::|MACRO-NAME|)
             ',|CL-TEST|::|MACRO-FORM|)
            |COMMON-LISP|::|PROGRAM-ERROR|)
           (|CL-TEST|::|SIGNALS-ERROR|
            (|COMMON-LISP|::|FUNCALL|
             (|COMMON-LISP|::|MACRO-FUNCTION| ',|CL-TEST|::|MACRO-NAME|)
             ',|CL-TEST|::|MACRO-FORM| |COMMON-LISP|::|NIL|
             |COMMON-LISP|::|NIL|)
            |COMMON-LISP|::|PROGRAM-ERROR|))
          |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)))))))
  '(|CL-TEST|::|TEST-NAME| |CL-TEST|::|MACRO-FORM|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|TYPEP*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|ELEMENT| |COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|APPLYF|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|FN| |COMMON-LISP|::|&REST| |CL-TEST|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|SLOT-BOUNDP*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|OBJECT| |CL-TEST|::|SLOT|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|SLOT-EXISTS-P*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|OBJECT| |CL-TEST|::|SLOT|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAP-SLOT-BOUNDP*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|C| |CL-TEST|::|SLOTS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAP-SLOT-EXISTS-P*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|C| |CL-TEST|::|SLOTS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAP-SLOT-VALUE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|C| |CL-TEST|::|SLOTS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAP-TYPEP*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|OBJECT| |CL-TEST|::|TYPES|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|SLOT-VALUE-OR-NIL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|OBJECT| |CL-TEST|::|SLOT-NAME|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-NONCONTIGUOUS-SUBLIST-OF|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|LIST1| |CL-TEST|::|LIST2|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|DEFHARMLESS|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|DEFHARMLESS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|DEFHARMLESS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|NAME|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CL-TEST|::|FORM| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|DEFHARMLESS|
       `(|REGRESSION-TEST|::|DEFTEST| ,|CL-TEST|::|NAME|
         (|COMMON-LISP|::|BLOCK| |CL-TEST|::|DONE|
          (|COMMON-LISP|::|LET|
           ((|COMMON-LISP|::|*DEBUGGER-HOOK*|
             #'(|COMMON-LISP|::|LAMBDA|
                (|COMMON-LISP|::|&REST| |CL-TEST|::|ARGS|)
                (|COMMON-LISP|::|DECLARE|
                 (|COMMON-LISP|::|IGNORE| |CL-TEST|::|ARGS|))
                (|COMMON-LISP|::|RETURN-FROM| |CL-TEST|::|DONE| :|GOOD|))))
           (|CL-TEST|::|HANDLER-CASE|
            (|COMMON-LISP|::|UNWIND-PROTECT|
             (|COMMON-LISP|::|EVAL| ',|CL-TEST|::|FORM|)
             (|COMMON-LISP|::|RETURN-FROM| |CL-TEST|::|DONE| :|GOOD|))
            (|COMMON-LISP|::|CONDITION| |COMMON-LISP|::|NIL| :|GOOD|))))
         :|GOOD|))))))
  '(|CL-TEST|::|NAME| |CL-TEST|::|FORM|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|RATIONAL-SAFELY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*SIMILARITY-LIST*|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-SIMILAR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X| |CL-TEST|::|Y|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-SIMILAR*|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-SIMILAR*|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-SIMILAR*|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-SIMILAR*|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-SIMILAR*|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-SIMILAR*|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-SIMILAR*|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-SIMILAR*|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-SIMILAR*|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-SIMILAR*|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|IS-SIMILAR*|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*INITIAL-PRINT-PPRINT-DISPATCH*|))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|MY-WITH-STANDARD-IO-SYNTAX|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|MY-WITH-STANDARD-IO-SYNTAX|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|MY-WITH-STANDARD-IO-SYNTAX|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|LET*|
     ((|CL-TEST|::|BODY| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |CL-TEST|::|MY-WITH-STANDARD-IO-SYNTAX|
      `(|COMMON-LISP|::|LET|
        ((|COMMON-LISP|::|*PACKAGE*|
          (|COMMON-LISP|::|FIND-PACKAGE| "COMMON-LISP-USER"))
         (|COMMON-LISP|::|*PRINT-ARRAY*| |COMMON-LISP|::|T|)
         (|COMMON-LISP|::|*PRINT-BASE*| 10.)
         (|COMMON-LISP|::|*PRINT-CASE*| :|UPCASE|)
         (|COMMON-LISP|::|*PRINT-CIRCLE*| |COMMON-LISP|::|NIL|)
         (|COMMON-LISP|::|*PRINT-ESCAPE*| |COMMON-LISP|::|T|)
         (|COMMON-LISP|::|*PRINT-GENSYM*| |COMMON-LISP|::|T|)
         (|COMMON-LISP|::|*PRINT-LENGTH*| |COMMON-LISP|::|NIL|)
         (|COMMON-LISP|::|*PRINT-LEVEL*| |COMMON-LISP|::|NIL|)
         (|COMMON-LISP|::|*PRINT-LINES*| |COMMON-LISP|::|NIL|)
         (|COMMON-LISP|::|*PRINT-MISER-WIDTH*| |COMMON-LISP|::|NIL|)
         (|COMMON-LISP|::|*PRINT-PPRINT-DISPATCH*|
          |CL-TEST|::|*INITIAL-PRINT-PPRINT-DISPATCH*|)
         (|COMMON-LISP|::|*PRINT-PRETTY*| |COMMON-LISP|::|NIL|)
         (|COMMON-LISP|::|*PRINT-RADIX*| |COMMON-LISP|::|NIL|)
         (|COMMON-LISP|::|*PRINT-READABLY*| |COMMON-LISP|::|T|)
         (|COMMON-LISP|::|*PRINT-RIGHT-MARGIN*| |COMMON-LISP|::|NIL|)
         (|COMMON-LISP|::|*READ-BASE*| 10.)
         (|COMMON-LISP|::|*READ-DEFAULT-FLOAT-FORMAT*|
          '|COMMON-LISP|::|SINGLE-FLOAT|)
         (|COMMON-LISP|::|*READ-EVAL*| |COMMON-LISP|::|T|)
         (|COMMON-LISP|::|*READ-SUPPRESS*| |COMMON-LISP|::|NIL|)
         (|COMMON-LISP|::|*READTABLE*|
          (|COMMON-LISP|::|COPY-READTABLE| |COMMON-LISP|::|NIL|)))
        ,@|CL-TEST|::|BODY|)))))
  '(|COMMON-LISP|::|&BODY| |CL-TEST|::|BODY|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-SPECIAL-STRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STRING| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|FILL|
    |CL-TEST|::|ADJUST| |CL-TEST|::|DISPLACE| |CL-TEST|::|BASE|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|DO-SPECIAL-STRINGS|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|DO-SPECIAL-STRINGS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|DO-SPECIAL-STRINGS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G8110| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G8111|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 2. 3. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|CL-TEST|::|DO-SPECIAL-STRINGS| #1#
          '#4=(|CL-TEST|::|VAR| |CL-TEST|::|STRING-FORM|
               |COMMON-LISP|::|&OPTIONAL| |CL-TEST|::|RET-FORM|))
         #1#))
       (|CL-TEST|::|VAR| (|COMMON-LISP|::|CAR| #3#))
       (|CL-TEST|::|STRING-FORM| (|COMMON-LISP|::|CADR| . #5=(#3#)))
       (|CL-TEST|::|RET-FORM| (|COMMON-LISP|::|CADDR| . #5#))
       (|CL-TEST|::|FORMS| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|DO-SPECIAL-STRINGS|
       (|COMMON-LISP|::|LET|
        ((|COMMON-LISP|::|STRING| (|COMMON-LISP|::|GENSYM|))
         (|COMMON-LISP|::|FILL| (|COMMON-LISP|::|GENSYM| "FILL"))
         (|CL-TEST|::|ADJUST| (|COMMON-LISP|::|GENSYM| "ADJUST"))
         (|CL-TEST|::|BASE| (|COMMON-LISP|::|GENSYM| "BASE"))
         (|CL-TEST|::|DISPLACE| (|COMMON-LISP|::|GENSYM| "DISPLACE")))
        `(|COMMON-LISP|::|LET|
          ((,|COMMON-LISP|::|STRING| ,|CL-TEST|::|STRING-FORM|))
          (|COMMON-LISP|::|DOLIST|
           (,|COMMON-LISP|::|FILL| '(|COMMON-LISP|::|NIL| |COMMON-LISP|::|T|)
            ,|CL-TEST|::|RET-FORM|)
           (|COMMON-LISP|::|DOLIST|
            (,|CL-TEST|::|ADJUST| '(|COMMON-LISP|::|NIL| |COMMON-LISP|::|T|))
            (|COMMON-LISP|::|DOLIST|
             (,|CL-TEST|::|BASE| '(|COMMON-LISP|::|NIL| |COMMON-LISP|::|T|))
             (|COMMON-LISP|::|DOLIST|
              (,|CL-TEST|::|DISPLACE|
               '(|COMMON-LISP|::|NIL| |COMMON-LISP|::|T|))
              (|COMMON-LISP|::|LET|
               ((,|CL-TEST|::|VAR|
                 (|CL-TEST|::|MAKE-SPECIAL-STRING| ,|COMMON-LISP|::|STRING|
                  :|FILL| ,|COMMON-LISP|::|FILL| :|ADJUST| ,|CL-TEST|::|ADJUST|
                  :|BASE| ,|CL-TEST|::|BASE| :|DISPLACE|
                  ,|CL-TEST|::|DISPLACE|)))
               ,@|CL-TEST|::|FORMS|))))))))))))
  '(#4# |COMMON-LISP|::|&BODY| |CL-TEST|::|FORMS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-SPECIAL-INTEGER-VECTOR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|CONTENTS| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|FILL|
    |CL-TEST|::|ADJUST| |CL-TEST|::|DISPLACE|
    (|CL-TEST|::|ETYPE| '|COMMON-LISP|::|INTEGER|))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|DO-SPECIAL-INTEGER-VECTORS|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|DO-SPECIAL-INTEGER-VECTORS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|DO-SPECIAL-INTEGER-VECTORS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G8167| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G8168|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 2. 3. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|CL-TEST|::|DO-SPECIAL-INTEGER-VECTORS| #1#
          '#4=(|CL-TEST|::|VAR| |CL-TEST|::|VEC-FORM|
               |COMMON-LISP|::|&OPTIONAL| |CL-TEST|::|RET-FORM|))
         #1#))
       (|CL-TEST|::|VAR| (|COMMON-LISP|::|CAR| #3#))
       (|CL-TEST|::|VEC-FORM| (|COMMON-LISP|::|CADR| . #5=(#3#)))
       (|CL-TEST|::|RET-FORM| (|COMMON-LISP|::|CADDR| . #5#))
       (|CL-TEST|::|FORMS| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|DO-SPECIAL-INTEGER-VECTORS|
       (|COMMON-LISP|::|LET|
        ((|COMMON-LISP|::|VECTOR| (|COMMON-LISP|::|GENSYM|))
         (|COMMON-LISP|::|FILL| (|COMMON-LISP|::|GENSYM| "FILL"))
         (|CL-TEST|::|ADJUST| (|COMMON-LISP|::|GENSYM| "ADJUST"))
         (|CL-TEST|::|ETYPE| (|COMMON-LISP|::|GENSYM| "ETYPE"))
         (|CL-TEST|::|DISPLACE| (|COMMON-LISP|::|GENSYM| "DISPLACE")))
        `(|COMMON-LISP|::|LET|
          ((,|COMMON-LISP|::|VECTOR| ,|CL-TEST|::|VEC-FORM|))
          (|COMMON-LISP|::|DOLIST|
           (,|COMMON-LISP|::|FILL| '(|COMMON-LISP|::|NIL| |COMMON-LISP|::|T|)
            ,|CL-TEST|::|RET-FORM|)
           (|COMMON-LISP|::|DOLIST|
            (,|CL-TEST|::|ADJUST| '(|COMMON-LISP|::|NIL| |COMMON-LISP|::|T|))
            (|COMMON-LISP|::|DOLIST|
             (,|CL-TEST|::|ETYPE|
              ',(|COMMON-LISP|::|APPEND|
                 (|COMMON-LISP|::|LOOP| |CL-TEST|::|FOR| |CL-TEST|::|I|
                  |CL-TEST|::|FROM| 1. |CL-TEST|::|TO| 32. |CL-TEST|::|COLLECT|
                  `(|COMMON-LISP|::|UNSIGNED-BYTE| ,|CL-TEST|::|I|))
                 (|COMMON-LISP|::|LOOP| |CL-TEST|::|FOR| |CL-TEST|::|I|
                  |CL-TEST|::|FROM| 2. |CL-TEST|::|TO| 32. |CL-TEST|::|COLLECT|
                  `(|COMMON-LISP|::|SIGNED-BYTE| ,|CL-TEST|::|I|))
                 '(|COMMON-LISP|::|INTEGER|)))
             (|COMMON-LISP|::|DOLIST|
              (,|CL-TEST|::|DISPLACE|
               '(|COMMON-LISP|::|NIL| |COMMON-LISP|::|T|))
              (|COMMON-LISP|::|LET|
               ((,|CL-TEST|::|VAR|
                 (|CL-TEST|::|MAKE-SPECIAL-INTEGER-VECTOR|
                  ,|COMMON-LISP|::|VECTOR| :|FILL| ,|COMMON-LISP|::|FILL|
                  :|ADJUST| ,|CL-TEST|::|ADJUST| :|ETYPE| ,|CL-TEST|::|ETYPE|
                  :|DISPLACE| ,|CL-TEST|::|DISPLACE|)))
               ,@|CL-TEST|::|FORMS|))))))))))))
  '(#4# |COMMON-LISP|::|&BODY| |CL-TEST|::|FORMS|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|STRING-DESIGNATOR-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|APPROX=|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|X| |CL-TEST|::|Y| |COMMON-LISP|::|&OPTIONAL|
    (|CL-TEST|::|EPS| (|CL-TEST|::|EPSILON| |CL-TEST|::|X|)))))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|EPSILON|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|NUMBER|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|NEGATIVE-EPSILON|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|NUMBER|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|SEQUENCEP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|TYPEF|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|PACKAGE-DESIGNATOR-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|X|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|DEF-FOLD-TEST|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|DEF-FOLD-TEST|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|DEF-FOLD-TEST|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Create a test that FORM, which should produce a fresh value,\n
   does not improperly introduce sharing during constant folding."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|NAME|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CL-TEST|::|FORM| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|DEF-FOLD-TEST|
       `(|REGRESSION-TEST|::|DEFTEST| ,|CL-TEST|::|NAME|
         (|COMMON-LISP|::|FLET|
          ((|CL-TEST|::|%F| |COMMON-LISP|::|NIL|
            (|COMMON-LISP|::|DECLARE|
             (|COMMON-LISP|::|OPTIMIZE| (|COMMON-LISP|::|SPEED| 3.)
              (|COMMON-LISP|::|SAFETY| 0.) (|COMMON-LISP|::|SPACE| 0.)
              (|COMMON-LISP|::|COMPILATION-SPEED| 0.)
              (|COMMON-LISP|::|DEBUG| 0.)))
            ,|CL-TEST|::|FORM|))
          (|COMMON-LISP|::|EQ| (|CL-TEST|::|%F|) (|CL-TEST|::|%F|)))
         |COMMON-LISP|::|NIL|))))))
  '(|CL-TEST|::|NAME| |CL-TEST|::|FORM|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|EXPAND-IN-CURRENT-ENV|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|EXPAND-IN-CURRENT-ENV|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|EXPAND-IN-CURRENT-ENV|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |CL-TEST|::|ENV|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|MACRO-FORM|
        (|COMMON-LISP|::|CADR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|EXPAND-IN-CURRENT-ENV|
       (|COMMON-LISP|::|MACROEXPAND| |CL-TEST|::|MACRO-FORM|
        |CL-TEST|::|ENV|))))))
  '(|CL-TEST|::|MACRO-FORM| |COMMON-LISP|::|&ENVIRONMENT| |CL-TEST|::|ENV|)))
