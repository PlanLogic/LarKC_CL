#0Y_ #0Y |CHARSET|::|UTF-8|
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "CL-TEST"))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|+STANDARD-CHARS+|
   |CL-TEST|::|*CL-SYMBOLS-VECTOR*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*MAXIMUM-RANDOM-INT-BITS*|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|RANDOM-FROM-SEQ|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|SEQ|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|RANDOM-CASE|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|RANDOM-CASE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|RANDOM-CASE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|LET*|
     ((|CL-TEST|::|CASES| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |CL-TEST|::|RANDOM-CASE|
      (|COMMON-LISP|::|LET|
       ((|CL-TEST|::|LEN| (|COMMON-LISP|::|LENGTH| |CL-TEST|::|CASES|)))
       (|COMMON-LISP|::|ASSERT| (|COMMON-LISP|::|>| |CL-TEST|::|LEN| 0.))
       `(|COMMON-LISP|::|CASE| (|COMMON-LISP|::|RANDOM| ,|CL-TEST|::|LEN|)
         ,@(|COMMON-LISP|::|LOOP| |CL-TEST|::|FOR| |CL-TEST|::|I|
            |CL-TEST|::|FROM| 0. |CL-TEST|::|FOR| |CL-TEST|::|E|
            |CL-TEST|::|IN| |CL-TEST|::|CASES| |CL-TEST|::|COLLECT|
            `(,|CL-TEST|::|I| ,|CL-TEST|::|E|))
         (|COMMON-LISP|::|T|
          (|COMMON-LISP|::|ERROR| "Can't happen?! (in random-case)~%"))))))))
  '(|COMMON-LISP|::|&BODY| |CL-TEST|::|CASES|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|RCASE|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|RCASE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|RCASE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Usage: (RCASE (<weight> <form>+)+), where <weight> is a positive real\n
   indicating the relative probability of executing the associated implicit\n
   progn."
    (|COMMON-LISP|::|LET*|
     ((|CL-TEST|::|CASES| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |CL-TEST|::|RCASE|
      (|COMMON-LISP|::|ASSERT| |CL-TEST|::|CASES|)
      (|COMMON-LISP|::|LET*|
       ((|CL-TEST|::|WEIGHTS|
         (|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|CAR| |CL-TEST|::|CASES|))
        (|CL-TEST|::|CUMULATIVE-WEIGHTS|
         (|COMMON-LISP|::|LET| ((|CL-TEST|::|SUM| 0.))
          (|COMMON-LISP|::|LOOP| |CL-TEST|::|FOR| |CL-TEST|::|W|
           |CL-TEST|::|IN| |CL-TEST|::|WEIGHTS| |CL-TEST|::|COLLECT|
           (|COMMON-LISP|::|INCF| |CL-TEST|::|SUM| |CL-TEST|::|W|))))
        (|CL-TEST|::|TOTAL|
         (|COMMON-LISP|::|CAR|
          (|COMMON-LISP|::|LAST| |CL-TEST|::|CUMULATIVE-WEIGHTS|)))
        (|CL-TEST|::|R| (|COMMON-LISP|::|GENSYM|)))
       (|COMMON-LISP|::|ASSERT|
        (|COMMON-LISP|::|EVERY| #'|COMMON-LISP|::|PLUSP| |CL-TEST|::|WEIGHTS|))
       (|COMMON-LISP|::|WHEN|
        (|COMMON-LISP|::|TYPEP| |CL-TEST|::|TOTAL| '|COMMON-LISP|::|RATIO|)
        (|COMMON-LISP|::|SETF| |CL-TEST|::|TOTAL|
         (|COMMON-LISP|::|COERCE| |CL-TEST|::|TOTAL|
          '|COMMON-LISP|::|DOUBLE-FLOAT|)))
       `(|COMMON-LISP|::|LET|
         ((,|CL-TEST|::|R| (|COMMON-LISP|::|RANDOM| ,|CL-TEST|::|TOTAL|)))
         (|COMMON-LISP|::|COND|
          ,@(|COMMON-LISP|::|LOOP| |CL-TEST|::|FOR| |COMMON-LISP|::|CASE|
             |CL-TEST|::|IN| (|COMMON-LISP|::|BUTLAST| |CL-TEST|::|CASES|)
             |CL-TEST|::|FOR| |CL-TEST|::|CW| |CL-TEST|::|IN|
             |CL-TEST|::|CUMULATIVE-WEIGHTS| |CL-TEST|::|COLLECT|
             `((|COMMON-LISP|::|<| ,|CL-TEST|::|R| ,|CL-TEST|::|CW|)
               ,@(|COMMON-LISP|::|CDR| |COMMON-LISP|::|CASE|)))
          (|COMMON-LISP|::|T|
           ,@(|COMMON-LISP|::|CDAR|
              (|COMMON-LISP|::|LAST| |CL-TEST|::|CASES|))))))))))
  '(|COMMON-LISP|::|&BODY| |CL-TEST|::|CASES|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|RSELECT|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|RSELECT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|RSELECT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|CUMULATIVE-FREQUENCY-ARRAY|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CL-TEST|::|CASES| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|RSELECT|
       (|COMMON-LISP|::|LET|
        ((|CL-TEST|::|LEN| (|COMMON-LISP|::|LENGTH| |CL-TEST|::|CASES|))
         (|CL-TEST|::|A| (|COMMON-LISP|::|GENSYM| "A"))
         (|COMMON-LISP|::|MAX| (|COMMON-LISP|::|GENSYM| "MAX"))
         (|CL-TEST|::|R| (|COMMON-LISP|::|GENSYM| "R"))
         (|CL-TEST|::|P| (|COMMON-LISP|::|GENSYM| "P"))
         (|CL-TEST|::|DONE| (|COMMON-LISP|::|GENSYM| "DONE")))
        (|COMMON-LISP|::|ASSERT| (|COMMON-LISP|::|>| |CL-TEST|::|LEN| 0.))
        `(|COMMON-LISP|::|LET|
          ((,|CL-TEST|::|A| ,|CL-TEST|::|CUMULATIVE-FREQUENCY-ARRAY|))
          (|COMMON-LISP|::|ASSERT|
           (|COMMON-LISP|::|EQL| ,|CL-TEST|::|LEN|
            (|COMMON-LISP|::|LENGTH| ,|CL-TEST|::|A|)))
          (|COMMON-LISP|::|LET*|
           ((,|COMMON-LISP|::|MAX|
             (|COMMON-LISP|::|AREF| ,|CL-TEST|::|A|
              ,(|COMMON-LISP|::|1-| |CL-TEST|::|LEN|)))
            (,|CL-TEST|::|R| (|COMMON-LISP|::|RANDOM| ,|COMMON-LISP|::|MAX|)))
           (|COMMON-LISP|::|BLOCK| ,|CL-TEST|::|DONE|
            ,@(|COMMON-LISP|::|LOOP| |CL-TEST|::|FOR| |CL-TEST|::|I|
               |CL-TEST|::|FROM| 0. |CL-TEST|::|FOR| |CL-TEST|::|C|
               |CL-TEST|::|IN| |CL-TEST|::|CASES| |CL-TEST|::|COLLECT|
               `(|COMMON-LISP|::|LET|
                 ((,|CL-TEST|::|P|
                   (|COMMON-LISP|::|AREF| ,|CL-TEST|::|A| ,|CL-TEST|::|I|)))
                 (|COMMON-LISP|::|WHEN|
                  (|COMMON-LISP|::|<| ,|CL-TEST|::|R| ,|CL-TEST|::|P|)
                  (|COMMON-LISP|::|RETURN-FROM| ,|CL-TEST|::|DONE|
                   ,|CL-TEST|::|C|))))
            (|COMMON-LISP|::|ERROR| "Should not happen!"))))))))))
  '(|CL-TEST|::|CUMULATIVE-FREQUENCY-ARRAY| |COMMON-LISP|::|&REST|
    |CL-TEST|::|CASES|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-RANDOM-INTEGER-RANGE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL| |CL-TEST|::|VAR|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|RANDOM-NONNEGATIVE-REAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-RANDOM-INTEGER|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-RANDOM-RATIONAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-RANDOM-NONNEGATIVE-RATIONAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-RANDOM-POSITIVE-RATIONAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-RANDOM-BOUNDED-RATIONAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|UPPER-LIMIT| |CL-TEST|::|LOWER-INCLUSIVE|
    |CL-TEST|::|UPPER-INCLUSIVE|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-RANDOM-FLOAT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-RANDOM-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|RANDOM-REAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|RANDOM-FIXNUM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|RANDOM-THING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|N|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*USE-RANDOM-BYTE*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*RANDOM-READABLE*|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|MAKE-RANDOM-STRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|SIZE-SPEC| |COMMON-LISP|::|&KEY| |CL-TEST|::|SIMPLE|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|RANDOM-LEAF|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|RANDOM-FROM-INTERVAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CL-TEST|::|UPPER| |COMMON-LISP|::|&OPTIONAL|
    (|CL-TEST|::|LOWER| (|COMMON-LISP|::|-| |CL-TEST|::|UPPER|)))))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|COIN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL| (|CL-TEST|::|N| 2.))))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|RANDOM-PERMUTE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|SEQ|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|BINOMIAL-DISTRIBUTION-TEST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|N| |CL-TEST|::|FN|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|RANDOM-PARTITION*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|N| |CL-TEST|::|P|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|RANDOM-PARTITION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|N| |CL-TEST|::|P|)))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|POSITIVE-INTEGER-QUALIFIER-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CL-TEST|::|QUALIFIERS|)))
