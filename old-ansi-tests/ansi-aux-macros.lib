#0Y_ #0Y |CHARSET|::|UTF-8|
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "CL-TEST"))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|OPTIMIZE| (|COMMON-LISP|::|SAFETY| 3.)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|HANDLER-CASE|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|HANDLER-CASE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|HANDLER-CASE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|FORM|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CL-TEST|::|CASES| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|HANDLER-CASE|
       `(|COMMON-LISP|::|LET| |COMMON-LISP|::|NIL|
         (|COMMON-LISP|::|HANDLER-CASE| ,|CL-TEST|::|FORM|
          ,@|CL-TEST|::|CASES|)))))))
  '(|CL-TEST|::|FORM| |COMMON-LISP|::|&REST| |CL-TEST|::|CASES|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|HANDLER-BIND|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|HANDLER-BIND|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|HANDLER-BIND|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|HANDLERS|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CL-TEST|::|BODY| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|HANDLER-BIND|
       `(|COMMON-LISP|::|LET| |COMMON-LISP|::|NIL|
         (|COMMON-LISP|::|HANDLER-BIND| ,|CL-TEST|::|HANDLERS|
          (|CL-TEST|::|NORMALLY|
           (|COMMON-LISP|::|PROGN| ,@|CL-TEST|::|BODY|)))))))))
  '(|CL-TEST|::|HANDLERS| |COMMON-LISP|::|&REST| |CL-TEST|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*SHOULD-ALWAYS-BE-TRUE*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |CL-TEST|::|SHOULD-NEVER-BE-CALLED|))
(|SYSTEM|::|C-DEFUN| '|CL-TEST|::|SHOULD-NEVER-BE-CALLED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|NORMALLY|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|NORMALLY|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|NORMALLY|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-TEST|::|FORM|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CL-TEST|::|DEFAULT-FORM|
        (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CDDR| . #1#)
         (|COMMON-LISP|::|CADDR| . #1#)
         #2='(|CL-TEST|::|SHOULD-NEVER-BE-CALLED|))))
      (|COMMON-LISP|::|BLOCK| |CL-TEST|::|NORMALLY|
       `(|COMMON-LISP|::|IF| |CL-TEST|::|*SHOULD-ALWAYS-BE-TRUE*|
         ,|CL-TEST|::|FORM| ,|CL-TEST|::|DEFAULT-FORM|))))))
  '(|CL-TEST|::|FORM| |COMMON-LISP|::|&OPTIONAL|
    (|CL-TEST|::|DEFAULT-FORM| #2#))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-TEST|::|*REPORT-AND-IGNORE-ERRORS-BREAK*|))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-TEST|::|REPORT-AND-IGNORE-ERRORS|)
(|SYSTEM|::|%PUTD| '|CL-TEST|::|REPORT-AND-IGNORE-ERRORS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-TEST|::|REPORT-AND-IGNORE-ERRORS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|LET*|
     ((|CL-TEST|::|BODY| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |CL-TEST|::|REPORT-AND-IGNORE-ERRORS|
      `(|COMMON-LISP|::|EVAL-WHEN|
        (:|LOAD-TOPLEVEL| :|COMPILE-TOPLEVEL| :|EXECUTE|)
        (|COMMON-LISP|::|PROGN|
         (|CL-TEST|::|HANDLER-CASE|
          (|COMMON-LISP|::|PROGN| ,@|CL-TEST|::|BODY|)
          (|COMMON-LISP|::|ERROR| (|COMMON-LISP|::|CONDITION|)
           (|COMMON-LISP|::|PRINC| |COMMON-LISP|::|CONDITION|)
           (|COMMON-LISP|::|TERPRI|)
           (|COMMON-LISP|::|WHEN| |CL-TEST|::|*REPORT-AND-IGNORE-ERRORS-BREAK*|
            (|COMMON-LISP|::|BREAK|))
           (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|NIL|
            |COMMON-LISP|::|CONDITION|)))))))))
  '(|COMMON-LISP|::|&BODY| |CL-TEST|::|BODY|)))
