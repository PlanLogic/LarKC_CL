/* Generated By:JavaCC: Do not edit this line. SubLParserTokenManager.java */
package com.cyc.tool.subl.parser;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.*;
import com.cyc.tool.subl.jrtl.nativeCode.type.exception.*;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.*;
import com.cyc.tool.subl.jrtl.nativeCode.type.operator.*;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.*;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.*;
import java.io.*;

public class SubLParserTokenManager implements SubLParserConstants
{
private int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1000L) != 0L)
            return 177;
         if ((active0 & 0x10L) != 0L)
            return 178;
         if ((active0 & 0x800L) != 0L)
            return 179;
         if ((active0 & 0x21e060L) != 0L)
            return 31;
         return -1;
      default :
         return -1;
   }
}
private int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_0(0, 12, 177);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x21e060L);
      case 39:
         return jjStopAtPos(0, 7);
      case 40:
         return jjStopAtPos(0, 1);
      case 41:
         return jjStopAtPos(0, 2);
      case 44:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 46:
         return jjStartNfaWithStates_0(0, 11, 179);
      case 58:
         return jjStopAtPos(0, 3);
      case 59:
         return jjStopAtPos(0, 20);
      case 96:
         return jjStopAtPos(0, 8);
      case 124:
         return jjStartNfaWithStates_0(0, 4, 178);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 40:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 43:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 45:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 46:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      case 58:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 64:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 124:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 177;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 178:
               case 12:
               case 14:
                  jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if ((0xf3ffec7200000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAddTwoStates(16, 18);
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  else if (curChar == 35)
                     jjAddStates(3, 6);
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAddStates(10, 16);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  else if (curChar == 46)
                     jjCheckNAdd(2);
                  break;
               case 177:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 34)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 179:
                  if ((0xf3ffec7200000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAddTwoStates(16, 18);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  break;
               case 1:
                  if (curChar == 46)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 7:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 9:
                  jjCheckNAddStates(7, 9);
                  break;
               case 10:
                  if (curChar == 34 && kind > 42)
                     kind = 42;
                  break;
               case 17:
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(16, 18);
                  break;
               case 18:
                  if ((0xf3ffec7200000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(16, 18);
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 21:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 1);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 46 && kind > 29)
                     kind = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddStates(10, 16);
                  break;
               case 30:
                  if (curChar == 35)
                     jjAddStates(3, 6);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(35);
                  break;
               case 116:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 139:
                  if (curChar == 49 && kind > 33)
                     kind = 33;
                  break;
               case 141:
                  if (curChar == 50 && kind > 33)
                     kind = 33;
                  break;
               case 143:
                  if (curChar == 51 && kind > 33)
                     kind = 33;
                  break;
               case 145:
                  if (curChar == 52 && kind > 33)
                     kind = 33;
                  break;
               case 149:
                  if (curChar == 45)
                     jjCheckNAddStates(24, 40);
                  break;
               case 154:
                  if (curChar == 45)
                     jjCheckNAddStates(41, 58);
                  break;
               case 163:
                  if ((0xfffffffe00000000L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 165:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(162, 163);
                  break;
               case 170:
                  if (curChar == 45)
                     jjCheckNAddStates(59, 61);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 178:
                  if ((0xefffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 0:
                  if ((0x6ffffffeefffffffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAddTwoStates(16, 18);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 124)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 177:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 31:
                  if ((0x100800401008004L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  else if (curChar == 92)
                     jjCheckNAddStates(62, 65);
                  if (curChar == 92)
                     jjCheckNAddStates(66, 83);
                  break;
               case 179:
                  if ((0x6ffffffeefffffffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAddTwoStates(16, 18);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 3:
                  if ((0x8107000081070L & l) != 0L)
                     jjAddStates(84, 85);
                  break;
               case 7:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 8:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  jjCheckNAddStates(7, 9);
                  break;
               case 11:
                  if (curChar == 124)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if ((0xefffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  jjCheckNAddStates(0, 2);
                  break;
               case 15:
                  if (curChar == 124 && kind > 43)
                     kind = 43;
                  break;
               case 16:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(16, 18);
                  break;
               case 18:
                  if ((0x6ffffffeefffffffL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(16, 18);
                  break;
               case 23:
                  if ((0x8107000081070L & l) != 0L)
                     jjAddStates(86, 87);
                  break;
               case 33:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x100800401008004L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 37:
                  if (curChar == 92)
                     jjCheckNAddStates(66, 83);
                  break;
               case 38:
                  if (curChar == 92)
                     jjCheckNAddStates(88, 103);
                  break;
               case 39:
                  if ((0x400000004L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 40:
               case 114:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 41:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x10000000100000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 43:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 45:
                  if ((0x8000000080L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 46:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x8000000080000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 49:
                  if ((0x8000000080L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 50:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 51:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAddStates(104, 108);
                  break;
               case 52:
                  if ((0x100000001000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 53:
               case 94:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 54:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 56:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 57:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x80000000800L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 62:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 63:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(109, 116);
                  break;
               case 64:
                  if ((0x10000000100L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 65:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x100000001000000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 67:
               case 78:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 68:
                  if ((0x800000008000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 69:
                  if ((0x20000000200L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 70:
                  if ((0x400000004000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 71:
                  if ((0x200000002000000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 72:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 73:
               case 97:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 74:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x1000000010000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 77:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(117, 123);
                  break;
               case 79:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 80:
                  if ((0x2000000020000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 81:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 83:
                  if ((0x200000002000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 84:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 85:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x800000008L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 89:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x200000002L & l) != 0L)
                     jjAddStates(124, 125);
                  break;
               case 91:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 92:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 93:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAddStates(126, 129);
                  break;
               case 95:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
               case 147:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 98:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAddTwoStates(111, 112);
                  break;
               case 105:
                  if ((0x1000000010L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 106:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if ((0x4000000040L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 113:
                  if ((0x40000000400000L & l) != 0L)
                     jjCheckNAddTwoStates(123, 42);
                  break;
               case 115:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 117:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if ((0x4000000040L & l) != 0L)
                     jjCheckNAddTwoStates(112, 48);
                  break;
               case 125:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAddStates(130, 132);
                  break;
               case 126:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 127:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 131:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAddTwoStates(135, 136);
                  break;
               case 135:
                  if ((0x4000000040000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 136:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 137:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(133, 138);
                  break;
               case 138:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 140:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 142:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 144:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 146:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 148:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAddTwoStates(152, 149);
                  break;
               case 150:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(149);
                  break;
               case 151:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAddStates(139, 142);
                  break;
               case 155:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(154);
                  break;
               case 156:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 92)
                     jjCheckNAddStates(62, 65);
                  break;
               case 162:
                  if (curChar == 92)
                     jjCheckNAdd(163);
                  break;
               case 163:
                  if ((0x7fffffffffffffffL & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 164:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAddTwoStates(168, 165);
                  break;
               case 166:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(165);
                  break;
               case 167:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAddTwoStates(176, 170);
                  break;
               case 171:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(170);
                  break;
               case 172:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 178:
               case 12:
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 177 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 124:
         return jjMoveStringLiteralDfa1_2(0x800000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 22)
                     kind = 22;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static int[] jjnextStates = {
   12, 13, 15, 31, 36, 37, 161, 7, 8, 10, 20, 21, 23, 26, 1, 27, 
   28, 20, 26, 1, 27, 20, 21, 23, 38, 41, 43, 47, 49, 50, 51, 63, 
   77, 90, 93, 104, 113, 124, 125, 134, 137, 38, 41, 43, 47, 49, 50, 51, 
   63, 77, 90, 93, 104, 113, 124, 125, 134, 137, 148, 162, 163, 164, 162, 163, 
   164, 169, 38, 41, 43, 47, 49, 50, 51, 63, 77, 90, 93, 104, 113, 124, 
   125, 137, 148, 153, 4, 5, 24, 25, 41, 43, 47, 49, 50, 51, 63, 77, 
   90, 93, 104, 113, 124, 125, 134, 137, 54, 55, 60, 52, 62, 65, 67, 68, 
   69, 71, 72, 75, 76, 78, 79, 81, 82, 83, 87, 89, 91, 92, 95, 96, 
   103, 48, 129, 48, 133, 138, 140, 142, 144, 146, 147, 160, 154, 135, 136, 
};
public static String[] jjstrLiteralImages = {
"", "\50", "\51", "\72", "\174", "\43\50", "\43\47", "\47", "\140", "\54\100", 
"\54", "\56", "\42", "\43\72", "\43\56", "\43\53", "\43\55", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, };
public static String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 0, 0, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static long[] jjtoToken = {
   0x4c066e01ffffL, 
};
static long[] jjtoSkip = {
   0xc00000L, 
};
static long[] jjtoSpecial = {
   0xc00000L, 
};
static long[] jjtoMore = {
   0x1300000L, 
};
private ASCII_CharStream input_stream;
private int[] jjrounds = new int[177];
private int[] jjstateSet = new int[354];
StringBuilder image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public SubLParserTokenManager(ASCII_CharStream stream)
{
   if (ASCII_CharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SubLParserTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 177; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

final void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
